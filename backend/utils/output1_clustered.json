{
    "3": [
        "Some applications require that errors be detected and corrected",
        "INTRODUCTION Let us first discuss some issues related directly or indirectly to error detection and correction",
        "Let us first discuss some issues related directly or indirectly to error detection and correction",
        "Topics discussed in this section Types of Errors Redundancy Detection Versus Correction Forward Error Correction Versus Retransmission Coding Modular Arithmetic Topics discussed in this section Note In a singlebit error only bit in the data unit has changed",
        "Table A code for error detection ( Example ) Note An errordetecting code can detect only the types of errors for which it is designed other types of errors may remain undetected",
        "What is the error detection and correction capability of this scheme",
        "In other words if this code is used for error correction part of its capability is wasted",
        "For each case what is the error that can not be caught",
        "Table Standard polynomials CHECKSUM The last error detection method we discuss here is called the checksum",
        "However we briefly discuss it here to complete our discussion on error checking The last error detection method we discuss here is called the checksum",
        "However we briefly discuss it here to complete our discussion on error checking Topics discussed in this section Idea Ones Complement Internet Checksum Topics discussed in this section Example Suppose our data is a list of five bit numbers that we want to send to a destination",
        "If the result is it assumes no error otherwise there is an error"
    ],
    "0": [
        "Note In moduloN arithmetic we use only the integers in the range to N inclusive",
        "Example How can we represent the number in ones complement arithmetic using only four bits",
        "Solution The number in binary is ( it needs five bits )",
        "We can wrap the leftmost bit and add it to the four rightmost bits",
        "Solution In ones complement arithmetic the negative or complement of a number is found by inverting all bits",
        "Positive is negative is",
        "If we consider only unsigned numbers this is",
        "In other words the complement of is",
        "Another way to find the complement of a number in ones complement arithmetic is to subtract the number from n ( in this case )",
        "Example Let us redo Exercise using ones complement arithmetic",
        "However can not be expressed in bits",
        "The extra two bits are wrapped and added with the sum to create the wrapped sum value",
        "The sum is wrapped and becomes",
        "All words are added using ones complement addition"
    ],
    "21": [
        "We add r redundant bits to each block to make the length n k r The resulting nbit blocks are called codewords",
        "In block coding we divide our message into blocks each of k bits called datawords",
        "We add redundant bits to the bit dataword to make bit codewords"
    ],
    "13": [
        "In this coding scheme k and n",
        "The relationship between m and n in these codes is n m",
        "Calculate values of k and n that satisfy this requirement",
        "Solution We need to make k n m greater than or equal to or m m",
        "If we set m the result is n and k or which is not acceptable",
        "If we set m then n and k which satisfies the condition"
    ],
    "10": [
        "As we saw we have k datawords and n codewords",
        "Later we will see how to derive a codeword from a dataword",
        "Assume the dataword is",
        "The dataword becomes the codeword",
        "After flipping b ( changing the to ) the final dataword is",
        "After flipping b we get the wrong dataword"
    ],
    "22": [
        "Table shows the list of datawords and codewords",
        "Table shows the datawords and codewords",
        "We keep the rightmost digit ( ) and insert the leftmost digit ( ) as the carry in the second column",
        "The process is repeated for each column"
    ],
    "12": [
        "Example ( continued )",
        "We examine five cases",
        "It should have at least two terms",
        "Example ( continued ) The receiver follows the same procedure as the sender",
        "We leave this an exercise"
    ],
    "5": [
        "The codeword is corrupted during transmission and is received",
        "The receiver accepts the received codeword and the errors are undetected",
        "No error occurs the received codeword is",
        "The received codeword is",
        "The codeword is received"
    ],
    "8": [
        "Two corrupted bits have made the error undetectable",
        "One singlebit error changes a",
        "One singlebit error changes r",
        "Three bitsa a and aare changed by errors",
        "No bit is corrupted",
        "Some bits are corrupted but the decoder failed to detect them",
        "Example Which of the following g ( x ) values guarantees that a singlebit error is caught",
        "Any singlebit error can be caught",
        "All singlebit errors in positions to are caught",
        "No singlebit error can be caught"
    ],
    "24": [
        "First the receiver finds that the received codeword is not in the table",
        "The receiver assuming that there is only bit corrupted uses the following strategy to guess the correct dataword",
        "Comparing the received codeword with the first codeword in the table ( versus ) the receiver decides that the first codeword is not the one that was sent because there are two different bits",
        "The original codeword must be the second one in the table because this is the only one that differs from the received codeword by bit"
    ],
    "1": [
        "Table A code for error correction ( Example ) Note The Hamming distance between two words is the number of differences between corresponding bits",
        "Example Let us find the Hamming distance between two pairs of words",
        "The Hamming distance d ( ) is because",
        "The Hamming distance d ( ) is because Note The minimum Hamming distance is the smallest Hamming distance between all possible pairs in a set of words",
        "Example Find the minimum Hamming distance of the coding scheme in Table",
        "Solution We first find all Hamming distances",
        "Solution We first find all the Hamming distances",
        "Note To guarantee the detection of up to s errors in all cases the minimum Hamming distance in a block code must be dmin s",
        "Example The minimum Hamming distance for our first code scheme ( Table ) is",
        "Example A code scheme has a Hamming distance dmin",
        "Error correction codes need to have an odd minimum distance (",
        "So the minimum Hamming distance is dmin",
        "Note All Hamming codes discussed in this book have dmin"
    ],
    "23": [
        "The dmin in this case is",
        "Example Our second block code scheme ( Table ) has dmin",
        "So in this code we have dmin"
    ],
    "19": [
        "This code guarantees detection of only a single error",
        "This code can detect up to two errors",
        "Solution This code guarantees the detection of up to three errors ( s ) but it can correct up to one error",
        "This shows that our code can not correct two errors",
        "Any two errors next to each other can not be detected"
    ],
    "20": [
        "For example if the third codeword ( ) is sent and one error occurs the received codeword does not match any valid codeword",
        "If two errors occur however the received codeword may match a valid codeword and the errors are not detected",
        "Again we see that when any of the valid codewords is sent two errors create a codeword which is not in the table of valid codewords",
        "However some combinations of three errors change a valid codeword to another valid codeword",
        "Otherwise there is an error somewhere and the data are not accepted"
    ],
    "2": [
        "LINEAR BLOCK CODES Almost all block codes used today belong to a subset called linear block codes",
        "A linear block code is a code in which the exclusive OR ( addition modulo ) of two valid codewords creates another valid codeword",
        "Almost all block codes used today belong to a subset called linear block codes",
        "Topics discussed in this section Minimum Distance for Linear Block Codes Some Linear Block Codes Topics discussed in this section Note In a linear block code the exclusive OR ( XOR ) of any two valid codewords creates another valid codeword",
        "Example Let us see if the two codes we defined in Table and Table belong to the class of linear block codes",
        "The scheme in Table is a linear block code because the result of XORing any codeword with any other codeword is a valid codeword",
        "For example the XORing of the second and third codewords creates the fourth one",
        "The scheme in Table is also a linear block code",
        "In a cyclic code if a codeword is cyclically shifted ( rotated ) the result is another codeword",
        "Cyclic codes are special linear block codes with one extra property"
    ],
    "6": [
        "Note A simple paritycheck code is a singlebit errordetecting code in which n k with dmin",
        "This shows that the simple parity check guaranteed to detect one single error can also find any odd number of errors",
        "Note A simple paritycheck code can detect an odd number of errors",
        "Note In a cyclic code those e ( x ) errors that are divisible by g ( x ) are not caught",
        "Note If the generator has more than one term and the coefficient of x is all single errors can be caught",
        "Example Find the status of the following generators related to two isolated singlebit errors",
        "This is a very poor choice for a generator",
        "A codeword with two isolated errors up to bits apart can be detected by this generator",
        "Note A generator that contains a factor of x can detect all oddnumbered errors",
        "Note A good polynomial generator needs to have the following characteristics"
    ],
    "17": [
        "The dataword is created",
        "No dataword is created",
        "Note that here the dataword is wrongly created due to the syndrome value",
        "The dataword is not created"
    ],
    "16": [
        "No xi can be divisible by x",
        "If i is equal to or greater than xi is divisible by g ( x )",
        "c All values of i make xi divisible by g ( x )",
        "This g ( x ) is useless",
        "d This polynomial can not divide xt if t is less than",
        "It should not divide xt for t between and n"
    ],
    "15": [
        "Note All burst errors with L r will be detected",
        "All burst errors with L r will be detected with probability ( ) r",
        "All burst errors with L r will be detected with probability ( ) r Example Find the suitability of the following generators in relation to burst errors of different lengths",
        "This generator can detect all burst errors with a length less than or equal to bits out of burst errors with length will slip by out of burst errors of length or more will slip by",
        "This generator can detect all burst errors with a length less than or equal to bits out of million burst errors with length will slip by out of million burst errors of length or more will slip by",
        "c This generator can detect all burst errors with a length less than or equal to bits out of billion burst errors with length will slip by out of billion burst errors of length or more will slip by"
    ],
    "4": [
        "The checksum is used in the Internet by several protocols although not at the data link layer",
        "The receiver can add all the numbers received ( including the checksum )",
        "The sender initializes the checksum to and adds all data items and the checksum ( the checksum is considered as one data item and is shown in color )",
        "The sender now sends six data items to the receiver including the checksum",
        "Since the value of the checksum is this means that the data is not corrupted",
        "The receiver drops the checksum and keeps the other data items",
        "If the checksum is not zero the entire packet is dropped",
        "The checksum is sent with the data",
        "If the value of checksum is the message is accepted otherwise it is rejected",
        "Note that if there is any corruption the checksum recalculated by the receiver is not all s"
    ],
    "18": [
        "In addition to sending these numbers we send the sum of the numbers",
        "For example if the set of numbers is ( ) we send ( ) where is the sum of the original numbers",
        "The receiver adds the five numbers and compares the result with the sum",
        "If the two are the same the receiver assumes no error accepts the five numbers and discards the sum",
        "Example We can make the job of the receiver easier if we send the negative ( complement ) of the sum called the checksum"
    ],
    "14": [
        "The sum is then complemented resulting in the checksum value ( )",
        "The value of the checksum word is set to",
        "All words including the checksum are added using ones complement addition",
        "The sum is complemented and becomes the checksum",
        "The sum is complemented and becomes the new checksum",
        "Example Let us calculate the checksum for a text of characters ( Forouzan )"
    ],
    "25": [
        "The message is divided into bit words",
        "The message ( including checksum ) is divided into bit words",
        "The text needs to be divided into byte ( bit ) words",
        "We use ASCII ( see Appendix A ) to change each byte to a digit hexadecimal number"
    ]
}