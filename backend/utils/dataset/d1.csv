key,label,input,output
merged_topic_0_0,"investment, return, irr, internal, projects, rate","<task:merge> <sos>
 If a project is planned an estimate of the benefits derived is compared in ratio form to the cost incurred
 Should this ratio be more than the project is clearly worthwhile and the projects with the highest benefitcost ratios should be constructed first because these will provide the greatest returns on the investment
 Internal Rate of Return ( IRR ) is an indicator to reflect the profit of the projects
 The IRR is the annualized effective compounded return rate or rate of return that makes the net present value of all cash flows ( both positive and negative ) from a particular investment equal to zero
 In more specific terms the IRR of an investment is the discount rate at which the net present value of costs ( negative cash flows ) of the investment equals the net present value of the benefits ( positive cash flows ) of the investment
 Internal rates of return are commonly used to evaluate the desirability of investments or projects
 
 ++++
 
 If a project is planned an estimate of the benefits derived is compared in ratio form to the cost incurred
 Should this ratio be more that the project is clearly worthwhile and the projects with the highest benefitcost rations should be constructed first because these will provide the greatest returns on the investment
 Internal Rate of Return ( IRR ) is an indicator to reflect the profit of the projects
 The IRR is the annualized effective compounded return rate or rate of return that makes the net present value of all cash flows ( both positive and negative ) from a particular investment equal to zero
 In more specific terms the IRR of an investment is the discount rate at which the net present value of costs ( negative cash flows ) of the investment equals the net present value of the benefits ( positive cash flows ) of the investment
 Internal rates of return are commonly used to evaluate the desirability of investments or projects
 The higher a projects internal rate of return the more desirable it is to undertake the project
 <eos>","If a project is planned, an estimate of the benefits derived is compared in ratio form to the cost incurred. Should this ratio be more than the project is clearly worthwhile, and the projects with the highest benefit-cost ratios should be constructed first because these will provide the greatest returns on the investment. Internal Rate of Return (IRR) is an indicator to reflect the profit of the projects. The IRR is the annualized effective compounded return rate or rate of return that makes the net present value of all cash flows (both positive and negative) from a particular investment equal to zero. In more specific terms, the IRR of an investment is the discount rate at which the net present value of costs (negative cash flows) of the investment equals the net present value of the benefits (positive cash flows) of the investment. Internal rates of return are commonly used to evaluate the desirability of investments or projects. The higher a project's internal rate of return, the more desirable it is to undertake the project."
merged_topic_0_1,"investment, return, irr, internal, projects, rate","<task:merge> <sos>
 The higher a projects internal rate of return the more desirable it is to undertake the project
 Assuming all projects require the same amount of upfront investment the project with the highest IRR would be considered the best and undertaken first
 IRR values of some of the projects in Nepal are shown in Table
 Table Internal rates of return values Environmental friendly and socially acceptable decisions Engineering decisions are also based on the environmental impacts caused by the project activities which could be in planning implementation or operation phase
 
 ++++
 
 Assuming all projects require the same amount of upfront investment the project with the highest IRR would be considered the best and undertaken first
 IRR values of some of the projects in Nepal is shown in Table
 Table Internal rates of return values Often the benefits of a proposed project are not such simple items as recreational value but the more serious concern for human health or other social aspects
 Refer Box for details
 <eos>","The higher a project's internal rate of return, the more desirable it is to undertake the project. Assuming all projects require the same amount of upfront investment, the project with the highest IRR would be considered the best and undertaken first. IRR values of some of the projects in Nepal are shown in Table. Table Internal rates of return values indicates that engineering decisions are made based on environmental impacts caused by project activities, which could be in the planning, implementation, or operation phase, to ensure environmental friendliness and social acceptability. Often, the benefits of a proposed project are not such simple items as recreational value but the more serious concern for human health or other social aspects. Refer Box for details."
merged_topic_1_0,"decisions, decision, technical, engineers, available, engineering, analysis, making","<task:merge> <sos>
 Sometimes these decisions turn out to be poor and or not appropriate
 A far greater number of decisions however made hundreds of times a day by hundreds of thousands of engineers are correct and improve a lot of the human civilization protect the global environment and enhance the integrity of the profession
 Because so few engineering decisions turn out poorly engineering decision making is a littleknown and rarely discussed process
 Yet when a decision turns out to be wrong the results are often catastrophic
 Often Engineers and Doctors are put on the same footing by the career choosers however a doctor can harm only one person at a time while engineers have potential to harm thousands at a time through incorrectly designed systems
 Engineering decisions Engineering decisions could be based on ( ) Technical feasibility ( ) Economic Viability ( ) Socially Acceptable ( ) Environmental friendly Technical feasibility Technical decisions are quantifiable and can be evaluated and checked by other competent professional engineers
 When carrying out technical analysis we often do not have all the information we need to make decisions
 Therefore we must make assumptions
 
 ++++
 
 A far greater number of decisions however made hundred of times a day by hundreds of thousands of engineers are correct and improve a lot of the human civilization protect the global environment and enhance the integrity of the profession
 Because so few engineering decisions turn out poorly engineering decision making is a littleknown and rarely discussed process
 Engineering decisions Engineering decisions could be based on ( ) technical analysis ( ) cost effectiveness analysis ( ) cost benefit analysis ( ) risk analysis ( ) environmental impact analysis and ( ) ethical analysis
 Technical decisions are quantifiable and can be evaluated and checked by other competent professional engineers
 In engineering there seldom is one best way to design a project or a product
 If there ever was a best way then engineering would become stagnant innovation would cease and technical paralysis would set in
 <eos>","A far greater number of decisions, however, made hundreds of times a day by hundreds of thousands of engineers, are correct and improve a lot of human civilization, protect the global environment, and enhance the integrity of the profession. Because so few engineering decisions turn out poorly, engineering decision-making is a little-known and rarely discussed process. Yet, sometimes these decisions turn out to be poor or not appropriate, and when a decision turns out to be wrong, the results are often catastrophic. Often, engineers and doctors are put on the same footing by career choosers; however, a doctor can harm only one person at a time, while engineers have the potential to harm thousands at a time through incorrectly designed systems. Engineering decisions could be based on technical feasibility, economic viability, social acceptability, and environmental friendliness, encompassing aspects such as technical analysis, cost effectiveness analysis, cost-benefit analysis, risk analysis, environmental impact analysis, and ethical analysis. Technical decisions are quantifiable and can be evaluated and checked by other competent professional engineers. When carrying out technical analysis, we often do not have all the information we need to make decisions; therefore, we must make assumptions. In engineering, there seldom is one best way to design a project or a product; if there ever was a best way, then engineering would become stagnant, innovation would cease, and technical paralysis would set in."
merged_topic_1_1,"decisions, decision, technical, engineers, available, engineering, analysis, making","<task:merge> <sos>
 These assumptions of course must be made using the best available data with a ( sometimes liberal ) sprinkling of good judgment
 CostEffectiveness Analysis ( Economic Viability ) Engineers typically find themselves working for an employer or client who requires that various alternatives for solving an engineering problem be analyzed on the basis of the cost
 Choosing the lowest total cost alternative ( given all cost data ) would be the most rational decision
 The methods of decision making available to engineers stretch from the most objective ( technical ) to the most subjective ( ethical )
 The inherent method of decision making is the same in all cases
 The problem is first analyzed taken apart and viewed from many perspectives
 Approximations in engineering calculations Engineers are often called on to provide information not in its exact form but as approximations
 
 ++++
 
 The undergraduate engineering student is often taught during early years of an engineering education that each homework assignment and test question has a single right answer and that all other answers are wrong
 But in engineering practice many technical decision may be right in that a problem may have several equally correct technical solutions
 When carrying out technical analysis we often do not have all the information we need to make decisions
 Therefore we must make assumptions
 These assumptions of course must be made using the best available data with a ( sometimes liberal ) sprinkling of good judgment
 While technical calculations can answer technical questions questions of cost require a different form of engineering decision making ie
 Engineering typically find themselves working for an employer or client who requires that various alternatives for solving an engineering problem be analysed on the basis of the cost
 For example if a municipal engineer is considering purchasing refuse collection vehicles and finds that he or she can buy either expensive trucks that achieve great compaction of the refuse thereby making efficient trips to the landfill or inexpensive trucks that require more trips to the landfill how does the engineer know which is less expensive for the community
 <eos>","The undergraduate engineering student is often taught during early years of an engineering education that each homework assignment and test question has a single right answer and that all other answers are wrong. But in engineering practice, many technical decisions may be right in that a problem may have several equally correct technical solutions. Engineers are often called on to provide information not in its exact form but as approximations. When carrying out technical analysis, we often do not have all the information we need to make decisions; therefore, we must make assumptions. These assumptions, of course, must be made using the best available data with a (sometimes liberal) sprinkling of good judgment. The inherent method of decision making is the same in all cases: the problem is first analyzed, taken apart, and viewed from many perspectives. The methods of decision making available to engineers stretch from the most objective (technical) to the most subjective (ethical). While technical calculations can answer technical questions, questions of cost require a different form of engineering decision making. CostEffectiveness Analysis (Economic Viability) is an approach where engineers typically find themselves working for an employer or client who requires that various alternatives for solving an engineering problem be analyzed on the basis of the cost. Choosing the lowest total cost alternative (given all cost data) would be the most rational decision. For example, if a municipal engineer is considering purchasing refuse collection vehicles and finds that he or she can buy either expensive trucks that achieve great compaction of the refuse thereby making efficient trips to the landfill or inexpensive trucks that require more trips to the landfill, the engineer needs to know which is less expensive for the community."
merged_topic_1_2,"decisions, decision, technical, engineers, available, engineering, analysis, making","<task:merge> <sos>
 Obviously the engineer can not in a few minutes conduct a thorough cost estimate
 In the face of such problems the engineer has to draw on whatever information might be available
 There is time enough for more exact calculations later
 
 ++++
 
 The methods of decisions making available to engineers stretch from the most objective ( technical ) to the most subjective ( ethical )
 The inherent method of decision making is the same in all cases
 When all the numbers are in and the variables are evaluated the information is synthesized into a solution ( Vesilind and Morgan )
 <eos>","Obviously, an engineer cannot conduct a thorough cost estimate in a few minutes; therefore, in the face of such problems, the engineer has to draw on whatever information might be available, as there is time enough for more exact calculations later. The methods of decision-making available to engineers stretch from the most objective (technical) to the most subjective (ethical), yet the inherent method of decision-making is the same in all cases. When all the numbers are in and the variables are evaluated, the information is synthesized into a solution (Vesilind and Morgan)."
merged_topic_2_0,"engineering, environmental, design, projects, engineers, public, water","<task:merge> <sos>
 Engineering may be defined as the application under constraints of scientific principles to the planning design construction and operation of structures equipment and systems for the benefit of society ( Sincero and Sincero )
 Engineering is the profession in which a knowledge of the mathematical and natural sciences gained by study experience and practice is applied with judgment to develop ways to economically utilize the materials and forces of nature for the benefit of human society
 
 ++++
 
 If the tasks performed by environmental engineers were examined it would be found that the engineers deal with the structures equipment and systems that are designed to protect and enhance the quality of the environment and to protect and enhance public health and welfare
 Just as we recognize there is no single perfect work of art such as painting or a fashion design there is no perfect road or a water treatment plant
 If there were a perfect plant painting or a road all future water treatment plants or roads ( not the alignment but the structure )
 For example teaching aid in the a class could be chalk and a duster white board marker or a LCD projector
 Similarly a sewer can be constructed with a concrete cast iron steel aluminum plastic or clay materials
 With correct engineering design procedures such a sewer would carry the design flow and thus would be technically correct ( Vesilind and Morgan )
 Based on the these values calculation of acceptable levels of pollution is also possible
 Similarly life cycle assessment ( LCA ) of products is increasingly used in identifying the environmental impacts caused by the manufacturing process and use of the products
 Traditionally engineers were able to practice their profession without having to address environmental ethics to the same depth that is now required
 Environmental Engineering Environmental Engineering is defined as the application of engineering principles under constraint to the protection and enhancement of the quality of the environment and to the enhancement and protection of public health and welfare ( Sincero and Sincero )
 <eos>","Engineering may be defined as the application, under constraints, of scientific principles to the planning, design, construction, and operation of structures, equipment, and systems for the benefit of society (Sincero and Sincero); it is also the profession in which a knowledge of the mathematical and natural sciences, gained by study, experience, and practice, is applied with judgment to develop ways to economically utilize the materials and forces of nature for the benefit of human society. Environmental Engineering is defined as the application of engineering principles under constraint to the protection and enhancement of the quality of the environment, and to the enhancement and protection of public health and welfare (Sincero and Sincero), with environmental engineers specifically dealing with structures, equipment, and systems designed for these protective and enhancing purposes. Just as there is no single perfect work of art, such as a painting or a fashion design, there is no perfect road or a water treatment plant; if there were a perfect plant, painting, or road, all future water treatment plants or roads (not the alignment but the structure) would be identical. For example, a teaching aid in a class could be chalk and a duster, a white board marker, or an LCD projector. Similarly, a sewer can be constructed with concrete, cast iron, steel, aluminum, plastic, or clay materials; with correct engineering design procedures, such a sewer would carry the design flow and thus would be technically correct (Vesilind and Morgan). Based on these values, calculation of acceptable levels of pollution is also possible. Additionally, life cycle assessment (LCA) of products is increasingly used in identifying the environmental impacts caused by their manufacturing process and use. Traditionally, engineers were able to practice their profession without having to address environmental ethics to the same depth that is now required."
merged_topic_2_1,"engineering, environmental, design, projects, engineers, public, water","<task:merge> <sos>
 In other words Engineering may be defined as the application under constraints of scientific principles to the planning design construction and operation of structures equipment and systems for the benefit of the society
 If the tasks performed by environmental engineers were examined it would be found that the engineers deal with the structures equipment and systems that are designed to protect and enhance the quality of the environment and to protect and enhance public health and welfare
 Environmental Engineering Environmental Engineering is defined as the application of engineering principles under constraint to the protection and enhancement of the quality of the environment and to the enhancement and protection of public health and welfare ( Sincero and Sincero )
 Environmental Engineering is concerned with engineering problems in the field of environmental sanitation water supplies disposal of or recycle of wastewater and solid wastes along with public health and the elimination of industrial health hazards and the effect of technological advances on the environment ( ASCE )
 In general Environmental engineering is focused on Environmental engineers have the responsibility control of water soil and atmospheric pollution and noise pollution To design build and operate water and wastewater treatment plants
 
 ++++
 
 Environmental Engineering is manifest by sound engineering thought and practice in the solution of problems of environmental sanitation notably in the provision of safe palatable ( tastes pleasant ) and ample public water supplies the proper disposal of or recycle of wastewater and solid wastes the adequate drainage of urban and rural areas for proper sanitation and the control of water soil and atmospheric pollution and the social and environmental impact of these solutions
 Furthermore it is concerned with engineering problems in the field of public health the elimination of industrial health hazards and the provision of adequate sanitation in urban rural and recreational areas and the effect of technological advances on the environment ( ASCE )
 Traditionally the environmental engineering has been the province of the civil engineering profession
 Around the name sanitary engineering or public health engineering was changed to environmental engineering
 <eos>","Engineering may be defined as the application, under constraints, of scientific principles to the planning, design, construction, and operation of structures, equipment, and systems for the benefit of society. Environmental Engineering is defined as the application of engineering principles under constraint to the protection and enhancement of the quality of the environment, and to the enhancement and protection of public health and welfare (Sincero and Sincero). Environmental engineers deal with the structures, equipment, and systems designed for these purposes, and are generally focused on the control of water, soil, atmospheric, and noise pollution, having the responsibility to design, build, and operate water and wastewater treatment plants. Environmental Engineering is concerned with a range of problems, including environmental sanitation, water supplies, the disposal of or recycle of wastewater and solid wastes, public health, the elimination of industrial health hazards, and the effect of technological advances on the environment (ASCE). Furthermore, it is manifest by sound engineering thought and practice in the solution of these problems of environmental sanitation, notably in the provision of safe, palatable (tastes pleasant), and ample public water supplies, the proper disposal of or recycle of wastewater and solid wastes, the adequate drainage of urban and rural areas for proper sanitation, and the control of water, soil, and atmospheric pollution; these solutions also address the social and environmental impact and ensure adequate sanitation in urban, rural, and recreational areas. Traditionally, environmental engineering has been the province of the civil engineering profession, and around [unspecified time] its name was changed from sanitary engineering or public health engineering to environmental engineering."
merged_topic_2_2,"engineering, environmental, design, projects, engineers, public, water","<task:merge> <sos>
 To build and operate solid waste collection transportation and disposal systems To carry out environmental assessment of projects and products To provide inputs in decision making regarding the environmental issues of development sector and welfare of public To predict the level of pollution and design control mechanisms and products Engineering Project Any engineering project large or small a product being designed or a service to be provided encompasses within its implementation a series of decisions made by engineers
 When engineers work on projects they need to assess the potential impact on the environment
 By conducting environmental assessments engineers can identify and implement solutions that minimize adverse environmental impacts
 Engineers must also consider the social implications of their projects
 Social analysis may involve engaging with stakeholders understanding their needs and concerns and incorporating their input into the engineering process
 By considering environmental and social factors engineers can design projects that are not only technically sound but also contribute positively to society and the planet
 This approach aligns with the principles of sustainable development and helps create a more responsible and equitable engineering practice
 Few examples of the projects requiring BES are a
 Few examples of the projects requiring IEE are a
 Few examples of the projects requiring EIA are a
 
 ++++
 
 Support the government to develop adopt and implement policies and strategies for overall development of sanitary and environmental conditions of the country
 Provide technical counseling and awareness to public for any critical environmental issues emerged due to natural or human activities
 Source SOPHEN ( ) In general Environmental engineering is focused on Provisions of safe palatable and ample public water supplies Proper disposal of or recycling of wastewater and solid wastes Control of water soil and atmospheric pollution including noise pollution Environmental engineers have the responsibility To plan design construct and operate sewage treatment plants to prevent the pollution of receiving streams
 To build and operate water treatment plants
 To build and operate solid waste collection transportation and disposal systems To plan design construct and operate air pollution control equipment
 To design reservoirs and to control groundwater contamination
 <eos>","Environmental engineering generally focuses on the provision of safe, palatable, and ample public water supplies, the proper disposal or recycling of wastewater and solid wastes, and the control of water, soil, and atmospheric pollution, including noise pollution. Environmental engineers have the responsibility to plan, design, construct, and operate sewage treatment plants to prevent the pollution of receiving streams, to build and operate water treatment plants, and to plan, design, construct, and operate air pollution control equipment. They also design reservoirs and control groundwater contamination, and are tasked with building and operating solid waste collection, transportation, and disposal systems. Furthermore, environmental engineers carry out environmental assessments of projects and products, provide inputs in decision-making regarding environmental issues of the development sector and public welfare, and predict pollution levels to design control mechanisms and products. Any engineering project, whether large or small, a product being designed, or a service to be provided, encompasses within its implementation a series of decisions made by engineers. When engineers work on projects, they need to assess their potential impact on the environment; by conducting environmental assessments, they can identify and implement solutions that minimize adverse environmental impacts. Engineers must also consider the social implications of their projects, with social analysis potentially involving engaging with stakeholders, understanding their needs and concerns, and incorporating their input into the engineering process. By considering both environmental and social factors, engineers can design projects that are not only technically sound but also contribute positively to society and the planet, aligning with the principles of sustainable development and fostering a more responsible and equitable engineering practice. This field also supports the government in developing, adopting, and implementing policies and strategies for the overall improvement of sanitary and environmental conditions of the country, while providing technical counseling and awareness to the public for critical environmental issues emerging from natural or human activities. Various projects, for instance, may require studies such as Basic Environmental Studies (BES), Initial Environmental Examinations (IEE), or Environmental Impact Assessments (EIA)."
merged_topic_3_0,"engineering, environmental, design, projects, engineers, benefit, structures, systems, society","<task:merge> <sos>
 Engineering may be defined as the application under constraints of scientific principles to the planning design construction and operation of structures equipment and systems for the benefit of society ( Sincero and Sincero )
 Engineering is the profession in which a knowledge of the mathematical and natural sciences gained by study experience and practice is applied with judgment to develop ways to economically utilize the materials and forces of nature for the benefit of human society
 In other words Engineering may be defined as the application under constraints of scientific principles to the planning design construction and operation of structures equipment and systems for the benefit of the society
 If the tasks performed by environmental engineers were examined it would be found that the engineers deal with the structures equipment and systems that are designed to protect and enhance the quality of the environment and to protect and enhance public health and welfare
 Environmental Engineering Environmental Engineering is defined as the application of engineering principles under constraint to the protection and enhancement of the quality of the environment and to the enhancement and protection of public health and welfare ( Sincero and Sincero )
 Environmental Engineering is concerned with engineering problems in the field of environmental sanitation water supplies disposal of or recycle of wastewater and solid wastes along with public health and the elimination of industrial health hazards and the effect of technological advances on the environment ( ASCE )
 In general Environmental engineering is focused on Environmental engineers have the responsibility control of water soil and atmospheric pollution and noise pollution To design build and operate water and wastewater treatment plants
 
 ++++
 
 Engineering Engineering is a profession that applies mathematics and science to utilize the properties of matter and sources of energy to create useful structures machines products systems and processes ( Davis and Cornwell )
 Engineering may be defined as the application under constraints of scientific principles to the planning design construction and operation of structures equipment and systems for the benefit of society ( Sincero and Sincero )
 <eos>","Engineering is a profession that applies mathematics and science to utilize the properties of matter and sources of energy to create useful structures, machines, products, systems, and processes (Davis and Cornwell). More broadly, it may be defined as the application, under constraints, of scientific principles to the planning, design, construction, and operation of structures, equipment, and systems for the benefit of society (Sincero and Sincero). This involves a knowledge of mathematical and natural sciences, gained by study, experience, and practice, applied with judgment to develop ways to economically utilize the materials and forces of nature for the benefit of human society. Environmental Engineering is a specific branch concerned with engineering problems in the field of environmental sanitation, water supplies, the disposal or recycle of wastewater and solid wastes, along with public health and the elimination of industrial health hazards, and the effect of technological advances on the environment (ASCE). It is defined as the application of engineering principles under constraint to the protection and enhancement of the quality of the environment, and to the protection and enhancement of public health and welfare (Sincero and Sincero). Environmental engineers deal with structures, equipment, and systems designed for these purposes, focusing on the control of water, soil, atmospheric, and noise pollution, and have the responsibility to design, build, and operate water and wastewater treatment plants."
merged_topic_3_1,"engineering, environmental, design, projects, engineers, benefit, structures, systems, society","<task:merge> <sos>
 To build and operate solid waste collection transportation and disposal systems To carry out environmental assessment of projects and products To provide inputs in decision making regarding the environmental issues of development sector and welfare of public To predict the level of pollution and design control mechanisms and products Engineering Project Any engineering project large or small a product being designed or a service to be provided encompasses within its implementation a series of decisions made by engineers
 When engineers work on projects they need to assess the potential impact on the environment
 By conducting environmental assessments engineers can identify and implement solutions that minimize adverse environmental impacts
 Engineers must also consider the social implications of their projects
 Social analysis may involve engaging with stakeholders understanding their needs and concerns and incorporating their input into the engineering process
 By considering environmental and social factors engineers can design projects that are not only technically sound but also contribute positively to society and the planet
 This approach aligns with the principles of sustainable development and helps create a more responsible and equitable engineering practice
 Few examples of the projects requiring BES are a
 Few examples of the projects requiring IEE are a
 Few examples of the projects requiring EIA are a
 
 ++++
 
 Engineering is the profession in which a knowledge of the mathematical and natural sciences gained by study experience and practice is applied with judgment to develop ways to utilize economically the materials and forces of nature for the benefit of human society
 In other words Engineering may be defined as the application under constraints of scientific principles to the planning design construction and operation of structures equipment and systems for the benefit of the society
 Scientist discover things Engineers make them work Any engineering project large or small a product being designed or a services to be provided encompasses within its implementation a series of decisions made by engineers
 <eos>","Engineering is a profession in which a knowledge of the mathematical and natural sciences, gained by study, experience, and practice, is applied with judgment to develop ways to utilize economically the materials and forces of nature for the benefit of human society. In other words, engineering may be defined as the application under constraints of scientific principles to the planning, design, construction, and operation of structures, equipment, and systems for the benefit of society; while scientists discover things, engineers make them work. Any engineering project, whether large or small, a product being designed, or a service to be provided, encompasses within its implementation a series of decisions made by engineers. These decisions include building and operating solid waste collection, transportation, and disposal systems. Engineers are also tasked with carrying out environmental assessment of projects and products, providing inputs in decision-making regarding the environmental issues of the development sector and public welfare, and predicting pollution levels to design control mechanisms and products. When engineers work on projects, they need to assess the potential impact on the environment, conducting environmental assessments to identify and implement solutions that minimize adverse environmental impacts. Furthermore, engineers must consider the social implications of their projects; social analysis may involve engaging with stakeholders, understanding their needs and concerns, and incorporating their input into the engineering process. By considering both environmental and social factors, engineers can design projects that are not only technically sound but also contribute positively to society and the planet. This approach aligns with the principles of sustainable development and helps create a more responsible and equitable engineering practice, with few examples of such projects requiring BES, IEE, or EIA."
merged_topic_4_0,"nepal, engineers, act, nepalese, council, professional, sophen, members, society","<task:merge> <sos>
 Environmental Laws and Regulation In Nepal Environment Protection Act ( EPA ) and Environmental Protection Rules ( EPR ) guides the assessment
 There are three levels of environmental study in Nepal as per project size
 Water Resources Act is an act made to provide for the management of water resources
 Also different policies standards guidelines like guidelines and standards for air pollutants vehicular emissions water and wastewater quality climate change policy are also formulated
 Institution related to engineers in Nepal In Nepal Different institutions and associations are working in this sector
 Nepal Engineering Council ( NEC ) was formed under the Nepal Engineering Council Act promulgated by then His Majesty the King on BS
 Nepal Engineering Council Rules has also been prepared and approved by then His Majestys Government as per the provision of Clause of the Act
 The first Executive Council was formed on Magh
 The act was amended twice in and BS
 It directs the relationships of Nepalese Engineers with Public Employers and Clients Other Engineers
 Recognition of academic institutions
 Nepal Engineers Association ( NEA ) is an independent nonprofit organization of Nepalese Engineers
 It was established in AD ( BS )
 NEA during was successful in establishing this very organization
 The organizing of the World Engineering Congress along with the first three national conventions were major milestones in this period
 Nepal Engineers Association office is located at Lalitpur behind UNDP building
 The main objectives to NEA are To promote development of engineering science and technology in Nepal
 To promote fellowship goodwill and cooperation assistance among the Nepalese engineers and safeguard their rights and interests
 
 ++++
 
 In Nepal Society of Public Health Engineers ( SOPHEN ) is an association working the sector
 Box Introduction to SOPHEN Society of Public Health Engineers Nepal ( SOPHEN ) was registered in Nepal in AD ( BS ) as an independent professional organization by a group of Nepalese Engineers
 At present it has members
 SOPHEN is governed by an executive committee of eleven members elected by the general members of the society
 <eos>","Environmental Laws and Regulations in Nepal are primarily guided by the Environment Protection Act (EPA) and Environmental Protection Rules (EPR), which inform environmental assessments. Environmental study in Nepal is conducted at three levels, determined by project size. The Water Resources Act specifically provides for the management of water resources. Additionally, various policies, standards, and guidelines have been formulated, including those for air pollutants, vehicular emissions, water and wastewater quality, and climate change. In Nepal, various institutions and associations are active in the engineering sector. The Nepal Engineering Council (NEC) was formed under the Nepal Engineering Council Act, promulgated by then His Majesty the King on BS. Its rules have also been prepared and approved by His Majesty's Government, as per the provision of Clause of the Act. The first Executive Council was formed on Magh, and the Act itself was amended twice in and BS. The NEC directs the relationships of Nepalese Engineers with Public Employers, Clients, and Other Engineers, and is also responsible for the recognition of academic institutions. The Nepal Engineers Association (NEA) is an independent nonprofit organization of Nepalese Engineers, established in AD (BS). NEA was successful in establishing this organization, with the organizing of the World Engineering Congress along with the first three national conventions being major milestones. Its office is located in Lalitpur, behind the UNDP building. Its main objectives are to promote the development of engineering science and technology in Nepal, foster fellowship, goodwill, cooperation, and assistance among Nepalese engineers, and safeguard their rights and interests. In Nepal, the Society of Public Health Engineers (SOPHEN) is another association active in the sector. SOPHEN was registered in Nepal in AD (BS) as an independent professional organization by a group of Nepalese Engineers. At present, it has members and is governed by an executive committee of eleven members elected by the general members of the society."
merged_topic_4_1,"nepal, engineers, act, nepalese, council, professional, sophen, members, society","<task:merge> <sos>
 Society of Environmental Engineers Nepal ( SEEN ) is an institution established by Environmental Engineers of Nepal
 It works for the welfare or Environmental Engineering professionals of Nepal
 Its head office is located at Babarmahal Kathmandu
 It aims to work in association with other professional bodies in Nepal and abroad
 Society of Public Health Engineers Nepal ( SOPHEN ) was registered in Nepal in AD ( BS ) as an independent professional organization by a group of Nepalese Engineers
 Nepal Environment Society ( NES ) is an institution that includes all the Environmental professionals of Nepal
 
 ++++
 
 Some of the major responsibilities of SOPHEN include the enhancement of technical and professional competencies of its members work for the protection of the basic professional rights and support the government and other agencies in the formulation of policies and strategies in related fields
 SOPHEN is committed to carry out various professional activities that are intended to bring qualitative results to improve the sanitary and environmental conditions of the country
 It aims to work in association with other professional bodies in Nepal and aboard
 SOPHEN has been recognized by all the sectors of the society as a leading professional body of Nepal
 Objectives Dissemination of stateofart technologies to practitioners policy makers and beneficiaries
 Establish professional relationship with similar institutions to national and international level sharing ideas and technologies for mutual benefits and interests
 Coordinate with other national and international professional bodies enhancing professional competencies to the implementation of emerging technologies
 Building capacities of its members through various research training and workshop in national and international level
 <eos>","Society of Environmental Engineers Nepal (SEEN) is an institution established by Environmental Engineers of Nepal that works for the welfare of Environmental Engineering professionals of Nepal, with its head office located at Babarmahal Kathmandu, and it aims to work in association with other professional bodies in Nepal and abroad. Separately, the Society of Public Health Engineers Nepal (SOPHEN) was registered in Nepal in AD (BS) as an independent professional organization by a group of Nepalese Engineers. SOPHEN has been recognized by all sectors of society as a leading professional body of Nepal and is committed to carrying out various professional activities intended to bring qualitative results to improve the sanitary and environmental conditions of the country. Some of the major responsibilities of SOPHEN include the enhancement of technical and professional competencies of its members, working for the protection of the basic professional rights, and supporting the government and other agencies in the formulation of policies and strategies in related fields. SOPHEN also aims to work in association with other professional bodies in Nepal and aboard. Its objectives further include the dissemination of state-of-art technologies to practitioners, policymakers, and beneficiaries; establishing professional relationships with similar institutions at national and international levels for sharing ideas and technologies for mutual benefits and interests; coordinating with other national and international professional bodies, enhancing professional competencies in the implementation of emerging technologies; and building capacities of its members through various research, training, and workshops at national and international levels. Additionally, Nepal Environment Society (NES) is an institution that includes all the Environmental professionals of Nepal."
key,label,input,output
merged_topic_0_0,"balance, zero, arises, interests, check, earned","<task:merge> <sos>
 In its simplest form it may be viewed as an accounting procedure
 For example a mass balance is performed each time a check book is balanced
 However a situation may arises when there is a ZERO balance that is the rates of deposit and withdrawals are equal
 In actual case a bank would not permit one to make the balance a zero
 in the sense that when there is no balance or minimum balance kept just to maintain the status of the account and no interests are earned
 
 ++++
 
 In its simplest form it may be viewed as an accounting procedure
 For example a mass balance is performed each time a check book is balanced
 However a situation may arise when there is a ZERO balance that is the rates of deposit and withdrawals are equal
 In actual case a bank would not permit one to make the balance a zero
 in the sense that when there is no balance or minimum balance kept just to maintain the status of the account and no interests are earned
 This implies that there is no accumulation in the system
 <eos>","In its simplest form, it may be viewed as an accounting procedure. For example, a mass balance is performed each time a check book is balanced. However, a situation may arise when there is a ZERO balance, that is, the rates of deposit and withdrawals are equal. In actual case, a bank would not permit one to make the balance a zero, in the sense that when there is no balance or minimum balance kept just to maintain the status of the account and no interests are earned. This implies that there is no accumulation in the system."
merged_topic_1_0,"concept, problems, define, allows, place, track","<task:merge> <sos>
 What this concept allows us to do is track materials that is pollutants from one place to another with mass balance equations
 This concept serves as a basis for describing and analysing environmental engineering problems
 What this concept allows us to do is track materials for example the pollutants from one place to another with mass balance equations
 The first step a mass balance analysis is to define the particular region in the space that is to be analysed
 This helps us define the problems
 In other contexts such as modeling air pollution the assumption is referred to as a complete mix box model
 The same simple models can be applied to certain problems involving air quality
 
 ++++
 
 What this concept allows us to do is track materials that is pollutants from one place to another with mass balance equations
 This concept serves as a basis for describing and analyzing environmental engineering problems
 What this concept allows us to do is track materials for example the pollutants from one place to another with mass balance equations
 This helps us define the problems
 In other contexts such as modeling air pollution the assumption is referred to as a complete mix box model
 The same simple models can be applied to certain problems involving air quality
 <eos>","This concept serves as a basis for describing and analyzing environmental engineering problems. What this concept allows us to do is track materials, such as pollutants, from one place to another with mass balance equations. The first step in a mass balance analysis is to define the particular region in the space that is to be analyzed. This helps us define the problems. In other contexts, such as modeling air pollution, the assumption is referred to as a complete mix box model. The same simple models can be applied to certain problems involving air quality."
merged_topic_2_0,"balance, material, unit, mass, volume, time","<task:merge> <sos>
 The concept is called a materials balance or a mass balance
 We then write material balance equations to solve for unknown inputs outputs or accumulations or to demonstrate that we have accounted for all of the components by demonstrating that the materials balance closes that is the accounting balances
 Material balance with single material Material flows can be most readily understood and analysed by using the concept of a black box
 If no processes are going inside the box that will either make of more material or destroy some of it and if the slow is assumed not vary with time ( that is to be at steady state ) then it is possible to write a material balance around the box as Fig
 The black box can be used to establish a volume balance and a mass balance if the density does not change in the process
 Because the definition of density is mass per unit volume the conversion from a mass balance to a volume balance is achieved by dividing each term by the density ( a constant )
 It is generally convenient to use the volume balance for liquids and the mass balance for solids
 If again it is assumed that steady state conditions exist and that no material is being destroyed or produced then the material balance is X of time unit per Mass X time unit per Mass IN OUT or X X X ( ) Fig
 
 ++++
 
 The concept is called a materials balance or a mass balance
 We then write material balance equations to solve for unknown inputs outputs or accumulations or to demonstrate that we have accounted for all of the components by demonstrating that the materials balance closes that is the accounting balances
 Material balance with single material Material flows can be most readily understood and analyzed by using the concept of a black box
 If and if the slow is assumed not vary with time ( that is to be at steady state ) then it is possible to write a material balance around the box as Fig
 <eos>","The concept is called a materials balance or a mass balance. We then write material balance equations to solve for unknown inputs, outputs, or accumulations, or to demonstrate that we have accounted for all of the components by showing that the materials balance closes, which means the accounting balances. Material flows, particularly with a single material, can be most readily understood and analyzed by using the concept of a black box. If no processes are going inside the box that will either make more material or destroy some of it, and if the flow is assumed not to vary with time (that is, to be at steady state), then it is possible to write a material balance around the box as Fig. The black box can also be used to establish a volume balance and a mass balance if the density does not change in the process. Because the definition of density is mass per unit volume, the conversion from a mass balance to a volume balance is achieved by dividing each term by the density (a constant). It is generally convenient to use the volume balance for liquids and the mass balance for solids. If again it is assumed that steady state conditions exist and that no material is being destroyed or produced, then the material balance is Mass per time unit IN equals Mass per time unit OUT, represented as X IN = X OUT (Fig)."
merged_topic_2_1,"balance, material, unit, mass, volume, time","<task:merge> <sos>
 If the influents are labeled as X X Xm the material balance would yield ( ) m e i i X X Fig
 Complex process with a single material The preceding two sections illustrate the basic principle of material balances
 If these possibilities are included in the full material balance the equation reads time unit per Material time unit per Material time unit per Material time unit per Material time unit per Material CONSUMED PRODUCED OUT IN D ACCUMULATE If the material in question is labeled A the mass balance equation reads time unit per A of Mass time unit per A of Mass time unit per A of Mass time unit per A of Mass time unit per A of Mass CONSUMED PRODUCED OUT IN D ACCUMULATE Or provided the density does not change in volume terms as time unit per A of Volume time unit per A of Volume time unit per A of Volumen time unit per A of Volume time unit per A of Volume CONSUMED PRODUCED OUT IN D ACCUMULATE Mass or volume per unit time can be simplified to rate where rate simply means the flow of mass or volume
 Thus the material balance or mass balance equation for either mass or volume reads CONSUMED A of Rate PRODUCED A of Rate OUT A of Rate IN A of Rate D ACCUMULATE A of Rate ( ) General rules in solving mass balance problems
 
 ++++
 
 Because the definition of density is mass per unit volume the conversion from a mass balance to a volume balance is achieved by dividing each term by the density ( a constant )
 It is generally convenient to use the volume balance for liquids and the mass balance for solids
 If again it is assumed that steady state conditions exist and that no material is being destroyed or produced then the material balance is Mass per unit Mass per unit time X time X OUT IN or XX X ( ) Fig
 If the influents are labeled as X X Xm the material balance would yield
 <eos>","The basic principle of material balances for a complex process with a single material is illustrated by its full material balance equation. This equation involves terms such as 'time unit per Material CONSUMED', 'time unit per Material PRODUCED', 'time unit per Material OUT', 'time unit per Material IN', and 'time unit per Material D ACCUMULATE'. The general equation reads: D ACCUMULATE = IN - OUT + PRODUCED - CONSUMED. If the material in question is labeled A, the mass balance equation reads: Mass of A D ACCUMULATE (time unit per A of Mass) = Mass of A IN (time unit per A of Mass) - Mass of A OUT (time unit per A of Mass) + Mass of A PRODUCED (time unit per A of Mass) - Mass of A CONSUMED (time unit per A of Mass). Or, provided the density does not change, it can be expressed in volume terms as: Volume of A D ACCUMULATE (time unit per A of Volume) = Volume of A IN (time unit per A of Volume) - Volume of A OUT (time unit per A of Volume) + Volume of A PRODUCED (time unit per A of Volume) - Volume of A CONSUMED (time unit per A of Volume). Mass or volume per unit time can be simplified to 'rate', where 'rate' simply means the flow of mass or volume. Thus, the material balance or mass balance equation for either mass or volume reads: D ACCUMULATE A of Rate = IN A of Rate - OUT A of Rate + PRODUCED A of Rate - CONSUMED A of Rate. General rules apply in solving mass balance problems. Because the definition of density is mass per unit volume, the conversion from a mass balance to a volume balance is achieved by dividing each term by the density (a constant). It is generally convenient to use the volume balance for liquids and the mass balance for solids. If it is assumed that steady state conditions exist and that no material is being destroyed or produced, then the material balance simplifies to Mass per unit time IN = Mass per unit time OUT, or XX X ( ) Fig. If the influents are labeled as X X Xm, the material balance would yield ( ) m e i i X X Fig."
merged_topic_2_2,"balance, material, unit, mass, volume, time","<task:merge> <sos>
 Draw the continuous dashed line around the component or components that are to be balanced
 Decide what material is to be balanced
 Write the material balance equation by starting with the basic equation CONSUMED A of Rate PRODUCED A of Rate OUT A of Rate IN A of Rate D ACCUMULATE A of Rate
 Material balance with multiple materials Mass and volume balances can be developed with multiple materials flowing in a single system
 Because the mass balance and volume balance equations are actually the same equations for a black box unless there is more than one material involved in the flow
 
 ++++
 
 Complex process with a single material The preceding two sections illustrate the basic principle of material balances
 If these possibilities are included in the full material balance the equation reads
 Material per unit time ACCUMULATED Material per unit time IN Material per unit time OUT Material per unit time PRODUCED Material per unit time CONSUMED If the material in question is labeled A the mass balance equation reads Mass of A per unit time ACCUMULATED Mass of A per unit time IN Mass of A per unit time OUT Mass of A per unit time PRODUCED Mass of A per unit time CONSUMED Or provided the density does not change in volume terms as Volume of A per unit time ACCUMULATED Volume of A per unit time IN Volume of A per unit time OUT Volume of A per unit time PRODUCED Volume of A per unit time CONSUMED Mass or volume per unit time can be simplified to rate where rate simply means the flow of mass or volume
 Thus the material balance or mass balance equation for either mass or volume reads Rate of A ACCUMULATED Rate of A IN Rate of A OUT Rate of A PRODUCED Rate of A CONSUMED ( ) General rules in solving mass balance problems
 Draw the continuous dashed line around the component or components that are to be balanced
 Decide what material is to be balanced
 <eos>","General rules in solving mass balance problems include drawing a continuous dashed line around the component or components that are to be balanced and deciding what material is to be balanced. The preceding two sections illustrate the basic principle of material balances, applicable to complex processes with a single material. Furthermore, mass and volume balances can be developed with multiple materials flowing in a single system, as the mass balance and volume balance equations are essentially the same for a black box unless more than one material is involved in the flow. When writing the full material balance equation, one starts with the basic form: Material per unit time ACCUMULATED = Material per unit time IN - Material per unit time OUT + Material per unit time PRODUCED - Material per unit time CONSUMED. If the material in question is labeled A, the mass balance equation specifically reads: Mass of A per unit time ACCUMULATED = Mass of A per unit time IN - Mass of A per unit time OUT + Mass of A per unit time PRODUCED - Mass of A per unit time CONSUMED. Alternatively, provided the density does not change, in volume terms it reads as: Volume of A per unit time ACCUMULATED = Volume of A per unit time IN - Volume of A per unit time OUT + Volume of A per unit time PRODUCED - Volume of A per unit time CONSUMED. Since mass or volume per unit time can be simplified to 'rate', meaning the flow of mass or volume, the material balance or mass balance equation for either mass or volume can be concisely written as: Rate of A ACCUMULATED = Rate of A IN - Rate of A OUT + Rate of A PRODUCED - Rate of A CONSUMED."
merged_topic_2_3,"balance, material, unit, mass, volume, time","<task:merge> <sos>
 If we assume the substance is uniformly distributed throughout the volume V Thus the total mass ( M ) of the substance is equal to the product of the concentration and volume ( V )
 SO release rate is kgbrick produced and the annual brick production rate is million bricks year
 Remembering that mass flow rate can be expressed as ( Concentration Volume flow ) we can apply a mass balance equation in terms of SO as follows
 General mass balance equation of Rate SO SO of Rate SO of Rate SO of Rate SO of Rate CONSUMED PRODUCED OUT IN D ACCUMULATE Assuming steady state and the balance becomes kghr Qso mhr Therefore Qso gm
 
 ++++
 
 Write the material balance equation by starting with the basic equation Rate of A ACCUMULATED Rate of A IN Rate of A OUT Rate of A PRODUCED Rate of A CONSUMED
 Material balance with multiple materials Mass and volume balances can be developed with multiple materials flowing in a single system
 If we assume the substance is uniformly distributed throughout the volume V Thus the total mass ( M ) of the substance is equal to the product of the concentration and volume ( V )
 SO release rate is kgbrick produced and the annual brick production rate is million bricks year
 <eos>","If we assume the substance is uniformly distributed throughout the volume V, the total mass (M) of the substance is equal to the product of the concentration and volume (V). SO release rate is kgbrick produced, and the annual brick production rate is million bricks year. Remembering that mass flow rate can be expressed as (Concentration Volume flow), we can apply a mass balance equation in terms of SO. The basic material balance equation states: Rate of A ACCUMULATED = Rate of A IN - Rate of A OUT + Rate of A PRODUCED - Rate of A CONSUMED. When applying this general mass balance equation to SO, assuming steady state, the balance becomes kghr Qso mhr, therefore Qso gm. Moreover, mass and volume balances can be developed with multiple materials flowing in a single system."
merged_topic_3_0,"diagram, process, imaginary, boundary, inputs, outputs, simple","<task:merge> <sos>
 This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem termed as Mass Balance Diagram
 All of the known inputs outputs and accumulation are converted to the same mass units and placed on the diagram
 System boundaries ( imaginary blocks around the process or part of the process ) are drawn in such a way that calculations are made as simple as possible
 The diagram may include anything form a simple chemical mixing tank to an entire coalfired power plant a lake a stretch of a stream an air basin above a city or the globe itself
 By picturing an imaginary boundary around the region we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region
 These boxes are schematic representations of real processes or flow junctions and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows
 This could be a unit operation a junction or a combination of these
 
 ++++
 
 This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem termed as Mass Balance Diagram
 All of the known inputs outputs and accumulation are converted to the same mass units and placed on the diagram
 System boundaries ( imaginary blocks around the process or part of the process ) are drawn in such a way that calculations are made as simple as possible
 The diagram may include anything form a simple chemical mixing tank to an entire coalfired power plant a lake a stretch of a stream an air basin above a city or the globe itself
 Draw the system diagram including all flows ( inputs and outputs ) as arrows
 <eos>","This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem, termed as Mass Balance Diagram. All of the known inputs, outputs, and accumulation are converted to the same mass units and placed on this diagram. System boundaries, which are imaginary blocks around the process or part of the process, are drawn in such a way that calculations are made as simple as possible. By picturing an imaginary boundary around the region, the system diagram can be drawn including all flows (inputs and outputs) as arrows, enabling the identification of the flow of materials across the boundary as well as the accumulation of materials within the region. The diagram may include anything from a simple chemical mixing tank to an entire coal-fired power plant, a lake, a stretch of a stream, an air basin above a city, or the globe itself. These boxes are schematic representations of real processes or flow junctions, and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows. This could be a unit operation, a junction, or a combination of these."
merged_topic_4_0,"box, area, mixing, valley, velocity, black, flow, shown, fig","<task:merge> <sos>
 All flows into the box are called influents and represented by the letter X
 If the flow is described as mass per unit time X is the mass per unit time of material X flowing in to the box
 Similarly X is the outflow or effluent
 A black box with one inflow and one outflow X of time unit per Mass X time unit per Mass ( ) OUT IN or X X ( ) Eq
 
 ++++
 
 By picturing an imaginary boundary around the region we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region
 These boxes are schematic representations of real processes or flow junctions and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows
 shows a black box into which some material is flowing
 All flows into the box are called influents and represented by the letter X
 If the flow is described as mass per unit time X is the mass per unit time of material X flowing in to the box
 Similarly X is the outflow or effluent
 A black box with one inflow and one outflow Mass per unit Mass per unit time X time X ( ) IN OUT or X X ( ) Eq
 The black box can be used to establish a volume balance and a mass balance if the density does not change in the process
 Splitting SingleMaterial Flow Streams A black box shown in Fig
 The flow into the box is labeled X and the two flows out of the box are X and X
 Combining SingleMaterial Flow Streams A black box can also receive numerous influents and discharge one effluent as shown in Fig
 Assign symbols to unknown variables
 Everything inside the dashed line becomes the black box
 If only one variable is unknown solve for that variable
 If more than one variable is unknown repeat the procedure using a different black box or a different material for the same black box
 <eos>","By picturing an imaginary boundary around a region, we can identify the flow of materials across this boundary as well as their accumulation within the region. These ""black boxes"" are schematic representations of real processes or flow junctions, and it is not necessary to specify what this process is to develop general principles about flow analysis. Conceptually, everything inside a dashed line becomes the black box. All flows entering the box are termed influents and are represented by the letter X. If the flow is described as mass per unit time, X is the mass per unit time of the material flowing into the box. Similarly, X represents the outflow or effluent. A black box with one inflow and one outflow is typically labeled X (IN) and X (OUT) respectively. Such a black box can be used to establish a volume balance and a mass balance, provided the density does not change in the process. A black box can illustrate various flow scenarios, such as splitting single-material flow streams where one flow into the box is labeled X and two flows out of the box are labeled X and X, or combining single-material flow streams where a black box receives numerous influents and discharges one effluent. To analyze these systems, one should assign symbols to unknown variables; if only one variable is unknown, it can be solved, but if more than one variable is unknown, the procedure may need to be repeated using a different black box or a different material for the same black box."
merged_topic_4_1,"box, area, mixing, valley, velocity, black, flow, shown, fig","<task:merge> <sos>
 The flow into the box is labeled X and the two flows out of the box are X and X
 The mixing height above Kathmandu Valley and Banepa urban areas is km
 The length and width of the box representing the mixing zone ( as shown in Fig XX ) is km by km
 Solution First construct the box above Kathmandu Valley and Banepa area as shown in Fig below
 The volume of the air moving into the box is calculated as the velocity times the area through which the flow occurs or Q Av where v wind velocity and A area of the side of the box ( mixing depth times width )
 
 ++++
 
 Because the mass balance and volume balance equations are actually the same equations for a black box unless there is more than one material involved in the flow
 The length and width of the box representing the mixing zone ( as shown in Fig ) is km by km
 ( Ans kgkm ) First construct the box above Kathmandu Valley and Banepa area as shown in Fig below
 The volume of the air moving into the box is calculated as the velocity times the area through which the flow occurs or Q Av where v wind velocity and A area of the side of the box ( mixing depth times width )
 Air quality box model
 <eos>","Air quality box model. First, construct the box above Kathmandu Valley and Banepa area as shown in Fig below (Ans kgkm). The length and width of the box representing the mixing zone (as shown in Fig XX) is km by km, and the mixing height above Kathmandu Valley and Banepa urban areas is km. The flow into the box is labeled X, and the two flows out of the box are X and X. The volume of the air moving into the box is calculated as the velocity times the area through which the flow occurs, or Q Av, where v is wind velocity and A is the area of the side of the box (mixing depth times width). This is because the mass balance and volume balance equations are actually the same equations for a black box unless there is more than one material involved in the flow."
merged_topic_5_0,"energy, transfer, law, created, mass, design, liquid, phase","<task:merge> <sos>
 The law of conservation of mass says that mass can never be created nor destroyed
 Thus the transfer of mass from one point to another in a system becomes important
 In the biochemical or physical masstransfer process interphase diffusion occurs when a driving force is created by a departure from equilibrium
 In the gas phase the driving force is a partial pressure gradient and in the solid or liquid phase it is the concentration gradient
 There could be different mass transfer processes depending upon the underlying phases for example Gasliquid mass transfer aeration or supply of oxygen for decomposing waste Liquid gas transfer release of methane from anaerobic waste treatment Liquidliquid mass transfer extraction of organic solvents liquid phase oxygen transfer Liquidsolid mass transfer adsorption of pollutants on activated carbon solidgas mass transfer release of gases from solid wastes in a landfill Energy transfer The law of conservation of energy states that with the exception of nuclear reactions energy can neither be created nor destroyed
 This energy law serves as an accounting tool in various environmental implications
 Be it a metabolic reaction taking inside a cell or dispersion of air pollutants in the atmosphere or the different aspects of climate change processes a knowledge of transfer of energy is essential to understand the process dynamics
 The flow of energy can be analysed through energy balance equations using the first law of thermodynamics
 The first law of thermodynamics states that energy can never be created nor be destroyed
 change in energy of system change in energy of surroundings Therefore when energy disappears in one form it appears in another
 The total energy stored in a system is composed of internal kinetic and potential energies
 
 ++++
 
 Thus the transfer of mass from one point to another in a system becomes important
 In the biochemical or physical masstransfer process interphase diffusion occurs when a driving force is created by a departure from equilibrium
 In the gas phase the driving force is a partial pressure gradient and in the solid or liquid phase it is the concentration gradient
 <eos>","The law of conservation of mass states that mass can never be created nor destroyed. Thus, the transfer of mass from one point to another in a system becomes important. In the biochemical or physical mass transfer process, interphase diffusion occurs when a driving force is created by a departure from equilibrium. In the gas phase, this driving force is a partial pressure gradient, while in the solid or liquid phase, it is the concentration gradient. Depending on the underlying phases, there could be different mass transfer processes; for example, Gas-liquid mass transfer includes aeration or the supply of oxygen for decomposing waste; Liquid-gas transfer involves the release of methane from anaerobic waste treatment; Liquid-liquid mass transfer covers the extraction of organic solvents and liquid phase oxygen transfer; Liquid-solid mass transfer pertains to the adsorption of pollutants on activated carbon; and Solid-gas mass transfer relates to the release of gases from solid wastes in a landfill. Regarding energy transfer, the law of conservation of energy, also known as the first law of thermodynamics, states that with the exception of nuclear reactions, energy can neither be created nor destroyed. This energy law serves as an accounting tool in various environmental implications, where a knowledge of the transfer of energy is essential to understand process dynamics, be it a metabolic reaction taking place inside a cell, the dispersion of air pollutants in the atmosphere, or different aspects of climate change processes. The flow of energy can be analyzed through energy balance equations using the first law of thermodynamics; therefore, when energy disappears in one form it appears in another, meaning the change in energy of the system equals the change in energy of the surroundings. The total energy stored in a system is composed of internal, kinetic, and potential energies."
merged_topic_5_1,"energy, transfer, law, created, mass, design, liquid, phase","<task:merge> <sos>
 A simple interpretation of the second law of thermodynamics suggests that when work is done there will always be some inefficiency that is some portion of the energy put into the process will end up as waste heat
 How the waste heat affects the environment is an important consideration in the study of environmental engineering Knowledge of mass and energy transfer in pollution control and remediation is essential to Understand the process Design the preventive measures Design the treatment units Design the remediation activities Mass balance It is well understood that matter can neither be created nor destroyed but it can be changed from one form to other
 
 ++++
 
 There could be different mass transfer processes depending upon the underlying phases for example Gasliquid mass transfer aeration or supply of oxygen for decomposing waste Liquid gas transfer release of methane from anaerobic waste treatment Liquidliquid mass transfer extraction of organic solvents liquid phase oxygen transfer Liquidsolid mass transfer adsorption of pollutants on activated carbon solidgas mass transfer release of gases from solid wastes in a landfill Intensive properties and extensive properties are types of physical properties of matter
 Knowledge of mass and energy transfer in pollution control and remediation is essential to Understand the process Design the preventive measures Design the treatment units Design the remediation activities Mass balance It is well understood that matter can neither be created nor destroyed but it can be changed from one form to other
 <eos>","A simple interpretation of the second law of thermodynamics suggests that when work is done there will always be some inefficiency, meaning some portion of the energy put into the process will end up as waste heat. How this waste heat affects the environment is an important consideration in the study of environmental engineering. Knowledge of mass and energy transfer in pollution control and remediation is essential to understand the process, design the preventive measures, design the treatment units, and design the remediation activities. Mass balance highlights that matter can neither be created nor destroyed but it can be changed from one form to other. There could be different mass transfer processes depending upon the underlying phases, for example, Gas-liquid mass transfer (aeration or supply of oxygen for decomposing waste), Liquid-gas transfer (release of methane from anaerobic waste treatment), Liquid-liquid mass transfer (extraction of organic solvents or liquid phase oxygen transfer), Liquid-solid mass transfer (adsorption of pollutants on activated carbon), and solid-gas mass transfer (release of gases from solid wastes in a landfill). Intensive properties and extensive properties are types of physical properties of matter."
merged_topic_6_0,"energy, transfer, law, created, mass, thermodynamics, destroyed","<task:merge> <sos>
 The law of conservation of mass says that mass can never be created nor destroyed
 Thus the transfer of mass from one point to another in a system becomes important
 In the biochemical or physical masstransfer process interphase diffusion occurs when a driving force is created by a departure from equilibrium
 In the gas phase the driving force is a partial pressure gradient and in the solid or liquid phase it is the concentration gradient
 There could be different mass transfer processes depending upon the underlying phases for example Gasliquid mass transfer aeration or supply of oxygen for decomposing waste Liquid gas transfer release of methane from anaerobic waste treatment Liquidliquid mass transfer extraction of organic solvents liquid phase oxygen transfer Liquidsolid mass transfer adsorption of pollutants on activated carbon solidgas mass transfer release of gases from solid wastes in a landfill Energy transfer The law of conservation of energy states that with the exception of nuclear reactions energy can neither be created nor destroyed
 This energy law serves as an accounting tool in various environmental implications
 Be it a metabolic reaction taking inside a cell or dispersion of air pollutants in the atmosphere or the different aspects of climate change processes a knowledge of transfer of energy is essential to understand the process dynamics
 The flow of energy can be analysed through energy balance equations using the first law of thermodynamics
 The first law of thermodynamics states that energy can never be created nor be destroyed
 
 ++++
 
 The law of conservation of mass says that mass can never be created nor destroyed
 Energy transfer The law of conservation of energy states that with the exception of nuclear reactions energy can neither be created nor destroyed
 This energy law serves as an accounting tool in various environmental implications
 Be it a metabolic reaction taking inside a cell or dispersion of air pollutants in the atmosphere or the different aspects of climate change processes a knowledge of transfer of energy is essential to understand the process dynamics
 <eos>","The law of conservation of mass says that mass can never be created nor destroyed; thus, the transfer of mass from one point to another in a system becomes important. In the biochemical or physical masstransfer process, interphase diffusion occurs when a driving force is created by a departure from equilibrium. In the gas phase, the driving force is a partial pressure gradient, and in the solid or liquid phase, it is the concentration gradient. There could be different mass transfer processes depending upon the underlying phases; for example, Gasliquid mass transfer (aeration or supply of oxygen for decomposing waste); Liquid gas transfer (release of methane from anaerobic waste treatment); Liquidliquid mass transfer (extraction of organic solvents, liquid phase oxygen transfer); Liquidsolid mass transfer (adsorption of pollutants on activated carbon); and solidgas mass transfer (release of gases from solid wastes in a landfill). Energy transfer is also a crucial concept. The law of conservation of energy states that, with the exception of nuclear reactions, energy can neither be created nor destroyed. This energy law serves as an accounting tool in various environmental implications. Be it a metabolic reaction taking inside a cell, or dispersion of air pollutants in the atmosphere, or the different aspects of climate change processes, a knowledge of transfer of energy is essential to understand the process dynamics. The flow of energy can be analysed through energy balance equations using the first law of thermodynamics, which states that energy can never be created nor be destroyed."
merged_topic_6_1,"energy, transfer, law, created, mass, thermodynamics, destroyed","<task:merge> <sos>
 change in energy of system change in energy of surroundings Therefore when energy disappears in one form it appears in another
 The total energy stored in a system is composed of internal kinetic and potential energies
 A simple interpretation of the second law of thermodynamics suggests that when work is done there will always be some inefficiency that is some portion of the energy put into the process will end up as waste heat
 How the waste heat affects the environment is an important consideration in the study of environmental engineering Knowledge of mass and energy transfer in pollution control and remediation is essential to Understand the process Design the preventive measures Design the treatment units Design the remediation activities Mass balance It is well understood that matter can neither be created nor destroyed but it can be changed from one form to other
 
 ++++
 
 The flow of energy can be analyzed through energy balance equations using the first law of thermodynamics
 The first law of thermodynamics states that energy can never be created nor be destroyed
 Change in energy of system change in energy of surroundings Therefore when energy disappears in one form it appears in another
 The total energy stored in a system is composed of internal kinetic and potential energies A simple interpretation of the second law of thermodynamics suggests that when work is done there will always be some inefficiency that is some portion of the energy put into the process will end up as waste heat
 How the waste heat affects the environment is an important consideration in the study of environmental engineering
 <eos>","The first law of thermodynamics states that energy can never be created nor destroyed; a change in the energy of a system implies a corresponding change in the energy of its surroundings, therefore when energy disappears in one form, it appears in another. The flow of energy can be analyzed through energy balance equations using this first law. The total energy stored in a system is composed of internal, kinetic, and potential energies. Paralleling this, it is well understood that matter can neither be created nor destroyed but it can be changed from one form to another, which is essential for mass balance. A simple interpretation of the second law of thermodynamics suggests that when work is done, there will always be some inefficiency, meaning a portion of the energy put into the process will end up as waste heat. How this waste heat affects the environment is an important consideration in the study of environmental engineering. Knowledge of mass and energy transfer in pollution control and remediation is essential to understand the process, design preventive measures, design treatment units, and design remediation activities."
merged_topic_7_0,"substances, compounds, substrate, biological, environment, conservative, nonconservative, transformed","<task:merge> <sos>
 In environmental systems be it an aerobic cell participating in oxidation process or a river receiving untreated wastes the movement of nutrients substrate or metabolic products plays an important role
 The extent of processes such as decomposition of wastes by microorganisms or lake eutrophication is governed by either the supply of natural or artificial oxygen or availability of substrate or nutrients
 A blender with several inflows and one outflow Conservative and nonconservative substance Conservative substances are not physically or chemically transformed to other substances in normal situation
 Examples are salt and metals
 Nonconservative substances are transformed to other substances through physical chemical or biological processes in the environment
 These include biological oxygen demand ( indicator of the quantity of biologically degrading chemicals ) Conservative substances tend to be stable longlived compounds that persist within environment
 Nonconservative substances can transform or degrade into other compounds but the rate of transformation depends on the physical chemical and biological conditions occurring in the environment
 sludge CO may be oxidized to CO ) or compounds are destroyed ( eg
 growth of microorganisms ) or disappearance ( utilization of substrate ) of a substance or chemical species
 
 ++++
 
 A blender with several inflows and one outflow Conservative and nonconservative substance Conservative substances are not physically or chemically transformed to other substances in normal situation
 Nonconservative substances are transformed to other substances through physical chemical or biological processes in the environment
 Conservative substances tend to be stable longlived compounds that persist within environment
 Nonconservative substances can transform or degrade into other compounds but the rate of transformation depends on the physical chemical and biological conditions occurring in the environment
 <eos>","In environmental systems, be it an aerobic cell participating in an oxidation process or a river receiving untreated wastes, the movement of nutrients, substrate, or metabolic products plays an important role. The extent of processes such as the decomposition of wastes by microorganisms or lake eutrophication is governed by either the supply of natural or artificial oxygen, or the availability of substrate or nutrients. A system can be conceptualized as a blender with several inflows and one outflow, containing both conservative and nonconservative substances. Conservative substances are not physically or chemically transformed to other substances in normal situations; examples include salt and metals. These substances tend to be stable, long-lived compounds that persist within the environment. In contrast, nonconservative substances are transformed to other substances through physical, chemical, or biological processes in the environment. These include biological oxygen demand (an indicator of the quantity of biologically degrading chemicals). Nonconservative substances can transform or degrade into other compounds, but the rate of transformation depends on the physical, chemical, and biological conditions occurring in the environment. For example, CO may be oxidized, or compounds are destroyed (e.g., through the growth of microorganisms), or there is a disappearance (utilization of substrate) of a substance or chemical species."
merged_topic_8_0,"substances, compounds, substrate, biological, environment, nutrients, microorganisms, wastes, oxygen","<task:merge> <sos>
 In environmental systems be it an aerobic cell participating in oxidation process or a river receiving untreated wastes the movement of nutrients substrate or metabolic products plays an important role
 The extent of processes such as decomposition of wastes by microorganisms or lake eutrophication is governed by either the supply of natural or artificial oxygen or availability of substrate or nutrients
 A blender with several inflows and one outflow Conservative and nonconservative substance Conservative substances are not physically or chemically transformed to other substances in normal situation
 Examples are salt and metals
 Nonconservative substances are transformed to other substances through physical chemical or biological processes in the environment
 These include biological oxygen demand ( indicator of the quantity of biologically degrading chemicals ) Conservative substances tend to be stable longlived compounds that persist within environment
 Nonconservative substances can transform or degrade into other compounds but the rate of transformation depends on the physical chemical and biological conditions occurring in the environment
 sludge CO may be oxidized to CO ) or compounds are destroyed ( eg
 growth of microorganisms ) or disappearance ( utilization of substrate ) of a substance or chemical species
 
 ++++
 
 In environmental systems be it an aerobic cell participating in oxidation process or a river receiving untreated wastes the movement of nutrients substrate or metabolic products plays an important role
 The extent of processes such as decomposition of wastes by microorganisms or Lake Eutrophication is governed by either the supply of natural or artificial oxygen or availability of substrate or nutrients
 Examples are salt and metals
 These include biological oxygen demand ( indicator of the quantity of biologically degrading chemicals ) ammonia and certain organic compounds
 sludge CO may be oxidized to CO ) or compounds are destroyed ( eg
 growth of microorganisms ) or disappearance ( utilization of substrate ) of a substance or chemical species
 References Bailey J E and Ollis D F ( ) Biochemical Engineering Fundamentals McGrawHill International New York Examples
 <eos>","In environmental systems, be it an aerobic cell participating in oxidation processes or a river receiving untreated wastes, the movement of nutrients, substrate, or metabolic products plays an important role. The extent of processes such as decomposition of wastes by microorganisms or lake eutrophication is governed by either the supply of natural or artificial oxygen or availability of substrate or nutrients. These systems can be envisioned as a blender with several inflows and one outflow, involving both conservative and nonconservative substances. Conservative substances are not physically or chemically transformed to other substances in normal situations; they tend to be stable, long-lived compounds that persist within the environment. Examples include salt and metals. Nonconservative substances, on the other hand, are transformed to other substances through physical, chemical, or biological processes in the environment. They can transform or degrade into other compounds, but their rate of transformation depends on the physical, chemical, and biological conditions occurring in the environment. Examples of nonconservative substances include biological oxygen demand (an indicator of the quantity of biologically degrading chemicals), ammonia, and certain organic compounds. Such transformations can involve substances being oxidized (e.g., sludge CO may be oxidized to CO), compounds being destroyed (e.g., growth of microorganisms), or the disappearance (e.g., utilization of substrate) of a substance or chemical species."
merged_topic_9_0,"concept, problems, define, allows, place, diagram, inputs, outputs, simple, process","<task:merge> <sos>
 What this concept allows us to do is track materials that is pollutants from one place to another with mass balance equations
 This concept serves as a basis for describing and analysing environmental engineering problems
 What this concept allows us to do is track materials for example the pollutants from one place to another with mass balance equations
 The first step a mass balance analysis is to define the particular region in the space that is to be analysed
 This helps us define the problems
 In other contexts such as modeling air pollution the assumption is referred to as a complete mix box model
 The same simple models can be applied to certain problems involving air quality
 
 ++++
 
 This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem termed as Mass Balance Diagram
 All of the known inputs outputs and accumulation are converted to the same mass units and placed on the diagram
 System boundaries ( imaginary blocks around the process or part of the process ) are drawn in such a way that calculations are made as simple as possible
 The diagram may include anything form a simple chemical mixing tank to an entire coalfired power plant a lake a stretch of a stream an air basin above a city or the globe itself
 Draw the system diagram including all flows ( inputs and outputs ) as arrows
 <eos>","The mass balance concept serves as a basis for describing and analyzing environmental engineering problems, allowing us to track materials, such as pollutants, from one place to another using mass balance equations. The first step in a mass balance analysis is to define the particular region in space that is to be analyzed; this helps define the problems. The same simple models can be applied to certain problems involving air quality, and in other contexts, such as modeling air pollution, the assumption is referred to as a complete mix box model. This analysis is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem, termed a Mass Balance Diagram. To do this, system boundaries, which are imaginary blocks around the process or part of the process, are drawn in such a way that calculations are made as simple as possible. All known inputs, outputs, and accumulation are converted to the same mass units and placed on the diagram. This diagram may include anything from a simple chemical mixing tank to an entire coal-fired power plant, a lake, a stretch of a stream, an air basin above a city, or even the globe itself. The system diagram should always include all flows, both inputs and outputs, represented as arrows."
merged_topic_10_0,"diagram, process, imaginary, boundary, concept, problems, place, track, allows","<task:merge> <sos>
 This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem termed as Mass Balance Diagram
 All of the known inputs outputs and accumulation are converted to the same mass units and placed on the diagram
 System boundaries ( imaginary blocks around the process or part of the process ) are drawn in such a way that calculations are made as simple as possible
 The diagram may include anything form a simple chemical mixing tank to an entire coalfired power plant a lake a stretch of a stream an air basin above a city or the globe itself
 By picturing an imaginary boundary around the region we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region
 These boxes are schematic representations of real processes or flow junctions and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows
 This could be a unit operation a junction or a combination of these
 
 ++++
 
 What this concept allows us to do is track materials that is pollutants from one place to another with mass balance equations
 This concept serves as a basis for describing and analyzing environmental engineering problems
 What this concept allows us to do is track materials for example the pollutants from one place to another with mass balance equations
 This helps us define the problems
 In other contexts such as modeling air pollution the assumption is referred to as a complete mix box model
 The same simple models can be applied to certain problems involving air quality
 <eos>","The core concept allows us to track materials, specifically pollutants, from one place to another using mass balance equations, serving as a basis for describing and analyzing environmental engineering problems and helping to define them. This tracking is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem, termed a Mass Balance Diagram. On this diagram, all known inputs, outputs, and accumulation are converted to the same mass units and placed. System boundaries, which are imaginary blocks around the process or part of the process, are drawn in such a way that calculations are made as simple as possible. By picturing an imaginary boundary around the region, we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region. These boxes are schematic representations of real processes or flow junctions, and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows; this could be a unit operation, a junction, or a combination of these. The diagram itself may include anything from a simple chemical mixing tank to an entire coal-fired power plant, a lake, a stretch of a stream, an air basin above a city, or the globe itself. In other contexts, such as modeling air pollution, the underlying assumption is referred to as a complete mix box model, and the same simple models can be applied to certain problems involving air quality."
merged_topic_11_0,"diagram, process, imaginary, boundary, box, black, flow, shown, fig","<task:merge> <sos>
 This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem termed as Mass Balance Diagram
 All of the known inputs outputs and accumulation are converted to the same mass units and placed on the diagram
 System boundaries ( imaginary blocks around the process or part of the process ) are drawn in such a way that calculations are made as simple as possible
 
 ++++
 
 By picturing an imaginary boundary around the region we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region
 These boxes are schematic representations of real processes or flow junctions and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows
 shows a black box into which some material is flowing
 All flows into the box are called influents and represented by the letter X
 If the flow is described as mass per unit time X is the mass per unit time of material X flowing in to the box
 Similarly X is the outflow or effluent
 A black box with one inflow and one outflow Mass per unit Mass per unit time X time X ( ) IN OUT or X X ( ) Eq
 The black box can be used to establish a volume balance and a mass balance if the density does not change in the process
 Splitting SingleMaterial Flow Streams A black box shown in Fig
 The flow into the box is labeled X and the two flows out of the box are X and X
 Combining SingleMaterial Flow Streams A black box can also receive numerous influents and discharge one effluent as shown in Fig
 Assign symbols to unknown variables
 Everything inside the dashed line becomes the black box
 If only one variable is unknown solve for that variable
 If more than one variable is unknown repeat the procedure using a different black box or a different material for the same black box
 <eos>","Mass balance analysis is carried out by drawing a flowchart or a conceptual diagram of the environmental subsystem, often termed a Mass Balance Diagram. System boundaries, defined as imaginary blocks around the process or part of the process, are drawn in such a way that calculations are made as simple as possible. By picturing such an imaginary boundary around a region, one can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region. These boxes are schematic representations of real processes or flow junctions, and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows. All of the known inputs, outputs, and accumulation are converted to the same mass units and placed on the diagram. A black box represents a system into which some material is flowing; all flows into the box are called influents and are represented by the letter X. If the flow is described as mass per unit time, X is the mass per unit time of material X flowing into the box, and similarly, X is the outflow or effluent. This black box can be used to establish a volume balance and a mass balance if the density does not change in the process. For instance, a black box can illustrate splitting single-material flow streams, where the flow into the box is labeled X and the two flows out of the box are X and X. Conversely, a black box can also receive numerous influents and discharge one effluent, representing combining single-material flow streams. For the analysis of these systems, symbols are assigned to unknown variables, with everything inside the dashed line becoming the black box. If only one variable is unknown, solve for that variable; if more than one variable is unknown, repeat the procedure using a different black box or a different material for the same black box."
merged_topic_11_1,"diagram, process, imaginary, boundary, box, black, flow, shown, fig","<task:merge> <sos>
 The diagram may include anything form a simple chemical mixing tank to an entire coalfired power plant a lake a stretch of a stream an air basin above a city or the globe itself
 By picturing an imaginary boundary around the region we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region
 These boxes are schematic representations of real processes or flow junctions and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows
 This could be a unit operation a junction or a combination of these
 
 ++++
 
 Because the mass balance and volume balance equations are actually the same equations for a black box unless there is more than one material involved in the flow
 The length and width of the box representing the mixing zone ( as shown in Fig ) is km by km
 ( Ans kgkm ) First construct the box above Kathmandu Valley and Banepa area as shown in Fig below
 The volume of the air moving into the box is calculated as the velocity times the area through which the flow occurs or Q Av where v wind velocity and A area of the side of the box ( mixing depth times width )
 Air quality box model
 <eos>","The diagram may include anything from a simple chemical mixing tank to an entire coal-fired power plant, a lake, a stretch of a stream, an air basin above a city, or the globe itself. By picturing an imaginary boundary around the region, we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region. These boxes are schematic representations of real processes or flow junctions and could be a unit operation, a junction, or a combination of these; it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows. This concept is particularly relevant for an air quality box model. For example, one might first construct a box above the Kathmandu Valley and Banepa area, with the length and width of the box representing the mixing zone being specified as km by km. In such models, the volume of the air moving into the box is calculated as the velocity times the area through which the flow occurs, or Q = Av, where v is the wind velocity and A is the area of the side of the box (mixing depth times width). Furthermore, the mass balance and volume balance equations are actually the same equations for a black box unless there is more than one material involved in the flow."
merged_topic_12_0,"diagram, process, imaginary, boundary, material, unit, time, balance, volume","<task:merge> <sos>
 This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem termed as Mass Balance Diagram
 All of the known inputs outputs and accumulation are converted to the same mass units and placed on the diagram
 System boundaries ( imaginary blocks around the process or part of the process ) are drawn in such a way that calculations are made as simple as possible
 The diagram may include anything form a simple chemical mixing tank to an entire coalfired power plant a lake a stretch of a stream an air basin above a city or the globe itself
 
 ++++
 
 The concept is called a materials balance or a mass balance
 We then write material balance equations to solve for unknown inputs outputs or accumulations or to demonstrate that we have accounted for all of the components by demonstrating that the materials balance closes that is the accounting balances
 Material balance with single material Material flows can be most readily understood and analyzed by using the concept of a black box
 If and if the slow is assumed not vary with time ( that is to be at steady state ) then it is possible to write a material balance around the box as Fig
 Because the definition of density is mass per unit volume the conversion from a mass balance to a volume balance is achieved by dividing each term by the density ( a constant )
 It is generally convenient to use the volume balance for liquids and the mass balance for solids
 If again it is assumed that steady state conditions exist and that no material is being destroyed or produced then the material balance is Mass per unit Mass per unit time X time X OUT IN or XX X ( ) Fig
 If the influents are labeled as X X Xm the material balance would yield
 Complex process with a single material The preceding two sections illustrate the basic principle of material balances
 If these possibilities are included in the full material balance the equation reads
 <eos>","The concept is called a materials balance or a mass balance, which is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem, often termed a Mass Balance Diagram. On this diagram, all of the known inputs, outputs, and accumulation are converted to the same mass units and placed. System boundaries, defined as imaginary blocks around the process or part of the process, are drawn in such a way that calculations are made as simple as possible. The diagram's scope may range from a simple chemical mixing tank to an entire coal-fired power plant, a lake, a stretch of a stream, an air basin above a city, or the globe itself. Material flows can be most readily understood and analyzed by using the concept of a black box, around which we then write material balance equations. These equations are used to solve for unknown inputs, outputs, or accumulations, or to demonstrate that all components have been accounted for by showing that the materials balance closes, meaning the accounting balances. If the flow is assumed not to vary with time, that is to be at steady state, then it is possible to write a material balance around the box. Because the definition of density is mass per unit volume, the conversion from a mass balance to a volume balance is achieved by dividing each term by the density (a constant); it is generally convenient to use the volume balance for liquids and the mass balance for solids. If again it is assumed that steady state conditions exist and that no material is being destroyed or produced, then the material balance is Mass per unit time OUT equals Mass per unit time IN. If the influents are labeled as X, X, Xm, the material balance would yield. The basic principle of material balances is illustrated by these methods, and if these possibilities are included, the full material balance equation reads."
merged_topic_12_1,"diagram, process, imaginary, boundary, material, unit, time, balance, volume","<task:merge> <sos>
 By picturing an imaginary boundary around the region we can then begin to identify the flow of materials across the boundary as well as the accumulation of materials within the region
 These boxes are schematic representations of real processes or flow junctions and it is not necessary to specify just what this process is to be able to develop general principles about the analysis of flows
 This could be a unit operation a junction or a combination of these
 
 ++++
 
 Material per unit time ACCUMULATED Material per unit time IN Material per unit time OUT Material per unit time PRODUCED Material per unit time CONSUMED If the material in question is labeled A the mass balance equation reads Mass of A per unit time ACCUMULATED Mass of A per unit time IN Mass of A per unit time OUT Mass of A per unit time PRODUCED Mass of A per unit time CONSUMED Or provided the density does not change in volume terms as Volume of A per unit time ACCUMULATED Volume of A per unit time IN Volume of A per unit time OUT Volume of A per unit time PRODUCED Volume of A per unit time CONSUMED Mass or volume per unit time can be simplified to rate where rate simply means the flow of mass or volume
 Thus the material balance or mass balance equation for either mass or volume reads Rate of A ACCUMULATED Rate of A IN Rate of A OUT Rate of A PRODUCED Rate of A CONSUMED ( ) General rules in solving mass balance problems
 Draw the continuous dashed line around the component or components that are to be balanced
 Decide what material is to be balanced
 Write the material balance equation by starting with the basic equation Rate of A ACCUMULATED Rate of A IN Rate of A OUT Rate of A PRODUCED Rate of A CONSUMED
 Material balance with multiple materials Mass and volume balances can be developed with multiple materials flowing in a single system
 <eos>","By picturing an imaginary boundary around a region, we can begin to identify the flow of materials across this boundary as well as the accumulation of materials within the region. These regions, often referred to as 'boxes,' are schematic representations of real processes or flow junctions, which could be a unit operation, a junction, or a combination of these. It is not necessary to specify the exact nature of this process to develop general principles about the analysis of flows. The fundamental material balance equation states: Material per unit time ACCUMULATED = Material per unit time IN - Material per unit time OUT + Material per unit time PRODUCED - Material per unit time CONSUMED. If the material in question is labeled A, the mass balance equation reads: Mass of A per unit time ACCUMULATED = Mass of A per unit time IN - Mass of A per unit time OUT + Mass of A per unit time PRODUCED - Mass of A per unit time CONSUMED. Alternatively, provided the density does not change, in volume terms it reads: Volume of A per unit time ACCUMULATED = Volume of A per unit time IN - Volume of A per unit time OUT + Volume of A per unit time PRODUCED - Volume of A per unit time CONSUMED. Mass or volume per unit time can be simplified to 'rate,' where 'rate' simply means the flow of mass or volume. Thus, the material balance or mass balance equation for either mass or volume reads: Rate of A ACCUMULATED = Rate of A IN - Rate of A OUT + Rate of A PRODUCED - Rate of A CONSUMED. General rules in solving mass balance problems include: drawing a continuous dashed line around the component or components that are to be balanced; deciding what material is to be balanced; and writing the material balance equation by starting with the basic equation: Rate of A ACCUMULATED = Rate of A IN - Rate of A OUT + Rate of A PRODUCED - Rate of A CONSUMED. Finally, mass and volume balances can also be developed with multiple materials flowing in a single system."
merged_topic_13_0,"balance, material, unit, mass, volume, diagram, inputs, outputs, simple, process","<task:merge> <sos>
 The concept is called a materials balance or a mass balance
 We then write material balance equations to solve for unknown inputs outputs or accumulations or to demonstrate that we have accounted for all of the components by demonstrating that the materials balance closes that is the accounting balances
 Material balance with single material Material flows can be most readily understood and analysed by using the concept of a black box
 If no processes are going inside the box that will either make of more material or destroy some of it and if the slow is assumed not vary with time ( that is to be at steady state ) then it is possible to write a material balance around the box as Fig
 The black box can be used to establish a volume balance and a mass balance if the density does not change in the process
 Because the definition of density is mass per unit volume the conversion from a mass balance to a volume balance is achieved by dividing each term by the density ( a constant )
 It is generally convenient to use the volume balance for liquids and the mass balance for solids
 If again it is assumed that steady state conditions exist and that no material is being destroyed or produced then the material balance is X of time unit per Mass X time unit per Mass IN OUT or X X X ( ) Fig
 If the influents are labeled as X X Xm the material balance would yield ( ) m e i i X X Fig
 Complex process with a single material The preceding two sections illustrate the basic principle of material balances
 
 ++++
 
 This is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem termed as Mass Balance Diagram
 All of the known inputs outputs and accumulation are converted to the same mass units and placed on the diagram
 <eos>","The concept is called a materials balance or a mass balance. Material balance equations are then written to solve for unknown inputs, outputs, or accumulations, or to demonstrate that all components have been accounted for by showing that the materials balance closes, meaning the accounting balances. Material flows, particularly with a single material, can be most readily understood and analyzed by using the concept of a black box. If no processes are going inside the box that will either make more material or destroy some of it, and if the flow is assumed not to vary with time (that is, to be at steady state), then it is possible to write a material balance around the box. The black box can be used to establish a volume balance and a mass balance if the density does not change in the process. Because the definition of density is mass per unit volume, the conversion from a mass balance to a volume balance is achieved by dividing each term by the density (a constant). It is generally convenient to use the volume balance for liquids and the mass balance for solids. If again it is assumed that steady state conditions exist and that no material is being destroyed or produced, then the material balance is Mass IN per time unit = Mass OUT per time unit. If the influents are labeled as X X Xm, the material balance would yield ( ) m e i i X X Fig. This process is carried out by drawing a flow chart of the process or a conceptual diagram of the environmental subsystem, termed a Mass Balance Diagram. All of the known inputs, outputs, and accumulations are converted to the same mass units and placed on the diagram. The preceding sections illustrate the basic principle of material balances, encompassing complex processes with a single material."
merged_topic_13_1,"balance, material, unit, mass, volume, diagram, inputs, outputs, simple, process","<task:merge> <sos>
 Thus the material balance or mass balance equation for either mass or volume reads CONSUMED A of Rate PRODUCED A of Rate OUT A of Rate IN A of Rate D ACCUMULATE A of Rate ( ) General rules in solving mass balance problems
 Draw the continuous dashed line around the component or components that are to be balanced
 Decide what material is to be balanced
 Write the material balance equation by starting with the basic equation CONSUMED A of Rate PRODUCED A of Rate OUT A of Rate IN A of Rate D ACCUMULATE A of Rate
 Material balance with multiple materials Mass and volume balances can be developed with multiple materials flowing in a single system
 Because the mass balance and volume balance equations are actually the same equations for a black box unless there is more than one material involved in the flow
 If we assume the substance is uniformly distributed throughout the volume V Thus the total mass ( M ) of the substance is equal to the product of the concentration and volume ( V )
 SO release rate is kgbrick produced and the annual brick production rate is million bricks year
 Remembering that mass flow rate can be expressed as ( Concentration Volume flow ) we can apply a mass balance equation in terms of SO as follows
 General mass balance equation of Rate SO SO of Rate SO of Rate SO of Rate SO of Rate CONSUMED PRODUCED OUT IN D ACCUMULATE Assuming steady state and the balance becomes kghr Qso mhr Therefore Qso gm
 
 ++++
 
 The diagram may include anything form a simple chemical mixing tank to an entire coalfired power plant a lake a stretch of a stream an air basin above a city or the globe itself
 Draw the system diagram including all flows ( inputs and outputs ) as arrows
 <eos>","Thus, the material balance or mass balance equation for either mass or volume reads: CONSUMED A of Rate, PRODUCED A of Rate, OUT A of Rate, IN A of Rate, and D ACCUMULATE A of Rate. General rules in solving mass balance problems include drawing a system diagram, which may represent anything from a simple chemical mixing tank to an entire coal-fired power plant, a lake, a stretch of a stream, an air basin above a city, or the globe itself. This diagram should include all flows (inputs and outputs) as arrows, with a continuous dashed line drawn around the component or components that are to be balanced. It is also necessary to decide what material is to be balanced, and then write the material balance equation by starting with this basic equation. Mass and volume balances can be developed with multiple materials flowing in a single system, as these equations are actually the same for a black box unless more than one material is involved in the flow. If a substance is uniformly distributed throughout a volume V, its total mass (M) is equal to the product of the concentration and volume (V). Remembering that mass flow rate can be expressed as (Concentration Volume flow), a mass balance equation can be applied in terms of SO as follows: CONSUMED SO of Rate, PRODUCED SO of Rate, OUT SO of Rate, IN SO of Rate, and D ACCUMULATE SO of Rate. Assuming steady state, the balance becomes kghr Qso mhr; therefore Qso gm. The SO release rate is in kg/brick produced, and the annual brick production rate is in million bricks/year."
merged_topic_0_0,"sucien, ybased, densit, dbscan, connected, density, regions, varying, densitybased","<task:merge> <sos>
 DBSCAN A densit ybased clustering metho d based on connected regions with sucien tly high densit y
 Suc h a metho d can b e used to lter out noise ( outliers ) and disco v er clusters of arbitrary shap e DBSCAN is a t ypical densit ybased metho d whic h gro ws clusters according to a densit y threshold
 DBSCAN A densit ybased clustering metho d based on connected regions with sucien tly high densit y DBSCAN ( Densit yBased Spatial Clustering of Applications with Noise ) is a densit ybased clustering algorithm
 The algorithm gro ws regions with sucien tly high densit y in to clusters and disco v ers clusters of arbitrary shap e in spatial databases with noise
 A densit ybased algorithm for disco v ering clusters in large spatial databases
 
 ++++
 
 Points in lowdensity regions are classiï¬ed as noise and omitted thus DBSCAN does not produce a complete clustering
 DBSCAN Densitybased clustering locates regions of high density that are separated from one another by regions of low density
 DBSCAN is a simple and eï¬€ective densitybased clustering algorithm that illustrates a number of important concepts that are important for any densitybased clustering approach
 DBSCAN Traditional Density CenterBased Approach Although there are not as many approaches for deï¬ning density as there are for deï¬ning similarity there are several distinct methods
 Clusters of Varying Density DBSCAN can have trouble with density if the density of clusters varies widely
 As indicated previously however DBSCAN has trouble when the clusters have widely varying densities
 <eos>","DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is a density-based clustering algorithm. It is based on connected regions with sufficiently high density. This typical density-based method grows regions with sufficiently high density into clusters according to a density threshold, thereby discovering clusters of arbitrary shape in large spatial databases with noise. Such a method can be used to filter out noise (outliers), as points in low-density regions are classified as noise and omitted; consequently, DBSCAN does not produce a complete clustering. DBSCAN, a traditional density center-based approach, effectively locates regions of high density that are separated from one another by regions of low density. Although there are not as many approaches for defining density as there are for defining similarity, there are several distinct methods. DBSCAN is a simple and effective density-based clustering algorithm that illustrates a number of important concepts important for any density-based clustering approach. However, it can have trouble when the density of clusters varies widely."
merged_topic_1_0,"conceptual, class, concept, group, descriptions, share, types, objects","<task:merge> <sos>
 In conceptual clustering a group of ob jects forms a class only if it is describable b y a concept
 Conceptual clustering consists of t w o comp onen ts ( ) it disco v ers the appropriate classes and ( ) it forms descriptions for eac h class as in classi cation
 Statistical approac h Conceptual clusterin g is a form of clustering in mac hine learning whic h giv en a set of unlab eled ob jects pro duces a classi cation sc heme o v er the ob jects
 Unlik e con v en tional clustering whic h primarily iden ti es groups of lik e ob jects conceptual clustering go es one step further b y also nding c haracteristic descriptions for eac h group where eac h group represen ts a concept or class
 Hence conceptual clustering is a t w ostep pro cess rst clustering is p erformed follo w ed b y c haracterization
 Most metho ds of conceptual clustering adopt a statistical approac h whic h uses probabilit y measuremen ts in determining the concepts or clusters
 Additional researc h is needed in the application of conceptual clustering metho ds to data mining
 
 ++++
 
 Clustering for Understanding Classes or conceptually meaningful groups of objects that share common characteristics play an important role in how people analyze and describe the world
 We begin with a highlevel overview of clustering including a discussion of the various approaches to dividing objects into sets of clusters and the diï¬€erent types of clusters
 Then we explore two important topics ( ) diï¬€erent ways to group a set of objects into a set of clusters and ( ) types of clusters
 The goal is that the objects within a group be similar ( or related ) to one another and diï¬€erent from ( or unrelated to ) the objects in other groups
 In the most general sense an overlapping or nonexclusive clustering is used to reï¬‚ect the fact that an object can simultaneously belong to more than one group ( class )
 <eos>","Clustering, for understanding classes or conceptually meaningful groups of objects that share common characteristics, plays an important role in how people analyze and describe the world. The goal of this process is that objects within a group be similar (or related) to one another and different from (or unrelated to) objects in other groups. In the most general sense, an overlapping or nonexclusive clustering can reflect that an object can simultaneously belong to more than one group (class). Conceptual clustering, a form of clustering in machine learning, given a set of unlabeled objects, produces a classification scheme over them; in this context, a group of objects forms a class only if it is describable by a concept. Unlike conventional clustering, which primarily identifies groups of like objects, conceptual clustering goes one step further by also finding characteristic descriptions for each group, where each group represents a concept or class. Hence, conceptual clustering is a two-step process: first, clustering is performed, followed by characterization, encompassing the discovery of appropriate classes and the formation of descriptions for each class, as in classification. Most methods of conceptual clustering adopt a statistical approach, which uses probability measurements in determining the concepts or clusters. A high-level overview of clustering often includes a discussion of various approaches to dividing objects into sets of clusters, exploring different ways to group objects, and examining the different types of clusters. Additional research is needed in the application of conceptual clustering methods to data mining."
merged_topic_1_1,"conceptual, class, concept, group, descriptions, share, types, objects","<task:merge> <sos>
 Conceptual clustering w as rst in tro duced b y Mic halski and Stepp
 Impro ving inference through conceptual clustering
 Mo dels of incremenral concept formation
 Learning from observ ation Conceptual clustering
 
 ++++
 
 SharedProperty ( Conceptual Clusters ) More generally we can deï¬ne a cluster as a set of objects that share some property
 The process of ï¬nding such clusters is called conceptual clustering
 However too sophisticated a notion of a cluster would take us into the area of pattern recognition and thus we only consider simpler types of clusters in this book
 ( e ) Conceptual clusters
 <eos>","More generally, a cluster can be defined as a set of objects that share some property, and the process of finding such clusters is called conceptual clustering. Conceptual clustering was first introduced by Michalski and Stepp, with the aim of improving inference through conceptual clustering. It is also related to models of incremental concept formation and learning from observation. However, considering too sophisticated a notion of a cluster would lead into the area of pattern recognition; thus, only simpler types of clusters are considered in this book."
merged_topic_2_0,"partitioning, means, partitions, medoids, partition, versus, analysis, groups, types, useful","<task:merge> <sos>
 Clustering of a set of ob jects based on the k means metho d
 F our cases of the cost function for k medoids clustering
 Giv en a database of n ob jects or data tuples a partitioning metho d constructs k partitions of the data where eac h partition represen ts a cluster and k n That is it classi es the data in to k groups whic h together satisfy the follo wing requiremen ts ( ) eac h group m ust con tain at least one ob ject and ( ) eac h ob ject m ust b elong to exactly one group
 Notice that the second requiremen t can b e relaxed in some fuzzy partitioning tec hniques
 Giv en k the n um b er of partitions to construct a partitioning metho d creates an initial partitioning
 The general criterion of a go o d partitioning is that ob jects in the same cluster are close or related to eac h other whereas ob jects of di eren t clusters are far apart or v ery di eren t There are v arious kinds of other criteria for judging the qualit y of partitions
 T o ac hiev e global optimalit y in partitioningbased clustering w ould require the exhaustiv e en umeration of all of the p ossible partitions
 Most partitioning metho ds cluster ob jects based on the distance b et w een ob jects
 Algorithm ( k means ) The k means algorithm for partitioning based on the mean v alue of the ob jects in the cluster
 Output A set of k clusters whic h minimizes the squarederror criterion
 P artitioning metho ds Giv en a database of n ob jects and k the n um b er of clusters to form a partitioning algorithm organizes the ob jects in to k partitions ( k n ) where eac h partition represen ts a cluster
 
 ++++
 
 We provide some speciï¬c examples organized by whether the purpose of the clustering is understanding or utility
 <eos>","Clustering of a set of objects is often based on partitioning methods. Given a database of n objects or data tuples, a partitioning method constructs k partitions of the data, where each partition represents a cluster and k â‰¤ n. This classifies the data into k groups which together satisfy two requirements: (1) each group must contain at least one object, and (2) each object must belong to exactly one group. Notice that the second requirement can be relaxed in some fuzzy partitioning techniques. Given k, the number of partitions to construct, a partitioning method creates an initial partitioning. Most partitioning methods cluster objects based on the distance between objects. The general criterion of a good partitioning is that objects in the same cluster are close or related to each other, whereas objects of different clusters are far apart or very different. There are various kinds of other criteria for judging the quality of partitions. To achieve global optimality in partitioning-based clustering would require the exhaustive enumeration of all possible partitions. The k-means algorithm is a partitioning method based on the mean value of the objects in the cluster, aiming to output a set of k clusters which minimizes the squared-error criterion. For k-medoids clustering, four cases of the cost function are considered. We provide some specific examples organized by whether the purpose of the clustering is understanding or utility."
merged_topic_2_1,"partitioning, means, partitions, medoids, partition, versus, analysis, groups, types, useful","<task:merge> <sos>
 The clusters are formed to optimize an ob jectiv e partitioning criterion often called a similarity function suc h as distance so that the ob jects within a cluster are similar whereas the ob jects of di eren t clusters are dissimilar in terms of the database attributes
 Classical partitioning metho ds k means and k medoids The most w ellkno wn and commonl y used partitioning metho ds are k me ans k me doids and their v ariations
 Cen troidbased tec hnique The k means metho d The k means algorithm tak es the input parameter k and partitions a set of n ob jects in to k clusters so that the resulting in tracluster similarit y is high whereas the in tercluster similarit y is lo w Cluster similarit y is measured in regard to the me an v alue of the ob jects in a cluster whic h can b e view ed as the clusters c enter of gr avity
 The algorithm attempts to determine k partitions that minimi ze the squarederror function
 The k means metho d ho w ev er can b e applied only when the mean of a cluster is de ned
 There are quite a few v arian ts of the k means metho d These can di er in the selection of the initial k means the calculation of dissimilarit y and the strategies for calculating cluster means
 Another v arian t to k means is the k mo des metho d whic h extends the k means paradigm to cluster categorical data b y replacing the means of clusters with mo des using new dissimilarit y measures to deal with categorical ob jects and using a frequencybased metho d to up date mo des of clusters
 
 ++++
 
 Clustering can be used to segment customers into a small number of groups for additional analysis and marketing activities
 These cluster prototypes can be used as the basis for a number of data analysis or data processing techniques
 <eos>","The clusters are formed to optimize an objective partitioning criterion, often called a similarity function such as distance, so that the objects within a cluster are similar whereas the objects of different clusters are dissimilar in terms of the database attributes. The most well-known and commonly used partitioning methods are k-means and k-medoids, and their variations. The k-means method, a centroid-based technique, takes the input parameter k and partitions a set of n objects into k clusters so that the resulting intracluster similarity is high whereas the intercluster similarity is low. Cluster similarity in this method is measured in regard to the mean value of the objects in a cluster, which can be viewed as the cluster's center of gravity. The algorithm attempts to determine k partitions that minimize the squared-error function. However, the k-means method can be applied only when the mean of a cluster is defined. There are quite a few variants of the k-means method; these can differ in the selection of the initial k means, the calculation of dissimilarity, and the strategies for calculating cluster means. Another variant to k-means is the k-modes method, which extends the k-means paradigm to cluster categorical data by replacing the means of clusters with modes, using new dissimilarity measures to deal with categorical objects, and using a frequency-based method to update modes of clusters. Beyond these specific algorithms, clustering can be used to segment customers into a small number of groups for additional analysis and marketing activities. These cluster prototypes can then be used as the basis for a number of data analysis or data processing techniques."
merged_topic_2_2,"partitioning, means, partitions, medoids, partition, versus, analysis, groups, types, useful","<task:merge> <sos>
 Th us the partitioning metho d can still b e p erformed based on the principle of minim i zing the sum of the dissimilarities b et w een eac h ob ject and its corresp onding reference p oin t This forms the basis of the k medoids metho d The basic strategy of k medoids clustering algorithms is to nd k clusters in n ob jects b y rst arbitrarily nding a represen tativ e ob ject ( the medoid ) for eac h cluster
 It attempts to determine k partitions for n ob jects
 A t ypical k medoids partition algorithm lik e P AM w orks e ectiv ely for small data sets but do es not scale w ell for large data sets
 Algorithm ( k medoids ) A general k medoids algorithm for partitioning based on medoid or cen tral ob jects
 Output A set of k clusters whic h minimizes the sum of the dissimilari ties of all the ob jects to their nearest medoid
 The rst called BIR CH b egins b y partitioning ob jects hierarc hically using tree structures and then applies other clustering algorithms to re ne the clusters
 T o handle large databases CURE emplo ys a com bination of random sampling and partitioning a random sample is rst partitioned and eac h partition is partially clustered
 P artition sample S in to p partitions eac h of size sp
 P artially cluster the partitions in to spq clusters for some q
 Cluster the partial clusters
 W e partially cluster the partitions in to ( ) clusters based on minim al mean distance
 CHAMELEON rst uses a graph partitioning algorithm to cluster the data ob jects in to a large n um b er of relativ ely small sub clusters
 
 ++++
 
 Nonetheless some work in graph partitioning and in image and market segmentation is related to cluster analysis
 <eos>","The partitioning method can be performed based on the principle of minimizing the sum of the dissimilarities between each object and its corresponding reference point; this forms the basis of the k-medoids method. The basic strategy of k-medoids clustering algorithms is to find k clusters in n objects by first arbitrarily finding a representative object (the medoid) for each cluster. A general k-medoids algorithm for partitioning, based on medoid or central objects, attempts to determine k partitions for n objects and outputs a set of k clusters which minimizes the sum of the dissimilarities of all the objects to their nearest medoid. A typical k-medoids partition algorithm, like PAM, works effectively for small data sets but does not scale well for large data sets. To handle large databases, other approaches are employed. The BIRCH algorithm begins by partitioning objects hierarchically using tree structures and then applies other clustering algorithms to refine the clusters. CURE employs a combination of random sampling and partitioning: a random sample (S) is first partitioned into p partitions, each of size sp, and each partition is partially clustered into spq clusters for some q, or based on minimal mean distance, before the partial clusters are finally clustered. CHAMELEON first uses a graph partitioning algorithm to cluster the data objects into a large number of relatively small subclusters. Nonetheless, some work in graph partitioning and in image and market segmentation is related to cluster analysis."
merged_topic_2_3,"partitioning, means, partitions, medoids, partition, versus, analysis, groups, types, useful","<task:merge> <sos>
 A partitioni n g metho d rst creates an initial k partition where k is the n um b er of partitions to construct then it uses an iter ative r elo c ation te chnique whic h attempts to impro v e the partitioning b y mo ving ob jects from one group to another
 T ypical partition metho ds include k means k medoids CLARANS and their impro v emen ts
 F or partitioning metho ds the k means algorithm w as rst in tro duced b y MacQueen
 
 ++++
 
 Diï¬€erent Types of Clusterings An entire collection of clusters is commonly referred to as a clustering and in this section we distinguish various types of clusterings hierarchical ( nested ) versus partitional ( unnested ) exclusive versus overlapping versus fuzzy and complete versus partial
 Diï¬€erent Types of Clusters Clustering aims to ï¬nd useful groups of objects ( clusters ) where usefulness is deï¬ned by the goals of the data analysis
 <eos>","Clustering aims to find useful groups of objects (clusters) where usefulness is defined by the goals of the data analysis. An entire collection of clusters is commonly referred to as a clustering, and various types of clusterings can be distinguished, such as hierarchical (nested) versus partitional (unnested), exclusive versus overlapping versus fuzzy, and complete versus partial. Among these, a partitioning method first creates an initial k partition, where k is the number of partitions to construct. It then uses an iterative relocation technique which attempts to improve the partitioning by moving objects from one group to another. Typical partition methods include k-means, k-medoids, CLARANS, and their improvements. For partitioning methods, the k-means algorithm was first introduced by MacQueen."
merged_topic_3_0,"categorization, jor, clustering, ale, duction, versus, analysis, groups, types, useful","<task:merge> <sos>
 A categorization of ma jor clustering metho ds
 Ho w ev er applications ma y require clustering other t yp es of data suc h as binary categorical ( nominal ) and ordinal data or mixtures of these data t yp es
 Second w e presen t a general categorization of clustering metho ds
 A categorization of ma jor clustering metho ds There exist a large n um b er of clustering algorithms in the literature
 In general ma jor clustering metho ds can b e classi ed in to the follo wing categories
 Some clustering algorithms in tegrate the ideas of sev eral clustering metho ds so that it is sometimes dicult to classify a giv en algorithm as uniquely b elonging to only one clustering metho d category
 The qualit y of clustering can b e assessed based on a measure of dissimil ari t y of ob jects whic h can b e computed for v arious t yp es of data including intervalsc ale d v ariables binary v ariables nominal or dinal and r atiosc ale d v ariables or com binations of these v ariable t yp es
 Human ey es are fast and e ectiv e at judging the qualit y of clustering metho ds for t w odimensional data
 
 ++++
 
 Cluster Analysis Basic Concepts and Algorithms Cluster analysis divides data into groups ( clusters ) that are meaningful useful or both
 We provide some speciï¬c examples organized by whether the purpose of the clustering is understanding or utility
 Clustering can be used to segment customers into a small number of groups for additional analysis and marketing activities
 These cluster prototypes can be used as the basis for a number of data analysis or data processing techniques
 Cluster analysis groups data objects based only on information found in the data that describes the objects and their relationships
 Cluster analysis is related to other techniques that are used to divide data objects into groups
 Nonetheless some work in graph partitioning and in image and market segmentation is related to cluster analysis
 <eos>","Cluster analysis, a technique that divides data into groups (clusters) that are meaningful, useful, or both, groups data objects based only on information found in the data that describes the objects and their relationships. This process can be used to segment customers into a small number of groups for additional analysis and marketing activities, or for understanding or utility purposes, with cluster prototypes serving as a basis for various data analysis or data processing techniques. While related to other techniques that divide data objects into groups, such as graph partitioning and image and market segmentation, cluster analysis itself is a major field with a large number of algorithms in the literature. A general categorization of these methods exists, though some algorithms integrate ideas from several methods, making it sometimes difficult to uniquely classify them into only one category. Applications may require clustering various types of data, including binary, categorical (nominal), ordinal, interval-scale, and ratio-scale variables, or mixtures thereof. The quality of clustering can be assessed based on a measure of dissimilarity of objects, which can be computed for these diverse data types, although human eyes are also fast and effective at judging the quality for two-dimensional data."
merged_topic_3_1,"categorization, jor, clustering, ale, duction, versus, analysis, groups, types, useful","<task:merge> <sos>
 Giv en suc h constrain ts ho w can clustering algorithms b e mo di ed to allo w for c onstr aintb ase d clustering
 J Rousseeu w Finding Gr oups in Data an Intr o duction to Cluster A nalysis
 
 ++++
 
 Diï¬€erent Types of Clusterings An entire collection of clusters is commonly referred to as a clustering and in this section we distinguish various types of clusterings hierarchical ( nested ) versus partitional ( unnested ) exclusive versus overlapping versus fuzzy and complete versus partial
 Diï¬€erent Types of Clusters Clustering aims to ï¬nd useful groups of objects ( clusters ) where usefulness is deï¬ned by the goals of the data analysis
 <eos>","Clustering aims to ï¬nd useful groups of objects, which are referred to as clusters, where usefulness is deï¬ned by the goals of the data analysis. An entire collection of clusters is commonly referred to as a clustering, and various types can be distinguished: hierarchical (nested) versus partitional (unnested), exclusive versus overlapping versus fuzzy, and complete versus partial. Given certain constraints, a key question is how clustering algorithms can be modified to allow for constraint-based clustering. This area is explored in texts like J. Rousseeuw's 'Finding Groups in Data: An Introduction to Cluster Analysis'."
merged_topic_4_0,"sucien, ybased, densit, dbscan, connected, surrounding, marked, ï¬nds, noise","<task:merge> <sos>
 DBSCAN A densit ybased clustering metho d based on connected regions with sucien tly high densit y
 Suc h a metho d can b e used to lter out noise ( outliers ) and disco v er clusters of arbitrary shap e DBSCAN is a t ypical densit ybased metho d whic h gro ws clusters according to a densit y threshold
 DBSCAN A densit ybased clustering metho d based on connected regions with sucien tly high densit y DBSCAN ( Densit yBased Spatial Clustering of Applications with Noise ) is a densit ybased clustering algorithm
 The algorithm gro ws regions with sucien tly high densit y in to clusters and disco v ers clusters of arbitrary shap e in spatial databases with noise
 A densit ybased algorithm for disco v ering clusters in large spatial databases
 
 ++++
 
 This algorithm uses the same concepts and ï¬nds the same clusters as the original DBSCAN but is optimized for simplicity not eï¬ƒciency
 If the Eps threshold is high enough that DBSCAN ï¬nds A and B as separate clusters and the points surrounding them are marked as noise then C and D and the points surrounding them will also be marked as noise
 Strengths and Weaknesses Because DBSCAN uses a densitybased deï¬nition of a cluster it is relatively resistant to noise and can handle clusters of arbitrary shapes and sizes
 DBSCAN clustering of twodimensional points
 <eos>","DBSCAN, or Density-Based Spatial Clustering of Applications with Noise, is a density-based clustering algorithm based on connected regions with sufficiently high density. It grows clusters according to a density threshold. As a density-based algorithm, DBSCAN is resistant to noise and can filter out outliers, enabling it to discover clusters of arbitrary shapes and sizes in large spatial databases, even with noise. DBSCAN can also be applied to two-dimensional points. There is also a variant of this algorithm that uses the same concepts and finds the same clusters as the original DBSCAN but is optimized for simplicity, not efficiency. An example scenario is that if the Eps threshold is high enough that DBSCAN finds A and B as separate clusters and the points surrounding them are marked as noise, then C and D and the points surrounding them will also be marked as noise."
merged_topic_5_0,"large, databases, clustering, ecien, scalable, scalability, keeping, severely, complexity, algorithms","<task:merge> <sos>
 In this c hapter y ou will learn the requiremen ts of clustering metho ds for op erating on large amoun ts of data
 Activ e themes of researc h fo cus on the sc alability of clustering metho ds the e ectiv eness of metho ds for clustering c omplex shap es and typ es of data highdimensional clustering tec hniques and metho ds for clustering mixe d numeric al and c ate goric al data in large databases
 Scalabilit y Man y clustering algorithms w ork w ell in small data sets con taining less than data ob jects ho w ev er a large database ma y con tain milli ons of ob jects
 Highly scalable clustering algorithms are needed
 Main memorybased clustering algorithms t ypically op erate on either of the follo wing t w o data structures
 Some scalable clustering algorithms suc h as BIR CH and CURE ha v e b een dev elop ed based on suc h an in tegrated approac h Hierar c hical clustering metho ds are studied in Section
 P artitioning metho ds in large databases from k medoids to CLARANS How ecient is the k me doids algorithm on lar ge data sets
 T o deal with larger data sets a samplingbased metho d called CLARA ( Clustering LARge Applications ) can b e used
 A k medoids t yp e algorithm called CLARANS ( Clustering Large Applications based up on RANdomized Searc h ) w as prop osed whic h com bines the sampling tec h nique with P AM
 These structures help the clustering metho d ac hiev e go o d sp eed and scalabilit y in large databases
 W a v eletbased clustering is v ery fast with a computational complexit y of O ( n ) where n is the n um b er of ob jects in the database
 
 ++++
 
 The space and time complexity of hierarchical clustering severely limits the size of data sets that can be processed
 We discuss scalability approaches for clustering algorithms including hierarchical clustering techniques in Section
 <eos>","In this chapter, you will learn the requirements of clustering methods for operating on large amounts of data. Active themes of research focus on the scalability of clustering methods, the effectiveness of methods for clustering complex shapes and types of data, high-dimensional clustering techniques, and methods for clustering mixed numerical and categorical data in large databases. Scalability is crucial because while many clustering algorithms work well in small data sets containing less than 10^5 data objects, a large database may contain millions of objects, necessitating highly scalable clustering algorithms. Main memory-based clustering algorithms typically operate on specific data structures that help achieve good speed and scalability in large databases. Some scalable clustering algorithms, such as BIRCH and CURE, have been developed based on such an integrated approach. While hierarchical clustering methods are studied in Section X, their space and time complexity severely limits the size of data sets that can be processed; therefore, we discuss scalability approaches for clustering algorithms, including hierarchical clustering techniques, in that same Section. For partitioning methods in large databases, the efficiency of the k-medoids algorithm on large data sets is questioned. To deal with larger data sets, a sampling-based method called CLARA (Clustering Large Applications) can be used. A k-medoids type algorithm called CLARANS (Clustering Large Applications based upon RANdomized Search) was proposed, which combines the sampling technique with PAM. Additionally, wavelet-based clustering is very fast, with a computational complexity of O(n) where n is the number of objects in the database."
merged_topic_5_1,"large, databases, clustering, ecien, scalable, scalability, keeping, severely, complexity, algorithms","<task:merge> <sos>
 Based on what y ou ha v e learned ab out the clustering metho ds design a clustering metho d whic h nds clusters in large data cub es e ectiv ely and ecien tly
 Cure An ecien t clustering algorithm for large databases
 An ecien t approac h to clustering in large m ultim edia databases with noise
 BIR CH an ecien t data clustering metho d for v ery large databases
 
 ++++
 
 However agglomerative hierarchical clustering algorithms are expensive in terms of their computational and storage requirements
 <eos>","The task of designing a clustering method that effectively and efficiently finds clusters in large data cubes is critical, especially since agglomerative hierarchical clustering algorithms are expensive in terms of their computational and storage requirements. To address these challenges, efficient clustering algorithms for large databases have been developed, including Cure and BIRCH, an efficient data clustering method for very large databases. Such efficient approaches are also vital for clustering in large multimedia databases that contain noise."
merged_topic_6_0,"categorization, jor, clustering, ale, duction, greater, valid, explaining, illustrating, homogeneity","<task:merge> <sos>
 A categorization of ma jor clustering metho ds
 Ho w ev er applications ma y require clustering other t yp es of data suc h as binary categorical ( nominal ) and ordinal data or mixtures of these data t yp es
 Second w e presen t a general categorization of clustering metho ds
 A categorization of ma jor clustering metho ds There exist a large n um b er of clustering algorithms in the literature
 In general ma jor clustering metho ds can b e classi ed in to the follo wing categories
 Some clustering algorithms in tegrate the ideas of sev eral clustering metho ds so that it is sometimes dicult to classify a giv en algorithm as uniquely b elonging to only one clustering metho d category
 The qualit y of clustering can b e assessed based on a measure of dissimil ari t y of ob jects whic h can b e computed for v arious t yp es of data including intervalsc ale d v ariables binary v ariables nominal or dinal and r atiosc ale d v ariables or com binations of these v ariable t yp es
 Human ey es are fast and e ectiv e at judging the qualit y of clustering metho ds for t w odimensional data
 Giv en suc h constrain ts ho w can clustering algorithms b e mo di ed to allo w for c onstr aintb ase d clustering
 J Rousseeu w Finding Gr oups in Data an Intr o duction to Cluster A nalysis
 
 ++++
 
 If meaningful groups are the goal then the clusters should capture the natural structure of the data
 First we further deï¬ne cluster analysis illustrating why it is diï¬ƒcult and explaining its relationship to other techniques that group data
 The greater the similarity ( or homogeneity ) within a group and the greater the diï¬€erence between groups the better or more distinct the clustering
 We stress however that the types of clusters described here are equally valid for other kinds of data
 <eos>","First, we further define cluster analysis, illustrating why it is difficult and explaining its relationship to other techniques that group data. There exist a large number of clustering algorithms in the literature, leading to a general categorization of major clustering methods. In general, these methods can be classified into various categories, though some algorithms integrate ideas from several methods, making it sometimes difficult to classify a given algorithm as uniquely belonging to only one category. However, applications may require clustering other types of data such as binary, categorical (nominal), and ordinal data, or mixtures of these data types. The types of clusters described here are equally valid for other kinds of data. If meaningful groups are the goal, then the clusters should capture the natural structure of the data. The quality of clustering can be assessed based on a measure of dissimilarity of objects, which can be computed for various types of data including interval-scale variables, binary variables, nominal, ordinal, and ratio-scaled variables, or combinations of these variable types. The greater the similarity (or homogeneity) within a group and the greater the difference between groups, the better or more distinct the clustering. Human eyes are fast and effective at judging the quality of clustering methods for two-dimensional data. Given such constraints, how can clustering algorithms be modified to allow for constraint-based clustering? This field is explored in works such as J. Rousseeuw's ""Finding Groups in Data: An Introduction to Cluster Analysis."""
merged_topic_7_0,"terconnectivit, related, closeness, ignore, hemes, decisions, merged, sizes, agglomerative, cophenetic","<task:merge> <sos>
 The clusters are then merged stepb ystep according to some criterion
 In its clus tering pro cess t w o clusters are merged if the in terconnectivit y and closeness ( pro ximit y ) b et w een t w o clusters are highly related to the in ternal in terconnectivit y and closeness of ob jects within the clusters
 CURE and related sc hemes ignore information ab out the aggregate in terconnectivit y of ob jects in t w o di eren t clusters whereas R OCK and related sc hemes ignore information ab out the closeness of t w o clusters while emphasizing their in terconnectivit y
 C C i j i j The relativ e in terconne ctivi t y RI ( C ) b et w een t w o clusters C and C is de ned as the absolute in ter C i j i j connectivit y b et w een C and C normalized with resp ect to the in ternal in terconnectivit y of the t w o clusters C i j i and C
 
 ++++
 
 Clustering Method Î±A Î±B Î² Î³ merged clusters monotonically increases ( or is at worst nonincreasing ) as we proceed from singleton clusters to one allinclusive cluster
 Ability to Handle Diï¬€erent Cluster Sizes One aspect of agglomerative hierarchical clustering that we have not yet discussed is how to treat the relative sizes of the pairs of clusters that are merged
 Merging Decisions Are Final Agglomerative hierarchical clustering algorithms tend to make good local decisions about combining two clusters since they can use information about the pairwise similarity of all points
 For example if at some point in the agglomerative hierarchical clustering process the smallest distance between the two clusters that are merged is then all points in one cluster have a cophenetic distance of with respect to the points in the other cluster
 The cophenetic distance is diï¬€erent for each hierarchical clustering of a set of points
 <eos>","The clusters are then merged step-by-step according to some criterion. In this clustering process, two clusters are merged if the interconnectivity and closeness (proximity) between them are highly related to the internal interconnectivity and closeness of objects within the clusters. The relative interconnectivity RI(Ci, Cj) between two clusters Ci and Cj is defined as the absolute interconnectivity between Ci and Cj normalized with respect to the internal interconnectivity of the two clusters Ci and Cj. However, CURE and related schemes ignore information about the aggregate interconnectivity of objects in two different clusters, whereas ROCK and related schemes ignore information about the closeness of two clusters while emphasizing their interconnectivity. One aspect of agglomerative hierarchical clustering that has not yet been discussed is how to treat the relative sizes of the pairs of clusters that are merged. Merging decisions in agglomerative hierarchical clustering algorithms are final; these algorithms tend to make good local decisions about combining two clusters since they can use information about the pairwise similarity of all points. For a given Clustering Method Î±A Î±B Î² Î³, merged clusters monotonically increase (or are at worst nonincreasing) as we proceed from singleton clusters to one all-inclusive cluster. For example, if at some point in the agglomerative hierarchical clustering process the smallest distance between the two clusters that are merged is then all points in one cluster have a cophenetic distance of with respect to the points in the other cluster. The cophenetic distance is different for each hierarchical clustering of a set of points."
merged_topic_8_0,"hical, hierarc, divisiv, agglomerativ, clustering, versus, analysis, groups, types, useful","<task:merge> <sos>
 Agglomerativ e and divisiv e hierarc hical clustering
 BIR CH Balanced Iterativ e Reducing and Clustering using Hierarc hies
 A hierarc hical structure for STING clustering
 Hierarc hical metho ds A hierarc hical clustering metho d w orks b y grouping data ob jects in to a tree of clusters
 Hierarc hical clustering metho ds can b e further classi ed in to agglomer ative and divisive hierarc hical clustering dep ending on whether the hierarc hical decomp osition is formed in a b ottomup or topdo wn fashion
 Agglomerativ e and divisiv e hierarc hical clustering In general there are t w o t yp es of hierarc hical clustering metho ds
 Most hierarc hical clustering metho ds b elong to this category
 Divisiv e hierarc hi cal clusterin g This topdo wn strategy do es the rev erse of agglomerativ e hierarc hical clustering b y starting with all ob jects in one cluster
 In either agglomerativ e or divisiv e hierarc hical clustering one can sp ecify the desired n um b er of clusters as a termination condition
 The hierarc hical clustering metho d though simple often encoun ters diculties regarding the selection of merge or split p oin ts
 One promising direction for impro ving the clustering qualit y of hierarc hical metho ds is to in tegrate hierarc hical clustering with other clustering tec hniques for m ultiple phase clustering
 CURE emplo ys a no v el hierarc hical clustering algorithm that adopts a middle ground b et w een the agglomerativ e ( b ottomup ) and divisiv e ( topdo wn ) approac hes
 
 ++++
 
 Cluster Analysis Basic Concepts and Algorithms Cluster analysis divides data into groups ( clusters ) that are meaningful useful or both
 We provide some speciï¬c examples organized by whether the purpose of the clustering is understanding or utility
 Clustering can be used to segment customers into a small number of groups for additional analysis and marketing activities
 These cluster prototypes can be used as the basis for a number of data analysis or data processing techniques
 <eos>","Cluster analysis divides data into groups, or clusters, that are meaningful, useful, or both. This technique provides specific examples, often organized by whether the purpose of the clustering is understanding or utility, and can be used to segment customers into a small number of groups for additional analysis and marketing activities, with these cluster prototypes serving as the basis for a number of data analysis or data processing techniques. Hierarchical clustering methods work by grouping data objects into a tree of clusters. In general, there are two types of hierarchical clustering methods: agglomerative and divisive hierarchical clustering. Hierarchical clustering methods can be further classified into agglomerative and divisive hierarchical clustering depending on whether the hierarchical decomposition is formed in a bottom-up or top-down fashion, respectively. Most hierarchical clustering methods belong to this category. Divisive hierarchical clustering, a top-down strategy, does the reverse of agglomerative hierarchical clustering by starting with all objects in one cluster. In either agglomerative or divisive hierarchical clustering, one can specify the desired number of clusters as a termination condition. Examples include BIRCH (Balanced Iterative Reducing and Clustering using Hierarchies) and a hierarchical structure for STING clustering. CURE employs a novel hierarchical clustering algorithm that adopts a middle ground between the agglomerative (bottom-up) and divisive (top-down) approaches. Although simple, the hierarchical clustering method often encounters difficulties regarding the selection of merge or split points. One promising direction for improving the clustering quality of hierarchical methods is to integrate hierarchical clustering with other clustering techniques for multiple-phase clustering."
merged_topic_8_1,"hical, hierarc, divisiv, agglomerativ, clustering, versus, analysis, groups, types, useful","<task:merge> <sos>
 After generating the hierarc hical structure the query pro cessing time is O ( g ) where g is the total n um b er of grid cells at the lo w est lev el whic h is usually m uc h smaller than n Since STING uses a m ultiresolution approac h to p erform cluster analysis the qualit y of STING clustering dep ends on the gran ularit y of the lo w est lev el of the grid structure
 Agglomerativ e hierarc hical clustering suc h as A GNES and divisiv e hierarc hical clustering suc h as DIANA w ere in tro duced b y Kaufman and Rousseeu w
 An in teresting direction for impro ving the clustering qualit y of hierarc hical clustering metho ds is to in tegrate hierarc hical clustering with distancebased clustering iterativ e relo cation or other nonhierarc hical clustering metho ds
 Optimization and simpli cation of hierarc hical clusterings
 
 ++++
 
 Cluster analysis groups data objects based only on information found in the data that describes the objects and their relationships
 Cluster analysis is related to other techniques that are used to divide data objects into groups
 Nonetheless some work in graph partitioning and in image and market segmentation is related to cluster analysis
 Diï¬€erent Types of Clusterings An entire collection of clusters is commonly referred to as a clustering and in this section we distinguish various types of clusterings hierarchical ( nested ) versus partitional ( unnested ) exclusive versus overlapping versus fuzzy and complete versus partial
 Diï¬€erent Types of Clusters Clustering aims to ï¬nd useful groups of objects ( clusters ) where usefulness is deï¬ned by the goals of the data analysis
 <eos>","Cluster analysis groups data objects based solely on information found in the data that describes the objects and their relationships, aiming to find useful groups of objects (clusters) where usefulness is defined by the goals of the data analysis. Cluster analysis is related to other techniques that are used to divide data objects into groups, with some work in graph partitioning and in image and market segmentation also being related. An entire collection of clusters is commonly referred to as a clustering, and various types can be distinguished, including hierarchical (nested) versus partitional (unnested), exclusive versus overlapping versus fuzzy, and complete versus partial. Agglomerative hierarchical clustering, such as AGNES, and divisive hierarchical clustering, such as DIANA, were introduced by Kaufman and Rousseeuw. After generating the hierarchical structure, the query processing time for methods like STING is O(g), where g is the total number of grid cells at the lowest level, which is usually much smaller than n. Since STING uses a multi-resolution approach to perform cluster analysis, the quality of STING clustering depends on the granularity of the lowest level of the grid structure. Optimization and simplification of hierarchical clusterings are also important. An interesting direction for improving the clustering quality of hierarchical clustering methods is to integrate hierarchical clustering with distance-based clustering, iterative relocation, or other non-hierarchical clustering methods."
merged_topic_9_0,"hical, hierarc, divisiv, agglomerativ, clustering, decisions, merged, sizes, agglomerative, cophenetic","<task:merge> <sos>
 Agglomerativ e and divisiv e hierarc hical clustering
 BIR CH Balanced Iterativ e Reducing and Clustering using Hierarc hies
 A hierarc hical structure for STING clustering
 Hierarc hical metho ds A hierarc hical clustering metho d w orks b y grouping data ob jects in to a tree of clusters
 Hierarc hical clustering metho ds can b e further classi ed in to agglomer ative and divisive hierarc hical clustering dep ending on whether the hierarc hical decomp osition is formed in a b ottomup or topdo wn fashion
 Agglomerativ e and divisiv e hierarc hical clustering In general there are t w o t yp es of hierarc hical clustering metho ds
 Most hierarc hical clustering metho ds b elong to this category
 Divisiv e hierarc hi cal clusterin g This topdo wn strategy do es the rev erse of agglomerativ e hierarc hical clustering b y starting with all ob jects in one cluster
 In either agglomerativ e or divisiv e hierarc hical clustering one can sp ecify the desired n um b er of clusters as a termination condition
 The hierarc hical clustering metho d though simple often encoun ters diculties regarding the selection of merge or split p oin ts
 One promising direction for impro ving the clustering qualit y of hierarc hical metho ds is to in tegrate hierarc hical clustering with other clustering tec hniques for m ultiple phase clustering
 CURE emplo ys a no v el hierarc hical clustering algorithm that adopts a middle ground b et w een the agglomerativ e ( b ottomup ) and divisiv e ( topdo wn ) approac hes
 
 ++++
 
 Clustering Method Î±A Î±B Î² Î³ merged clusters monotonically increases ( or is at worst nonincreasing ) as we proceed from singleton clusters to one allinclusive cluster
 Ability to Handle Diï¬€erent Cluster Sizes One aspect of agglomerative hierarchical clustering that we have not yet discussed is how to treat the relative sizes of the pairs of clusters that are merged
 <eos>","Hierarchical clustering methods work by grouping data objects into a tree of clusters and are broadly classified into two types: agglomerative and divisive hierarchical clustering. This classification depends on whether the hierarchical decomposition is formed in a bottom-up or top-down fashion. Agglomerative clustering is a bottom-up approach, while divisive hierarchical clustering is a top-down strategy that does the reverse of agglomerative, by starting with all objects in one cluster. Most hierarchical clustering methods belong to the agglomerative category. Specific hierarchical methods include BIRCH (Balanced Iterative Reducing and Clustering using Hierarchies) and a hierarchical structure utilized for STING clustering. CURE, for instance, employs a novel hierarchical clustering algorithm that adopts a middle ground between the agglomerative (bottom-up) and divisive (top-down) approaches. In either agglomerative or divisive hierarchical clustering, one can specify the desired number of clusters as a termination condition. Although simple, the hierarchical clustering method often encounters difficulties regarding the selection of merge or split points. One promising direction for improving the clustering quality of hierarchical methods is to integrate hierarchical clustering with other clustering techniques for multiple-phase clustering. Regarding clustering method characteristics, merged clusters using metrics like Î±A, Î±B, Î², and Î³ monotonically increase (or are at worst nonincreasing) as the process proceeds from singleton clusters to one all-inclusive cluster. An important aspect of agglomerative hierarchical clustering that warrants consideration is how to treat the relative sizes of the pairs of clusters that are merged."
merged_topic_9_1,"hical, hierarc, divisiv, agglomerativ, clustering, decisions, merged, sizes, agglomerative, cophenetic","<task:merge> <sos>
 After generating the hierarc hical structure the query pro cessing time is O ( g ) where g is the total n um b er of grid cells at the lo w est lev el whic h is usually m uc h smaller than n Since STING uses a m ultiresolution approac h to p erform cluster analysis the qualit y of STING clustering dep ends on the gran ularit y of the lo w est lev el of the grid structure
 Agglomerativ e hierarc hical clustering suc h as A GNES and divisiv e hierarc hical clustering suc h as DIANA w ere in tro duced b y Kaufman and Rousseeu w
 An in teresting direction for impro ving the clustering qualit y of hierarc hical clustering metho ds is to in tegrate hierarc hical clustering with distancebased clustering iterativ e relo cation or other nonhierarc hical clustering metho ds
 Optimization and simpli cation of hierarc hical clusterings
 
 ++++
 
 Merging Decisions Are Final Agglomerative hierarchical clustering algorithms tend to make good local decisions about combining two clusters since they can use information about the pairwise similarity of all points
 For example if at some point in the agglomerative hierarchical clustering process the smallest distance between the two clusters that are merged is then all points in one cluster have a cophenetic distance of with respect to the points in the other cluster
 The cophenetic distance is diï¬€erent for each hierarchical clustering of a set of points
 <eos>","Agglomerative hierarchical clustering, such as AGNES, and divisive hierarchical clustering, such as DIANA, were introduced by Kaufman and Rousseeuw. Agglomerative hierarchical clustering algorithms tend to make good local decisions about combining two clusters by using information about the pairwise similarity of all points. For instance, if at some point in the agglomerative hierarchical clustering process the smallest distance between two merged clusters is X, then all points in one cluster have a cophenetic distance of X with respect to the points in the other cluster; notably, the cophenetic distance is different for each hierarchical clustering of a set of points. The STING algorithm, utilizing a multi-resolution approach for cluster analysis, operates with a hierarchical structure. After generating this structure, its query processing time is O(g), where g is the total number of grid cells at the lowest level, typically much smaller than n. The quality of STING clustering, consequently, depends on the granularity of this lowest level of the grid structure. An interesting direction for improving the clustering quality of hierarchical clustering methods, encompassing their optimization and simplification, is to integrate them with distance-based clustering, iterative relocation, or other non-hierarchical clustering methods."
merged_topic_10_0,"mining, researc, areas, cation, statistics, versus, analysis, groups, types, useful","<task:merge> <sos>
 Clustering has its ro ots in man y areas including data mining statistics biology and mac hine learning
 A cluster of data ob jects can b e treated collectiv ely as one group in man y applications
 Clustering ma y also help in the iden ti cation of areas of similar land use in an earth observ ation database and in the iden ti cation of groups of motor insurance p olicy holders with a high a v erage claim cost as w ell as the iden ti cation of groups of houses in a cit y according to house t yp e v alue and geographical lo cation
 Data clustering is under vigorous dev elopmen t Con tributing areas of researc h include data mining statistics mac hine learning spatial database tec hnology biology and mark eting
 Owing to the h uge amoun ts of data collected in databases cluster analysis has recen tly b ecome a highly activ e topic in data mining researc h As a branc h of statistics cluster analysis has b een studied extensiv ely for man y y ears fo cusing mainly on distance based cluster analysis
 In data mining e orts ha v e fo cused on nding metho ds for ecien t and e ectiv e cluster analysis in lar ge datab ases
 Clustering is a c hallenging eld of researc h where its p oten tial applications p ose their o wn sp ecial requiremen ts
 The follo wing are t ypical requiremen ts of clustering in data mining
 Cluster analysis has wide applications including mark et or customer segmen tation pattern recognition bio logical studies spatial data analysis W eb do cumen t classi cation and man y others
 
 ++++
 
 Cluster Analysis Basic Concepts and Algorithms Cluster analysis divides data into groups ( clusters ) that are meaningful useful or both
 We provide some speciï¬c examples organized by whether the purpose of the clustering is understanding or utility
 Clustering can be used to segment customers into a small number of groups for additional analysis and marketing activities
 <eos>","Cluster analysis divides data into groups (clusters) that are meaningful, useful, or both, allowing a cluster of data objects to be treated collectively as one group in many applications. Its roots are in numerous areas, including data mining, statistics, biology, machine learning, spatial database technology, and marketing. As a branch of statistics, cluster analysis has been studied extensively for many years, focusing mainly on distance-based cluster analysis. Data clustering is currently under vigorous development, and owing to the huge amounts of data collected in databases, cluster analysis has recently become a highly active topic in data mining research. In data mining, efforts have focused on finding efficient and effective methods for cluster analysis in large databases. Cluster analysis has wide applications, including market or customer segmentation (e.g., segmenting customers into groups for additional analysis and marketing activities), pattern recognition, biological studies, spatial data analysis, and Web document classification. Other specific applications include the identification of areas of similar land use in an earth observation database, the identification of groups of motor insurance policy holders with a high average claim cost, and the identification of groups of houses in a city according to house type, value, and geographical location. Clustering is a challenging field of research where its potential applications pose their own special requirements."
merged_topic_10_1,"mining, researc, areas, cation, statistics, versus, analysis, groups, types, useful","<task:merge> <sos>
 Clustering is a dynamic eld of researc h in data mining with a large n um b er of clustering algorithms dev elop ed
 Supp ose that the data mining task is to cluster the follo wing eigh t p oin ts ( with ( x y ) represen ting lo cation ) in to clusters
 Clustering has b een p opularly recognized as an imp ortan t data mining task with broad applications
 Giv e one application example for eac h of the follo wing cases ( a ) An application whic h tak es clustering as a ma jor data mining function
 ( b ) An application whic h tak es clustering as a prepro cessing to ol for data preparation for other data mining tasks
 Data Mining and Know le dge Disc overy
 Ecien t and e ectiv e clustering metho d for spatial data mining
 
 ++++
 
 These cluster prototypes can be used as the basis for a number of data analysis or data processing techniques
 Cluster analysis groups data objects based only on information found in the data that describes the objects and their relationships
 Cluster analysis is related to other techniques that are used to divide data objects into groups
 Nonetheless some work in graph partitioning and in image and market segmentation is related to cluster analysis
 Diï¬€erent Types of Clusterings An entire collection of clusters is commonly referred to as a clustering and in this section we distinguish various types of clusterings hierarchical ( nested ) versus partitional ( unnested ) exclusive versus overlapping versus fuzzy and complete versus partial
 Diï¬€erent Types of Clusters Clustering aims to ï¬nd useful groups of objects ( clusters ) where usefulness is deï¬ned by the goals of the data analysis
 <eos>","Clustering is a dynamic field of research in data mining, with a large number of clustering algorithms developed, and it has been popularly recognized as an important data mining task with broad applications within Data Mining and Knowledge Discovery, including efficient and effective clustering methods for spatial data mining. For example, a data mining task might involve clustering eight points (with (x,y) representing location) into clusters. Cluster analysis groups data objects based solely on information found in the data that describes the objects and their relationships. This technique is related to other methods used to divide data objects into groups, with some work in graph partitioning, image, and market segmentation also being related to cluster analysis. Applications of clustering can take it as a major data mining function or as a preprocessing tool for data preparation for other data mining tasks. These cluster prototypes can then be used as the basis for a number of data analysis or data processing techniques. An entire collection of clusters is commonly referred to as a clustering, and various types of clusterings are distinguished: hierarchical (nested) versus partitional (unnested), exclusive versus overlapping versus fuzzy, and complete versus partial. Ultimately, clustering aims to find useful groups of objects (clusters), where usefulness is defined by the goals of the data analysis."
merged_topic_11_0,"analysis, erforming, satisfactory, ariable, results, versus, groups, types, useful","<task:merge> <sos>
 Cluster analysis is an imp ortan t h uman activit y
 Cluster analysis to ols based on k means k medoids and sev eral other metho ds ha v e also b een built in to man y statistical analysis soft w are pac k ages or systems suc h as SPlus SPSS and SAS
 With these requiremen ts in mind our study of cluster analysis pro ceeds as follo ws
 First w e study di er en t t yp es of data and ho w they can in uence clustering metho ds
 In general expressing a v ariable in smaller units will lead to a larger range for that v ariable and th us a larger e ect on the resulting clustering structure
 T reating binary v ariables as if they are in terv alscaled can lead to misleading clustering results
 One approac h is to group eac h kind of v ariables together p erforming a separate cluster analysis for eac h v ariable t yp e This is feasible if these analyses deriv e satisfactory results
 Ho w ev er in real applications it is unlik ely that a separate cluster analysis p er v ariable t yp e will generate satisfactory results
 A more preferable approac h is to pro cess all v ariable t yp es together p erforming a single cluster analysis
 W e also in tro duce algo rithms whic h in tegrate the ideas of sev eral clustering metho ds
 F urthermore its clustering qualit y is dep enden t on the sampling metho d used
 
 ++++
 
 Cluster Analysis Basic Concepts and Algorithms Cluster analysis divides data into groups ( clusters ) that are meaningful useful or both
 We provide some speciï¬c examples organized by whether the purpose of the clustering is understanding or utility
 Clustering can be used to segment customers into a small number of groups for additional analysis and marketing activities
 These cluster prototypes can be used as the basis for a number of data analysis or data processing techniques
 <eos>","Cluster analysis is an important human activity that divides data into groups (clusters) that are meaningful, useful, or both. Cluster analysis tools, based on k-means, k-medoids, and several other methods, have been built into many statistical analysis software packages or systems such as SPlus, SPSS, and SAS. We provide some specific examples of its application, organized by whether the purpose of the clustering is understanding or utility, such as segmenting customers into a small number of groups for additional analysis and marketing activities. These cluster prototypes can also be used as the basis for a number of data analysis or data processing techniques. With these requirements in mind, our study of cluster analysis proceeds as follows: First, we study different types of data and how they can influence clustering methods. In general, expressing a variable in smaller units will lead to a larger range for that variable and thus a larger effect on the resulting clustering structure, while treating binary variables as if they are interval-scaled can lead to misleading clustering results. One approach is to group each kind of variables together, performing a separate cluster analysis for each variable type; however, this is only feasible if these analyses derive satisfactory results, and in real applications, it is unlikely that a separate cluster analysis per variable type will generate satisfactory results. A more preferable approach is to process all variable types together, performing a single cluster analysis. We also introduce algorithms which integrate the ideas of several clustering methods. Furthermore, its clustering quality is dependent on the sampling method used."
merged_topic_11_1,"analysis, erforming, satisfactory, ariable, results, versus, groups, types, useful","<task:merge> <sos>
 This summary information t ypically ts in to main memory for use b y the m ultiresolution w a v elet transform and the subsequen t cluster analysis
 First it pro vides unsup ervised clustering
 The m ultiresolution prop ert y of w a v elet transformations can help in the detection of clusters at v arying lev els of accuracy
 In exp erimen tal studies W a v eCluster w as found to outp erform BIR CH CLARANS and DBSCAN in terms of b oth eciency and clustering qualit y
 Mo delbased clustering metho ds follo w t w o ma jor approac hes a statistic al appr o ach or a neur al network appr o ach
 
 ++++
 
 Cluster analysis groups data objects based only on information found in the data that describes the objects and their relationships
 Cluster analysis is related to other techniques that are used to divide data objects into groups
 Nonetheless some work in graph partitioning and in image and market segmentation is related to cluster analysis
 Diï¬€erent Types of Clusterings An entire collection of clusters is commonly referred to as a clustering and in this section we distinguish various types of clusterings hierarchical ( nested ) versus partitional ( unnested ) exclusive versus overlapping versus fuzzy and complete versus partial
 Diï¬€erent Types of Clusters Clustering aims to ï¬nd useful groups of objects ( clusters ) where usefulness is deï¬ned by the goals of the data analysis
 <eos>","Cluster analysis groups data objects based only on information found in the data that describes the objects and their relationships, aiming to find useful groups of objects (clusters) where usefulness is defined by the goals of the data analysis. An entire collection of clusters is commonly referred to as a clustering, and various types can be distinguished, including hierarchical (nested) versus partitional (unnested), exclusive versus overlapping versus fuzzy, and complete versus partial. Cluster analysis is related to other techniques that are used to divide data objects into groups, and nonetheless, some work in graph partitioning, as well as in image and market segmentation, is also related to cluster analysis. Model-based clustering methods follow two major approaches: a statistical approach or a neural network approach. The multiresolution property of wavelet transformations can help in the detection of clusters at varying levels of accuracy, with this summary information typically fitting into main memory for use by the multiresolution wavelet transform and the subsequent cluster analysis. This approach first provides unsupervised clustering. In experimental studies, WaveCluster was found to outperform BIRCH, CLARANS, and DBSCAN in terms of both efficiency and clustering quality."
merged_topic_12_0,"hical, hierarc, divisiv, agglomerativ, clustering, greater, valid, explaining, illustrating, homogeneity","<task:merge> <sos>
 Agglomerativ e and divisiv e hierarc hical clustering
 BIR CH Balanced Iterativ e Reducing and Clustering using Hierarc hies
 A hierarc hical structure for STING clustering
 Hierarc hical metho ds A hierarc hical clustering metho d w orks b y grouping data ob jects in to a tree of clusters
 Hierarc hical clustering metho ds can b e further classi ed in to agglomer ative and divisive hierarc hical clustering dep ending on whether the hierarc hical decomp osition is formed in a b ottomup or topdo wn fashion
 Agglomerativ e and divisiv e hierarc hical clustering In general there are t w o t yp es of hierarc hical clustering metho ds
 Most hierarc hical clustering metho ds b elong to this category
 Divisiv e hierarc hi cal clusterin g This topdo wn strategy do es the rev erse of agglomerativ e hierarc hical clustering b y starting with all ob jects in one cluster
 In either agglomerativ e or divisiv e hierarc hical clustering one can sp ecify the desired n um b er of clusters as a termination condition
 The hierarc hical clustering metho d though simple often encoun ters diculties regarding the selection of merge or split p oin ts
 One promising direction for impro ving the clustering qualit y of hierarc hical metho ds is to in tegrate hierarc hical clustering with other clustering tec hniques for m ultiple phase clustering
 CURE emplo ys a no v el hierarc hical clustering algorithm that adopts a middle ground b et w een the agglomerativ e ( b ottomup ) and divisiv e ( topdo wn ) approac hes
 
 ++++
 
 If meaningful groups are the goal then the clusters should capture the natural structure of the data
 First we further deï¬ne cluster analysis illustrating why it is diï¬ƒcult and explaining its relationship to other techniques that group data
 The greater the similarity ( or homogeneity ) within a group and the greater the diï¬€erence between groups the better or more distinct the clustering
 <eos>","<task:merge> <sos> If meaningful groups are the goal, then the clusters should capture the natural structure of the data; the greater the similarity (or homogeneity) within a group and the greater the difference between groups, the better or more distinct the clustering. First, we further define cluster analysis, illustrating why it is difficult and explaining its relationship to other techniques that group data. Hierarchical methods, a type of clustering, work by grouping data objects into a tree of clusters. Hierarchical clustering methods are generally classified into two types: agglomerative and divisive hierarchical clustering, depending on whether the hierarchical decomposition is formed in a bottom-up or top-down fashion; most hierarchical clustering methods belong to these two categories. Divisive hierarchical clustering, a top-down strategy, does the reverse of agglomerative hierarchical clustering by starting with all objects in one cluster. In either agglomerative or divisive hierarchical clustering, one can specify the desired number of clusters as a termination condition. Specific hierarchical approaches include BIRCH (Balanced Iterative Reducing and Clustering using Hierarchies) and a hierarchical structure for STING clustering. Though often simple, the hierarchical clustering method encounters difficulties regarding the selection of merge or split points. One promising direction for improving the clustering quality of hierarchical methods is to integrate hierarchical clustering with other clustering techniques for multiple phase clustering. CURE employs a novel hierarchical clustering algorithm that adopts a middle ground between the agglomerative (bottom-up) and divisive (top-down) approaches. <eos>"
merged_topic_12_1,"hical, hierarc, divisiv, agglomerativ, clustering, greater, valid, explaining, illustrating, homogeneity","<task:merge> <sos>
 After generating the hierarc hical structure the query pro cessing time is O ( g ) where g is the total n um b er of grid cells at the lo w est lev el whic h is usually m uc h smaller than n Since STING uses a m ultiresolution approac h to p erform cluster analysis the qualit y of STING clustering dep ends on the gran ularit y of the lo w est lev el of the grid structure
 Agglomerativ e hierarc hical clustering suc h as A GNES and divisiv e hierarc hical clustering suc h as DIANA w ere in tro duced b y Kaufman and Rousseeu w
 An in teresting direction for impro ving the clustering qualit y of hierarc hical clustering metho ds is to in tegrate hierarc hical clustering with distancebased clustering iterativ e relo cation or other nonhierarc hical clustering metho ds
 Optimization and simpli cation of hierarc hical clusterings
 
 ++++
 
 We stress however that the types of clusters described here are equally valid for other kinds of data
 However this approach does not address the fact the clusters in the data can be of a diï¬€erent type than those sought by our clustering algorithm
 <eos>","Agglomerative hierarchical clustering, such as AGNES, and divisive hierarchical clustering, such as DIANA, were introduced by Kaufman and Rousseeuw. The optimization and simplification of hierarchical clusterings are important considerations. After generating the hierarchical structure, the query processing time is O(g), where g is the total number of grid cells at the lowest level, which is usually much smaller than n. Since STING uses a multiresolution approach to perform cluster analysis, the quality of STING clustering depends on the granularity of the lowest level of the grid structure. An interesting direction for improving the clustering quality of hierarchical clustering methods is to integrate hierarchical clustering with distance-based clustering, iterative relocation, or other nonhierarchical clustering methods. We stress, however, that the types of clusters described here are equally valid for other kinds of data. However, this approach does not address the fact that the clusters in the data can be of a different type than those sought by our clustering algorithm."
merged_topic_13_0,"split, merging, merge, decision, merged, merges, phase, mamb, ï¬nal","<task:merge> <sos>
 Hierarc hical metho ds su er from the fact that once a step ( merge or split ) is done it can nev er b e undone
 metho d su ers from its inabilit y to p erform adjustmen t once a merge or split decision has b een executed
 The cluster merging pro cess rep eats un til all of the ob jects are ev en tually merged to form one cluster
 Suc h a decision is critical b ecause once a group of ob jects is merged or split the pro cess at the next step will op erate on the newly generated clusters
 Th us merge or split decisions if not w ell c hosen at some step ma y lead to lo w qualit y clusters
 Moreo v er the metho d do es not scale w ell since the decision of merge or split needs to examine and ev aluate a go o d n um b er of ob jects or clusters
 The third called R OCK merges clusters based on their in terconnectivit y
 Th us it do es not dep end on a static usersupplied mo del and can automatically adapt to the in ternal c haracteristics of the clusters b eing merged
 
 ++++
 
 During a splitting phase clusters are divided while during a merging phase clusters are combined
 The following are some techniques used in the splitting and merging phases
 ( A cluster merger aï¬€ects only O ( mi ) proximities for the techniques that we consider )
 Speciï¬cally two clusters that are merged may be more similar ( less distant ) than the pair of clusters that were merged in a previous step
 In other words after we merge clusters A and B to form cluster R the proximity of the new cluster R to an existing cluster Q is a linear function of the proximities of Q with respect to the original clusters A and B
 <eos>","During a splitting phase, clusters are divided, while during a merging phase, clusters are combined, a process that repeats until all objects are eventually merged to form one cluster. Hierarchical methods, however, suffer from their inability to perform adjustments, as once a step (merge or split) is done, it can never be undone. Such decisions are critical because once a group of objects is merged or split, the process at the next step will operate on the newly generated clusters; thus, if not well chosen at some step, they may lead to low quality clusters. Moreover, these methods do not scale well since the decision of merge or split needs to examine and evaluate a good number of objects or clusters. A cluster merger affects only O(mi) proximities for the techniques under consideration. Specifically, two clusters that are merged may be more similar (less distant) than the pair of clusters that were merged in a previous step; in other words, after clusters A and B are merged to form cluster R, the proximity of the new cluster R to an existing cluster Q is a linear function of the proximities of Q with respect to the original clusters A and B. The third, called ROCK, merges clusters based on their interconnectivity, thus it does not depend on a static user-supplied model and can automatically adapt to the internal characteristics of the clusters being merged."
merged_topic_13_1,"split, merging, merge, decision, merged, merges, phase, mamb, ï¬nal","<task:merge> <sos>
 These are merging and splittin g When an ob ject is incorp orated the t w o b est hosts are considered for merging in to a single class
 The merging and splitting op erators allo w COBWEB to p erform a bidirectional searc h eg a merge can undo a previous split
 
 ++++
 
 In Table which gives the formula for updating cluster similarity the coeï¬ƒcients for UPGMA involve the size of each of the clusters that were merged Î±A mA mAmB Î±B mB mAmB Î² Î³
 There are some techniques that attempt to overcome the limitation that merges are ï¬nal
 The fact that all merges are ï¬nal can also cause trouble for noisy highdimensional data such as document data
 <eos>","Merging and splitting are fundamental operations. When an object is incorporated, the two best hosts are considered for merging into a single class. These merging and splitting operators allow COBWEB to perform a bidirectional search; for example, a merge can undo a previous split. Regarding the update of cluster similarity, the coefficients for UPGMA, as specified in a formula, involve the size of each of the clusters that were merged, including Î±A mA mAmB, Î±B mB mAmB, Î², and Î³. However, a significant limitation is that merges are often final. This fact can cause trouble, especially for noisy high-dimensional data such as document data. Consequently, some techniques attempt to overcome this limitation."
merged_topic_14_0,"constrain, households, houses, fisher, heigh, versus, analysis, groups, types, useful","<task:merge> <sos>
 What ar e some typic al applic ations of clustering
 Minimal requiremen t s for domain kno wledge to determine input parameters Man y clustering algorithms require users to input certain parameters in cluster analysis ( suc h as the n um b er of desired clusters )
 Constrain tbased clustering Realw orld applications ma y need to p erform clustering under v arious kinds of constrain ts
 T o decide up on this y ou ma y cluster households while considering constrain ts suc h as the cit ys riv ers and high w a y net w orks and customer requiremen ts p er region
 A c hallenging task is to nd groups of data with go o d clustering b eha vior that satisfy sp eci ed constrain ts
 It is imp ortan t to study ho w an application goal ma y in uence the selection of clustering metho ds
 Supp ose that a data set to b e clustered con tains n ob jects whic h ma y represen t p ersons houses do cumen ts coun tries etc
 T ypical examples include w eigh t and heigh t latitude and longitude co ordinates ( eg when clustering houses ) and w eather temp erature
 F or example when clustering bask etball pla y er candidates one ma y lik e to giv e more w eigh t to the v ariable heigh t How c an the data for a variable b e standar dize d
 
 ++++
 
 Cluster Analysis Basic Concepts and Algorithms Cluster analysis divides data into groups ( clusters ) that are meaningful useful or both
 We provide some speciï¬c examples organized by whether the purpose of the clustering is understanding or utility
 Clustering can be used to segment customers into a small number of groups for additional analysis and marketing activities
 These cluster prototypes can be used as the basis for a number of data analysis or data processing techniques
 Cluster analysis groups data objects based only on information found in the data that describes the objects and their relationships
 <eos>","Cluster analysis divides data into groups (clusters) that are meaningful, useful, or both, by grouping data objects based solely on information found within the data that describes the objects and their relationships. Its purpose can be understanding or utility, with specific examples including segmenting customers into a small number of groups for additional analysis and marketing activities. These resultant cluster prototypes can then serve as the basis for various data analysis or data processing techniques. A dataset to be clustered contains objects, such as persons, houses, documents, or countries, which are described by typical examples of variables like weight, height, latitude and longitude coordinates (e.g., when clustering houses), or weather temperature. Many clustering algorithms require users to input certain parameters in cluster analysis, such as the number of desired clusters, indicating minimal requirements for domain knowledge to determine these input parameters. Real-world applications may also necessitate constraint-based clustering, requiring the performance of clustering under various kinds of constraints. For example, one might cluster households while considering constraints such as a city's rivers, highway networks, and customer requirements per region. A challenging task in this area is to find groups of data with good clustering behavior that simultaneously satisfy specified constraints. It is important to study how an application goal may influence the selection of clustering methods; for instance, when clustering basketball player candidates, one might prefer to give more weight to the variable height. How can the data for a variable be standardized?"
merged_topic_14_1,"constrain, households, houses, fisher, heigh, versus, analysis, groups, types, useful","<task:merge> <sos>
 F urthermore some applications ma y ha v e clustering criteria whic h require the in tegration of sev eral clustering tec hniques
 Giv e an example of ho w sp eci c clustering metho ds ma y b e inte gr ate d eg where one clustering algorithm is used as a prepro cessing step for another
 Households or places of w ork ma y b e clustered so that t ypically one A TM is assigned p er cluster
 Other examples of the statistical clustering approac h include COBWEB b y Fisher CLASSIT b y Gennari Langley and Fisher and AutoClass b y Cheeseman and Stutz
 
 ++++
 
 Cluster analysis is related to other techniques that are used to divide data objects into groups
 Nonetheless some work in graph partitioning and in image and market segmentation is related to cluster analysis
 Diï¬€erent Types of Clusterings An entire collection of clusters is commonly referred to as a clustering and in this section we distinguish various types of clusterings hierarchical ( nested ) versus partitional ( unnested ) exclusive versus overlapping versus fuzzy and complete versus partial
 Diï¬€erent Types of Clusters Clustering aims to ï¬nd useful groups of objects ( clusters ) where usefulness is deï¬ned by the goals of the data analysis
 <eos>","Clustering aims to find useful groups of objects (clusters), where usefulness is defined by the goals of the data analysis; an entire collection of clusters is commonly referred to as a clustering. Cluster analysis is related to other techniques that are used to divide data objects into groups, including some work in graph partitioning, image, and market segmentation. In this section, various types of clusterings are distinguished, such as hierarchical (nested) versus partitional (unnested), exclusive versus overlapping versus fuzzy, and complete versus partial. Furthermore, some applications may have clustering criteria which require the integration of several clustering techniques; for example, one specific clustering algorithm might be used as a preprocessing step for another. Other examples of the statistical clustering approach include COBWEB by Fisher, CLASSIT by Gennari, Langley and Fisher, and AutoClass by Cheeseman and Stutz. Households or places of work may be clustered so that typically one ATM is assigned per cluster."
merged_topic_15_0,"mining, researc, areas, cation, statistics, greater, valid, explaining, illustrating, homogeneity","<task:merge> <sos>
 Data clustering is under vigorous dev elopmen t Con tributing areas of researc h include data mining statistics mac hine learning spatial database tec hnology biology and mark eting
 Owing to the h uge amoun ts of data collected in databases cluster analysis has recen tly b ecome a highly activ e topic in data mining researc h As a branc h of statistics cluster analysis has b een studied extensiv ely for man y y ears fo cusing mainly on distance based cluster analysis
 In data mining e orts ha v e fo cused on nding metho ds for ecien t and e ectiv e cluster analysis in lar ge datab ases
 Clustering is a c hallenging eld of researc h where its p oten tial applications p ose their o wn sp ecial requiremen ts
 The follo wing are t ypical requiremen ts of clustering in data mining
 Cluster analysis has wide applications including mark et or customer segmen tation pattern recognition bio logical studies spatial data analysis W eb do cumen t classi cation and man y others
 Clustering is a dynamic eld of researc h in data mining with a large n um b er of clustering algorithms dev elop ed
 Supp ose that the data mining task is to cluster the follo wing eigh t p oin ts ( with ( x y ) represen ting lo cation ) in to clusters
 Clustering has b een p opularly recognized as an imp ortan t data mining task with broad applications
 Giv e one application example for eac h of the follo wing cases ( a ) An application whic h tak es clustering as a ma jor data mining function
 ( b ) An application whic h tak es clustering as a prepro cessing to ol for data preparation for other data mining tasks
 Data Mining and Know le dge Disc overy
 Ecien t and e ectiv e clustering metho d for spatial data mining
 
 ++++
 
 We stress however that the types of clusters described here are equally valid for other kinds of data
 <eos>","Data clustering is under vigorous development. Contributing areas of research include data mining, statistics, machine learning, spatial database technology, biology, and marketing. Owing to the huge amounts of data collected in databases, cluster analysis has recently become a highly active topic in data mining research. As a branch of statistics, cluster analysis has been studied extensively for many years, focusing mainly on distance-based cluster analysis. In data mining, efforts have focused on finding methods for efficient and effective cluster analysis in large databases, including specific efficient and effective clustering methods for spatial data mining. Clustering is a challenging and dynamic field of research where its potential applications pose their own special requirements, and a large number of clustering algorithms have been developed. Typical requirements for clustering exist in data mining. Cluster analysis has wide and broad applications, including market or customer segmentation, pattern recognition, biological studies, spatial data analysis, and Web document classification, among many others. Clustering has been popularly recognized as an important data mining task with broad applications. For instance, a data mining task might involve clustering eight points (with (x,y) representing location) into clusters. Applications can take clustering as a major data mining function or as a preprocessing tool for data preparation for other data mining tasks. We stress, however, that the types of clusters are equally valid for other kinds of data."
merged_topic_16_0,"elative, distance, pair, clusters, similarit, decisions, merged, sizes, agglomerative, cophenetic","<task:merge> <sos>
 This di ers from con v en tional clustering whic h measures similarit y based on geometric distance
 F or example clusters C and C ma y b e merged if an ob ject in C and an ob ject in C form the minim um Euclidean distance b et w een an y t w o ob jects from di eren t clusters
 F our widelyused measures for distance b et w een clusters are as follo ws where m is the mean for cluster C n i i i is the n um b er of ob jects in C and jp p j is the distance b et w een t w o ob jects or p oin ts p and p
 Mean distance d ( C ) jm C m j mean i j i j Av erage distance d ( C ) C av g i j pC p C n n i j i j What ar e some of the diculties with hier ar chic al clustering
 A t eac h step of the algorithm the t w o clusters with the closest pair of represen tativ e p oin ts ( where eac h p oin t in the pair is from a di eren t cluster ) are merged
 In other w ords cluster similarit y is based on the n um b er of p oin ts from i j di eren t clusters who ha v e neigh b ors in common
 
 ++++
 
 Clustering Method Î±A Î±B Î² Î³ merged clusters monotonically increases ( or is at worst nonincreasing ) as we proceed from singleton clusters to one allinclusive cluster
 Ability to Handle Diï¬€erent Cluster Sizes One aspect of agglomerative hierarchical clustering that we have not yet discussed is how to treat the relative sizes of the pairs of clusters that are merged
 Merging Decisions Are Final Agglomerative hierarchical clustering algorithms tend to make good local decisions about combining two clusters since they can use information about the pairwise similarity of all points
 <eos>","In clustering, similarity is often measured based on geometric distance; for example, clusters C and C' may be merged if an object in C and an object in C' form the minimum Euclidean distance between any two objects from different clusters. At each step of the algorithm, the two clusters with the closest pair of representative points (where each point in the pair is from a different cluster) are merged. In other words, cluster similarity is often based on the number of points from different clusters who have neighbors in common. Four widely used measures for distance between clusters are as follows: where m is the mean for cluster C, n is the number of objects in C, and |p - p'| is the distance between two objects or points p and p'. These include Mean distance d(C) = |m_C - m_C'| and Average distance d(C) = Î£_{pâˆˆC, p'âˆˆC'} |p - p'| / (n_C * n_C'). One difficulty with hierarchical clustering is how to treat the relative sizes of the pairs of clusters that are merged, an aspect related to the ability to handle different cluster sizes. For a clustering method, the property of merged clusters (e.g., related to Î±A Î±B Î² Î³) monotonically increases (or is at worst nonincreasing) as the process proceeds from singleton clusters to one all-inclusive cluster. Merging decisions in agglomerative hierarchical clustering algorithms are final, though they tend to make good local decisions about combining two clusters since they can use information about the pairwise similarity of all points."
merged_topic_16_1,"elative, distance, pair, clusters, similarit, decisions, merged, sizes, agglomerative, cophenetic","<task:merge> <sos>
 T o determine the pairs of most similar sub clusters it tak es in to accoun t b oth the in terconnectivit y as w ell as the closeness of the clusters esp ecially the in ternal c haracteristics of the clusters themselv es
 CHAMELEON determines the similarit y b et w een eac h pair of clusters C and C according to their r elative i j interc onne ctivity RI ( C ) and their r elative closeness RC ( C )
 
 ++++
 
 For example if at some point in the agglomerative hierarchical clustering process the smallest distance between the two clusters that are merged is then all points in one cluster have a cophenetic distance of with respect to the points in the other cluster
 The cophenetic distance is diï¬€erent for each hierarchical clustering of a set of points
 <eos>","CHAMELEON determines the pairs of most similar sub-clusters by taking into account both their interconnectivity and closeness, especially the internal characteristics of the clusters themselves. Specifically, CHAMELEON determines the similarity between each pair of clusters C_i and C_j according to their Relative Interconnectivity (RI(C_i, C_j)) and their Relative Closeness (RC(C_i, C_j)). For example, in the agglomerative hierarchical clustering process, when two clusters are merged, the smallest distance between them becomes the cophenetic distance for all points in one cluster with respect to the points in the other cluster. The cophenetic distance is different for each hierarchical clustering of a set of points."
merged_topic_17_0,"elative, distance, pair, clusters, similarit, cohesion, separation, xci, view, prototypebased","<task:merge> <sos>
 This di ers from con v en tional clustering whic h measures similarit y based on geometric distance
 
 ++++
 
 Our objective is to maximize the similarity of the documents in a cluster to the cluster centroid this quantity is known as the cohesion of the cluster
 The analogous quantity to the total SSE is the total cohesion which is given by Equation
 K Total Cohesion xCi cosine ( x ci ) ( ) i The General Case There are a number of choices for the proximity function centroid and objective function that can be used in the basic Kmeans K means Table
 relationships and the order in which the clusters were merged ( agglomerative view ) or split ( divisive view )
 GraphBased View of Cohesion and Separation For graphbased clusters the cohesion of a cluster can be deï¬ned as the sum of the weights of the links in the proximity graph that connect points within the cluster
 Mathematically cohesion and separation for a graphbased cluster can be expressed using Equations and respectively
 cohesion ( Ci ) proximity ( x y ) ( ) xCi yCi separation ( Ci Cj ) proximity ( x y ) ( ) xCi yCj Cluster Evaluation ( a ) Cohesion
 Graphbased view of cluster cohesion and separation
 PrototypeBased View of Cohesion and Separation For prototypebased clusters the cohesion of a cluster can be deï¬ned as the sum of the proximities with respect to the prototype ( centroid or medoid ) of the cluster
 Cohesion for a prototypebased cluster is given in Equation while two measures for separation are given in Equations and respectively where ci is the prototype ( centroid ) of cluster Ci and c is the overall prototype ( centroid )
 Prototypebased view of cluster cohesion and separation
 I is a measure of cohesion in terms of the pairwise proximity of objects in the cluster divided by the cluster size
 I is a measure of cohesion based on the sum of the proximities of objects in the cluster to the cluster centroid
 <eos>","Our objective is to maximize the similarity of the documents in a cluster to the cluster centroid; this quantity is known as the cohesion of the cluster. This approach differs from conventional clustering, which measures similarity based on geometric distance. The analogous quantity to the total SSE is the total cohesion, which is given by Equation K: Total Cohesion xCi cosine ( x ci ) ( ) i. For the basic K-means algorithm, there are a number of choices for the proximity function, centroid, and objective function. Cluster evaluation often considers both cohesion and separation. From a graph-based view, the cohesion of a cluster can be deï¬ned as the sum of the weights of the links in the proximity graph that connect points within the cluster. Mathematically, cohesion (Ci) can be expressed as `proximity ( x y )` for `x, y` within `Ci`, while separation (Ci Cj) is `proximity ( x y )` for `x` in `Ci` and `y` in `Cj`. From a prototype-based view, the cohesion of a cluster can be deï¬ned as the sum of the proximities with respect to the prototype (centroid or medoid) of the cluster. Cohesion for a prototype-based cluster is typically given in an equation, while two measures for separation are also provided, where `ci` is the prototype (centroid) of cluster Ci and `c` is the overall prototype (centroid). Additional measures of cohesion include one based on the pairwise proximity of objects in the cluster divided by the cluster size, and another based on the sum of the proximities of objects in the cluster to the cluster centroid. Finally, cluster analysis also considers relationships and the order in which clusters were merged (an agglomerative view) or split (a divisive view)."
merged_topic_17_1,"elative, distance, pair, clusters, similarit, cohesion, separation, xci, view, prototypebased","<task:merge> <sos>
 F or example clusters C and C ma y b e merged if an ob ject in C and an ob ject in C form the minim um Euclidean distance b et w een an y t w o ob jects from di eren t clusters
 F our widelyused measures for distance b et w een clusters are as follo ws where m is the mean for cluster C n i i i is the n um b er of ob jects in C and jp p j is the distance b et w een t w o ob jects or p oin ts p and p
 Mean distance d ( C ) jm C m j mean i j i j Av erage distance d ( C ) C av g i j pC p C n n i j i j What ar e some of the diculties with hier ar chic al clustering
 A t eac h step of the algorithm the t w o clusters with the closest pair of represen tativ e p oin ts ( where eac h p oin t in the pair is from a di eren t cluster ) are merged
 
 ++++
 
 G which is a measure based on both cohesion and separation is the sum of the pairwise proximity of all objects in the cluster with all objects outside the clusterthe total weight of the edges of the proximity graph that must be cut to separate the cluster from all other clustersdivided by the sum of the pairwise proximity of objects in the cluster
 Relationship between PrototypeBased Cohesion and GraphBased Cohesion While the graphbased and prototypebased approaches to measuring the cohesion and separation of a cluster seem distinct for some proximity measures they are equivalent
 K K m K dist ( ci cj ) ( ) Total SSB K i j Relationship between Cohesion and Separation In some cases there is also a strong relationship between cohesion and separation
 The importance of this result is that minimizing SSE ( cohesion ) is equivalent to maximizing SSB ( separation )
 <eos>","Clusters C and C may be merged if an object in C and an object in C form the minimum Euclidean distance between any two objects from different clusters. At each step of the algorithm, the two clusters with the closest pair of representative points (where each point in the pair is from a different cluster) are merged. Four widely used measures for distance between clusters are as follows: where m is the mean for a cluster C, n_i is the number of objects in cluster C_i, and |p_i - p_j| is the distance between two objects or points p_i and p_j. These measures include Mean distance d(C, C) = |m_C - m_C| and Average distance d_avg(C, C) = (sum of |p_i - p_j|) / (n_i * n_j) for p_i in C_i and p_j in C_j. In some cases, there is also a strong relationship between cohesion and separation; the importance of this result is that minimizing SSE (cohesion) is equivalent to maximizing SSB (separation), exemplified by K K m K dist ( ci cj ) ( ) Total SSB K i j. G, which is a measure based on both cohesion and separation, is defined as the sum of the pairwise proximity of all objects in the cluster with all objects outside the clusterâ€”the total weight of the edges of the proximity graph that must be cut to separate the cluster from all other clustersâ€”divided by the sum of the pairwise proximity of objects in the cluster. While the graph-based and prototype-based approaches to measuring the cohesion and separation of a cluster seem distinct, for some proximity measures they are equivalent."
merged_topic_17_2,"elative, distance, pair, clusters, similarit, cohesion, separation, xci, view, prototypebased","<task:merge> <sos>
 In other w ords cluster similarit y is based on the n um b er of p oin ts from i j di eren t clusters who ha v e neigh b ors in common
 T o determine the pairs of most similar sub clusters it tak es in to accoun t b oth the in terconnectivit y as w ell as the closeness of the clusters esp ecially the in ternal c haracteristics of the clusters themselv es
 CHAMELEON determines the similarit y b et w een eac h pair of clusters C and C according to their r elative i j interc onne ctivity RI ( C ) and their r elative closeness RC ( C )
 
 ++++
 
 K xCi ( x c ) TSS i K xCi ( ( x ci ) ( c ci ) ) i K K K xCi ( x ci ) xCi ( c ci ) xCi ( x ci ) ( c ci ) i i i K K xCi ( x ci ) xCi ( c ci ) i i K K xCi ( x ci ) i Ci ( c ci ) i SSE SSB Cluster Evaluation Evaluating Individual Clusters and Objects So far we have focused on using cohesion and separation in the overall evaluation of a group of clusters
 A cluster that has a high value of cohesion may be considered better than a cluster that has a lower value
 On the other hand if two clusters are relatively cohesive but not well separated we may want to merge them into a single cluster
 We can also evaluate the objects within a cluster in terms of their contribution to the overall cohesion or separation of the cluster
 Objects that contribute more to the cohesion and separation are near the interior of the cluster
 <eos>","Cluster similarity is based on the number of points from different clusters who have neighbors in common. To determine the pairs of most similar sub-clusters, this approach takes into account both the interconnectivity and the closeness of the clusters, especially their internal characteristics. For example, CHAMELEON determines the similarity between each pair of clusters, C_i and C_j, according to their relative interconnectivity (RI(C)) and their relative closeness (RC(C)). In the broader context of cluster evaluation, the focus has been on using cohesion and separation for the overall assessment of a group of clusters. A cluster with a high value of cohesion may be considered better than one with a lower value. Conversely, if two clusters are relatively cohesive but not well separated, there may be a desire to merge them into a single cluster. Individual objects within a cluster can also be evaluated in terms of their contribution to the overall cohesion or separation of that cluster. Objects that contribute more significantly to cohesion and separation are typically found near the interior of the cluster."
merged_topic_18_0,"elative, distance, pair, clusters, similarit, similarities, min, names, distances, quantities","<task:merge> <sos>
 This di ers from con v en tional clustering whic h measures similarit y based on geometric distance
 F or example clusters C and C ma y b e merged if an ob ject in C and an ob ject in C form the minim um Euclidean distance b et w een an y t w o ob jects from di eren t clusters
 F our widelyused measures for distance b et w een clusters are as follo ws where m is the mean for cluster C n i i i is the n um b er of ob jects in C and jp p j is the distance b et w een t w o ob jects or p oin ts p and p
 Mean distance d ( C ) jm C m j mean i j i j Av erage distance d ( C ) C av g i j pC p C n n i j i j What ar e some of the diculties with hier ar chic al clustering
 A t eac h step of the algorithm the t w o clusters with the closest pair of represen tativ e p oin ts ( where eac h p oin t in the pair is from a di eren t cluster ) are merged
 
 ++++
 
 ( If our proximities are distances then the names MIN and MAX are short and suggestive
 For similarities however where higher values indicate closer points the names seem reversed
 is a proximity function while mA mB and mQ are the number of points in clusters A B and Q respectively
 The proximity function can be a similarity a dissimilarity or a simple function of these quantities
 We use distances but an analogous approach can be used for similarities
 The ï¬rst compares an actual and idealized proximity matrix while the second uses visualization
 ( For uniformity we have transformed the distances into similarities using the formula s ( d min d ) ( max d min d ) )
 <eos>","This differs from conventional clustering, which measures similarity based on geometric distance. For example, clusters C and C may be merged if an object in C and an object in C form the minimum Euclidean distance between any two objects from different clusters. At each step of the algorithm, the two clusters with the closest pair of representative points (where each point in the pair is from a different cluster) are merged. A proximity function, which can be a similarity, a dissimilarity, or a simple function of these quantities, is employed for this purpose. We typically use distances, but an analogous approach can also be used for similarities; for uniformity, distances have been transformed into similarities using the formula s = (d_max - d) / (d_max - d_min). Four widely used measures for distance between clusters are as follows: Mean distance d(C_i, C_j) = |m_i - m_j|, and Average distance d(C_i, C_j) = Î£(p in C_i, p' in C_j) |p - p'| / (n_i * n_j), where m_i is the mean for cluster C_i, n_i is the number of objects in C_i, and |p - p'| is the distance between two objects or points p and p'. If proximities are distances, then the names MIN and MAX are short and suggestive; however, for similarities, where higher values indicate closer points, the names seem reversed. Here, mA, mB, and mQ are the number of points in clusters A, B, and Q respectively. What are some of the difficulties with hierarchical clustering? The first method for evaluating such measures compares an actual and idealized proximity matrix, while the second uses visualization."
merged_topic_18_1,"elative, distance, pair, clusters, similarit, similarities, min, names, distances, quantities","<task:merge> <sos>
 In other w ords cluster similarit y is based on the n um b er of p oin ts from i j di eren t clusters who ha v e neigh b ors in common
 T o determine the pairs of most similar sub clusters it tak es in to accoun t b oth the in terconnectivit y as w ell as the closeness of the clusters esp ecially the in ternal c haracteristics of the clusters themselv es
 CHAMELEON determines the similarit y b et w een eac h pair of clusters C and C according to their r elative i j interc onne ctivity RI ( C ) and their r elative closeness RC ( C )
 
 ++++
 
 For convenience we will refer to these two types of measures as classiï¬cationoriented and similarityoriented respectively
 Point p p p p p p p p p p Point p p p p p p p p p p More generally we can use any of the measures for binary similarity that we saw in Section
 We repeat the deï¬nitions of the four quantities used to deï¬ne those similarity measures but modify our descriptive text to ï¬t the current context
 <eos>","CHAMELEON determines the similarity between each pair of clusters C and C according to their relative interconnectivity RI(C) and their relative closeness RC(C). In other words, cluster similarity is based on the number of points from different clusters who have neighbors in common. To determine the pairs of most similar sub-clusters, it takes into account both the interconnectivity as well as the closeness of the clusters, especially the internal characteristics of the clusters themselves. More generally, we can use any of the measures for binary similarity that we saw in Section. For convenience, we will refer to these two types of measures as classification-oriented and similarity-oriented respectively. We repeat the definitions of the four quantities used to define those similarity measures but modify our descriptive text to fit the current context."
merged_topic_0_0,"postfix, scanned, operator, expression, character, postï¬x, inï¬x, example, convert","<task:merge> <sos>
 Examples Infix to postfix using stack
 If the scanned character is operand then it will be added to postfix expression
 If the priority of scanned operator is less than or equal to that of stack operator then the stacked operator is popped from stack and added to expression while scanned operator is pushed to stack If the scanned character is right parenthesis then operators from stack are popped to postfix expression until left parenthesis is not encountered
 
 ++++
 
 Expression evaluation a Inï¬x to postï¬x conversion b Postï¬x expression evaluation Applications of Stack See class notes for
 Thus i j k l is equivalent to ( ( i j ) k ) l Inï¬x to Postï¬x conversion using stack Algorithm Inï¬x to Postï¬x conversion Input An inï¬x expression exp Output exp in postï¬x form Steps
 For each character c in exp
 If c is an operand concatenate c to the postï¬x expression
 Else if c is an open parenthesis push it into the stack
 While the stack is not empty and precedence of c is less than or equal to that of the top ( and the top at the stack is not an open parenthesis )
 Return the postï¬x expression Inï¬x to Postï¬x conversion Example Convert A B C to postï¬x Inï¬x to Postï¬x conversion Example Convert A B C to postï¬x Inï¬x to Postï¬x conversion Example Convert A B C to postï¬x Inï¬x to Postï¬x conversion Example Convert A B C to postï¬x Example Convert A ( B C ) ( D E F ) to postï¬x Example Convert A ( B C ) ( D E F ) to postï¬x Inï¬x to Postï¬x conversion Exercise Convert the following inï¬x expression to postï¬x ( A B C D ) E ( F G ) H Evaluating postï¬x expressions The main idea is to Read the tokens onebyone from left to right Push the token into the stack if it is an operand if it is an operator pop two operands from the stack and perform the operation then push the result into the stack
 Evaluating postï¬x expressions Algorithm steps
 <eos>","Infix to postfix conversion using a stack is a key technique in expression evaluation, with a general algorithm that takes an infix expression as input and generates its postfix form. For each character scanned in the expression: if it is an operand, it is added to the postfix expression; if it is an open parenthesis, it is pushed onto the stack. If the scanned character is an operator, and while the stack is not empty and its precedence is less than or equal to that of the operator at the top of the stack (provided the top is not an open parenthesis), the stacked operator is popped and added to the postfix expression before the scanned operator is pushed onto the stack. If the scanned character is a right parenthesis, operators are popped from the stack and added to the postfix expression until a left parenthesis is encountered. Upon completion, the resulting postfix expression is returned, illustrating equivalences such as `i j k l` to `( ( i j ) k ) l`. Beyond conversion, stacks are also crucial for evaluating postfix expressions; this involves reading tokens from left to right where, if a token is an operand, it is pushed onto the stack, and if it is an operator, two operands are popped, the operation is performed, and the result is pushed back. Numerous examples of infix to postfix conversion exist, including converting expressions like 'A B C' or 'A ( B C ) ( D E F )' to postfix, as well as exercises like converting '( A B C D ) E ( F G ) H' to postfix."
merged_topic_0_1,"postfix, scanned, operator, expression, character, postï¬x, inï¬x, example, convert","<task:merge> <sos>
 NOTE use parenthesis for matching only do not add it to expression Infix to postfix using stack Algorithm POLISH ( Q P )
 
 ++++
 
 For each token t in the postï¬x expression
 Result Pop from the stack Return Result Example Evaluate the postï¬x expression Example Evaluate the postï¬x expression Example Evaluate the postï¬x expression V l f Evaluating postï¬x expressions Exercise Evaluate the following postï¬x expression ABCDEF Where A B F C D E
 <eos>","NOTE: Use parenthesis for matching only; do not add them to the expression. This applies to algorithms such as Infix to Postfix conversion using a stack, exemplified by Algorithm POLISH (Q P). When evaluating postfix expressions, for each token 't' in the postfix expression, a result is obtained by popping from the stack, and this result is then returned. Examples and exercises for evaluating postfix expressions include 'V l f' and 'ABCDEF', where A, B, F, C, D, E are elements within the expression."
merged_topic_1_0,"left, right, invalid, expression, parentheses, postï¬x, inï¬x, example, convert","<task:merge> <sos>
 Fully parenthesize the expression
 Replace each right parenthesis by the corresponding operator
 Erase all left parentheses
 Examples Transforming infix to prefix By hand Fully parenthesizemoveerase method Fully parenthesize the expression
 Replace each left parenthesis by the corresponding operator
 Scan the infix expression from left to right
 until a left parenthesis is encountered
 ( b ) Remove the left parenthesis
 Scan the expression from left to right to find an operator
 Locate ( underline ) the last two preceding operands and combine them using this operator
 Add a right parenthesis ) at the end of P
 Every right parentheses is preceded by a matching left parentheses
 Example ( ab ( cd ) e invalid a ( ( cd ) ef ) ) invalid ) ab ( invalid ( ab ) ) cd invalid Matching the nested parentheses Algorithm Input the arithmetic expression
 Scan the expression left to right characterbycharacter
 
 ++++
 
 Expression evaluation a Inï¬x to postï¬x conversion b Postï¬x expression evaluation Applications of Stack See class notes for
 Thus i j k l is equivalent to ( ( i j ) k ) l Inï¬x to Postï¬x conversion using stack Algorithm Inï¬x to Postï¬x conversion Input An inï¬x expression exp Output exp in postï¬x form Steps
 For each character c in exp
 If c is an operand concatenate c to the postï¬x expression
 Else if c is an open parenthesis push it into the stack
 While the stack is not empty and precedence of c is less than or equal to that of the top ( and the top at the stack is not an open parenthesis )
 <eos>","Methods for transforming expressions include the fully parenthesize-move-erase method for converting infix to prefix, which involves fully parenthesizing the expression, replacing each right parenthesis by its corresponding operator, and erasing all left parentheses. When transforming infix to prefix by hand, scanning the infix expression from left to right until a left parenthesis is encountered involves removing that left parenthesis. Subsequently, scanning the expression from left to right to find an operator allows for locating and underlining the last two preceding operands and combining them using this operator, then adding a right parenthesis at the end of P. It is essential that every right parenthesis is preceded by a matching left parenthesis. Examples of invalid parenthesization include `( ab ( cd ) e invalid`, `a ( ( cd ) ef ) ) invalid`, and `) ab ( invalid`. An algorithm for matching nested parentheses takes an arithmetic expression as input and scans it left to right character by character. Expression evaluation often involves Infix to Postfix conversion and Postfix expression evaluation, both of which are applications of stacks. For instance, `i j k l` is equivalent to `( ( i j ) k ) l`. The Infix to Postfix conversion using a stack algorithm takes an infix expression 'exp' as input and outputs 'exp' in postfix form. Steps include processing each character 'c' in 'exp': if 'c' is an operand, it is concatenated to the postfix expression; else if 'c' is an open parenthesis, it is pushed into the stack. This process continues while the stack is not empty and the precedence of 'c' is less than or equal to that of the top element (and the top at the stack is not an open parenthesis)."
merged_topic_2_0,"postfix, scanned, operator, expression, character, popped, pop, concatenate, operand, stack","<task:merge> <sos>
 Examples Infix to postfix using stack
 If the scanned character is operand then it will be added to postfix expression
 If the priority of scanned operator is less than or equal to that of stack operator then the stacked operator is popped from stack and added to expression while scanned operator is pushed to stack If the scanned character is right parenthesis then operators from stack are popped to postfix expression until left parenthesis is not encountered
 NOTE use parenthesis for matching only do not add it to expression Infix to postfix using stack Algorithm POLISH ( Q P )
 
 ++++
 
 Initialize a stack Inï¬x to Postï¬x conversion using stack ( Contd )
 Repeat pop the stack and concatenate the popped character to the postï¬x expression until an open parenthesis is encountered
 Pop the stack and concatenate the popped operator to the postï¬x expression
 Push c End if Inï¬x to Postï¬x conversion using stack ( Contd )
 The result of the expression will be the content of the stack
 If t is an operand push it into the stack
 Operand pop from the stack
 Push the result into the stack
 <eos>","Infix to postfix conversion, exemplified by algorithms such as POLISH (Q P), utilizes a stack. The process begins by initializing a stack. When a scanned character is an operand, it will be added to the postfix expression, or it may be pushed into the stack. If the scanned character is an operator whose priority is less than or equal to that of a stack operator, then the stacked operator is popped from the stack and added to the expression, while the scanned operator is subsequently pushed to the stack. Should the scanned character be a right parenthesis, operators are popped from the stack to the postfix expression until a left parenthesis is encountered. A crucial note is to use parentheses for matching only, and not to add them to the expression. Throughout the conversion, the stack is repeatedly popped, and the popped character is concatenated to the postfix expression, often continuing until an open parenthesis is encountered. Specific operations also include popping an operand from the stack, pushing a character 'c', and ultimately pushing the final result into the stack. The content of the stack then represents the result of the expression."
merged_topic_3_0,"stack, encountered, operator, postï¬x, inï¬x, expression, example, convert","<task:merge> <sos>
 If the priority of scanned operator is greater than that of stack operator then the scanned operator is also pushed to stack b
 PUSH ( on to STACK and add ) to the end of Q Scan Q from left to right and Repeat steps to for each element of Q until the STACK is empty
 If an operand is encountered add it to P
 If an operator is encountered then ( a ) Repeatedly POP from STACK and add to P each operator ( On the TOP of STACK ) which has the same precedence as or higher precedence than
 Scan P from left to right and Repeat Step and for each element of P until the sentinel ) is encountered
 If an operand is encountered put it on STACK
 if the stack is nonempty pop the stack item and continue scanning
 if expression end examine the status of the stack if the stack is empty then the expression is correct
 
 ++++
 
 Expression evaluation a Inï¬x to postï¬x conversion b Postï¬x expression evaluation Applications of Stack See class notes for
 Thus i j k l is equivalent to ( ( i j ) k ) l Inï¬x to Postï¬x conversion using stack Algorithm Inï¬x to Postï¬x conversion Input An inï¬x expression exp Output exp in postï¬x form Steps
 For each character c in exp
 If c is an operand concatenate c to the postï¬x expression
 Else if c is an open parenthesis push it into the stack
 While the stack is not empty and precedence of c is less than or equal to that of the top ( and the top at the stack is not an open parenthesis )
 <eos>","Expression evaluation encompasses Infix to Postfix conversion and Postfix expression evaluation, which are applications of Stack. The algorithm for Infix to Postfix conversion using a stack takes an infix expression `exp` as input and produces `exp` in postfix form. For each character `c` in `exp`: If `c` is an operand, it is concatenated to the postfix expression or added to P. Else if `c` is an open parenthesis, it is pushed into the stack. When an operator is encountered, if the priority of the scanned operator is greater than that of the stack operator, then the scanned operator is also pushed to the stack. Otherwise, operators are repeatedly POPped from STACK and added to P, specifically each operator on the TOP of STACK which has the same precedence as or higher precedence than the scanned operator, continuing while the stack is not empty and the top of the stack is not an open parenthesis. Additionally, PUSH `(` onto STACK and add `)` to the end of Q; then Scan Q from left to right and Repeat steps for each element of Q until the STACK is empty. Following this, Scan P from left to right and Repeat Step and for each element of P until the sentinel `)` is encountered. During this scan, if an operand is encountered, it is put on STACK. If the stack is nonempty, the stack item is popped and scanning continues. Upon reaching expression end, the status of the stack is examined; if the stack is empty, then the expression is considered correct. For example, `i j k l` is equivalent to `((i j) k) l`."
merged_topic_0_0,"constant, symbolic, define, defines, evaluable, constants, numeric, sequence","<task:merge> <sos>
 The definition section defines all symbolic constant
 Constant Tokens Keywords Constant Strings Operators Identifiers Special Symbol Constant is referring to fixed values that do not change during the execution of a program
 CONSTANT Numeric constant Character Constant Variable A variable is a data name that may be used to store a data value
 Defining Symbolic constant Syntax define symbolicname value of constant Eg define pi define max The following rules apply todefine statement which defines a symbolic constant
 valuevalue are constants or constant expressions ( evaluable to an integer constant ) and are known as case labels
 ( ) Fortran Constant A number on a string of FORTRAN characters is called a constant
 
 ++++
 
 The definition defines all the symbolic constants
 They are often referred to collectively as numeric _ type constants
 Symbolic Constants A symbolic constant is a name that substitutes for a sequence of characters
 Thus a symbolic constant allows a name to appear in place of a numeric constant a character constant or a string
 When a program is compiled each occurrence of a symbolic constant is replaced by its corresponding character sequence
 Symbolic constants are usually defined at the beginning of a program
 The symbolic constants may then appear later in the program in place of the numeric constants character constant etc that the symbolic constants represent
 A symbolic constant is defined by writing define name text where name represents a symbolic name typically written in uppercase letters and text represents the sequence of characters that is associated with the symbolic name
 What is Symbolic constant differentiate between keywords and identifier
 <eos>","The definition section defines all symbolic constants. A symbolic constant is a name that substitutes for a sequence of characters, thus allowing a name to appear in place of a numeric constant, a character constant, or a string. Constants refer to fixed values that do not change during the execution of a program and can include Constant Tokens, Keywords, Constant Strings, Operators, Identifiers, and Special Symbols. Symbolic constants are often referred to collectively as numeric _ type constants. A symbolic constant is defined by writing `define name text`, where 'name' represents a symbolic name, typically written in uppercase letters, and 'text' represents the sequence of characters associated with the symbolic name, such as `define pi` or `define max`. The following rules apply to such `define` statements, which define a symbolic constant. Symbolic constants are usually defined at the beginning of a program and may then appear later in the program in place of the numeric constants, character constants, etc., that the symbolic constants represent. When a program is compiled, each occurrence of a symbolic constant is replaced by its corresponding character sequence. While Numeric constant and Character Constant are types of constants, a variable is a data name that may be used to store a data value. In Fortran, a number on a string of Fortran characters is called a constant."
merged_topic_1_0,"pointer, operator, subtract, integers, operators, shift, regarded, exponential","<task:merge> <sos>
 C operators can be classified into a number of categories
 Special operators C support some special operators of interest such as comma operator sizeof operator pointer operator ( and ) and member selection operator (
 Example X ( int ) ie is converted to integer by truncation Operator precedence and associativity Precedence is used to determine how an expression involving more than one operator is evaluated
 Example int a int pa Pointer Expression C allows us to add integers to or subtract integers from pointers as well as to subtract one pointer from another
 Pppp In addition to arithmetic operations discussed pointer can also be compared using the relational operators
 We may no use pointer in division or multiplication
 Pointer increment and scalar factor When we increment a pointer its value is increased by the length of the data type that it points to
 
 ++++
 
 C includes a number of operators which fall into several different categories such as arithmetic operators unary operators rational and logical operators assignment operators and the conditional operators bitwise operator
 Operators Arithmetic Operators There are five arithmetic operators in C They are Operators Purposes Addition Subtraction Multiplication Division remainder after integer division ( also called modulus operator ) There is no exponential operator in C However there is a library function ( pow ) to carry out exponential
 The relational operators in C are listed as Operators Meaning greater than greater than or equal to Equality equal to
 false In addition to the relational and equality operators C also includes the unary operator
 Logical operators C contains three logical operators Operator Meaning and or
 Operator is referred as logic and the operator is referred as logic or
 C contains the following five additional assignment operators and
 a f a shift shift shift g Special Operators C supports some special operators such as comma operator size of operator pointer operator ( and ) and member selection operators
 Write the general form of ternary operator and explain with example
 What are the various types of operators used in C language
 Describe unary binary and ternary operators with examples
 <eos>","C operators can be classified into a number of categories, including arithmetic, unary, relational, logical, assignment, conditional, and bitwise operators. There are five arithmetic operators in C: Addition, Subtraction, Multiplication, Division, and the remainder after integer division (also called modulus operator); C does not have an exponential operator, but a library function (pow) is available for exponential operations. Relational operators in C include those for greater than, greater than or equal to, and equality. C also includes unary operators and contains three logical operators: 'and' (referred to as logic and) and 'or' (referred to as logic or). Additionally, C contains various assignment operators. C supports some special operators such as the comma operator, sizeof operator, pointer operator ( and ), and member selection operators; for example, X ( int ) ie is converted to integer by truncation. C allows us to add or subtract integers from pointers, as well as subtract one pointer from another. Pointers can also be compared using relational operators, but they cannot be used in division or multiplication. When a pointer is incremented, its value is increased by the length of the data type that it points to. Operator precedence and associativity are used to determine how an expression involving more than one operator is evaluated."
merged_topic_2_0,"label, jump, goto, forward, backward, statement, illegible, colon","<task:merge> <sos>
 In both the cases the control is transferred subsequently to the statementx
 The goto requires a label in order to identify the place where the branch is to be made
 The label is placed immediately before the statement where the control is to be transferred
 The general forms of goto and label statements are shown below goto label label statement label statement goto label Forward jump Backward jump Note that a goto breaks the normal sequential execution of the program
 If the label is before the statement goto label a loop will be formed and some statements will be executed repeatedly
 Such jump is known as a backward jump
 On the other hand if the label is placed after the goto label some statements will be skipped and the jump is known as a forward jump
 Another use of the goto statement is to transfer the control out of the loop ( or nested loop ) when certain peculiar conditions are encountered
 Avoiding goto When a goto is used many compilers generate a less efficient code
 Jump Statement The jump statement unconditionally transfers program control one point to another point in a program
 
 ++++
 
 The goto statement transfers the control to the labeled statement somewhere in the current function
 The general syntax of goto statement goto label label statement Here label is any valid C identifier and it is followed by a colon
 Whenever the statement goto label is encountered the control is transferred to the statement that is immediately after the label
 Generally the use of goto statement is avoided as it makes program illegible and unreliable
 <eos>","The jump statement, specifically the `goto` statement, unconditionally transfers program control from one point to another within a program. This transfer is made to a labeled statement somewhere in the current function. The `goto` statement requires a label to identify the target location, which is any valid C identifier followed by a colon. This label is placed immediately before the statement to which the control is to be transferred. The general forms of `goto` and `label` statements are `goto label` and `label: statement`. Whenever the `goto label` statement is encountered, control is transferred to the statement that is immediately after the label. Note that a `goto` breaks the normal sequential execution of the program. If the label is placed before the `goto label` statement, a loop will be formed and some statements will be executed repeatedly; such a jump is known as a backward jump. On the other hand, if the label is placed after the `goto label` statement, some statements will be skipped, and this jump is known as a forward jump. Another use of the `goto` statement is to transfer control out of a loop (or nested loop) when certain peculiar conditions are encountered. Generally, the use of the `goto` statement is avoided because it makes programs illegible and unreliable, and many compilers generate less efficient code when it is used."
merged_topic_3_0,"satisfied, loop, body, looping, condition, executed, statements","<task:merge> <sos>
 Decision making and looping Looping ( or iteration ) is the process of executing a sequence of statements until some condition for termination of loop is satisfied
 If the conditions are not satisfied then the body of the loop will not be executed
 If the condition is true the program continues to evaluate the body of the loop once again
 If the condition is true the body of loop is executed otherwise the loop is terminated and execution continues with the statement that immediately follows the loop
 If the condition is satisfied the body of the loop is again executed
 
 ++++
 
 This ensures that the algorithm will ultimately terminate
 So a loop may be defined as a block of statements which are repeatedly executed for a certain number of times or until a particular condition is satisfied
 The control statement in loop decides whether the body is to be executed or not
 After the execution again the condition is checked and if it is found to be true then again the statements in the body of loop are executed
 The body of this loop may contain a single statement or a block of statements
 If the condition is true then again the loop body is executed and this process continues until the condition becomes false
 Instead the remaining loop statements are skipped and the computation proceeds directly to the next pass through the loop
 <eos>","Decision making and looping involves iteration, which is the process of executing a sequence of statements until a termination condition is satisfied. A loop may also be defined as a block of statements that are repeatedly executed for a certain number of times or until a particular condition is met. The control statement within a loop determines whether its body will be executed. If the condition is true, the body of the loop is executed; if the conditions are not satisfied, the body of the loop will not be executed, and the loop is terminated with execution continuing at the statement immediately following it. After execution of the loop body, the condition is checked again. If it is found to be true, the program continues to evaluate and execute the statements in the body of the loop once again. This process continues until the condition becomes false, which ensures the algorithm will ultimately terminate. The body of a loop can contain either a single statement or a block of statements. Additionally, in some cases, the remaining statements within a loop's current pass may be skipped, and computation proceeds directly to the next pass through the loop."
merged_topic_4_0,"getchar, character, formatted, putchar, input, getche, putch","<task:merge> <sos>
 Managing input and output operation Reading a character Reading a single character can be done by using the function getchar
 The getchar takes the following form variable_namegetchar ( ) Variable_name is a valid C name that has been declared as char type
 When this statement is encountered the computer waits until a key is pressed and then assigns this character as a value to getchar function
 Since getchar is used on the right hand side of an assignment statement the character value of getchar is in turn assigned to the variable name on the left
 For example char name namegetchar ( ) The getchar ( ) function accept any character keyed in
 This could create problem when we use getchar ( ) in a loop interactively
 Writing a character Like a getchar there is a analogous function putchar for writing characters one at a time to the terminal
 It takes the form as shown below putchar ( variable_name ) where variable_name is a type char variable containing a character
 
 ++++
 
 getchar ( ) and putchar ( ) The getchar ( ) function reads a character from a standard input device
 The general syntax is character_variable getchar ( ) where character_variable is a valid C char type variable
 When this statement is encounted the computer waits until a key is pressed and assign this character to character_variable
 The putchar ( ) function displays a character to the standard output device
 The general syntax of putchar ( ) function is putchar ( character_variable ) where character_variable is a char type variable containing a character
 getch ( ) getche ( ) and putch ( ) The functions getch ( ) and getche ( ) reads a single character the instant it is typed without waiting for the enter key to be hit
 The difference between them is that getch ( ) reads the character typed without echoing it on the screen while getche ( ) reads the character and echoes ( displays ) it on the screen
 <eos>","Managing input and output operations involves reading and writing characters. For reading a single character, the `getchar()` function is used, which reads a character from a standard input device. The general syntax for `getchar()` is `variable_name = getchar()`, where `variable_name` is a valid C name that has been declared as `char` type. When this statement is encountered, the computer waits until a key is pressed, and then assigns this character as a value to the `getchar()` function, which is in turn assigned to the `variable_name` on the left-hand side of the assignment statement. For example, `char name; name = getchar();`. The `getchar()` function accepts any character keyed in, which could create a problem when used interactively in a loop. Analogous to `getchar()`, the `putchar()` function is used for writing or displaying characters one at a time to the terminal or standard output device. Its general syntax is `putchar(variable_name)`, where `variable_name` is a `char` type variable containing a character. Furthermore, the functions `getch()` and `getche()` also read a single character, but they do so the instant it is typed without waiting for the Enter key to be hit. The key difference between them is that `getch()` reads the character typed without echoing it on the screen, while `getche()` reads the character and echoes (displays) it on the screen."
merged_topic_4_1,"getchar, character, formatted, putchar, input, getche, putch","<task:merge> <sos>
 For example answerY putchar ( answer ) this statement display the character Y include include void main ( ) char name char ch int i printf ( nEnter the name ) while ( ( chgetchar ( ) ) n ) nameich i namei printf ( nThe name is s name ) getch ( ) Formatted input Formatted input refers to an input data that has been arranged in particular format
 For example scanf ( f f f x y z ) Inputting Character Strings Scanf can input strings containing more than one character
 Following are the specifications for reading character strings ws or wc Formatted output The printf statement provides certain features that can be effectively exploited to control the alignment and spacing of printout on the terminals
 Characters that will be printed on the screen as they appear
 Reading line of text scanf with s or ws can read only string without whitespaces
 that can be used to read a line containing a variety of characters including whitespace
 
 ++++
 
 The general syntax of getch ( ) character_variable getch ( ) Similarly the syntax of getch ( ) is character_variable getche ( ) The putch ( ) function prints a character onto the screen
 The general syntax is putch ( character_variable ) These three functions are defined under the standard library function conioh and hence we should include this in our program using the instruction include include main ( ) char ch ch clrscr ( ) printf ( Enter first character ) ch getch ( ) printf ( n Enter second character ) ch getche ( ) printf ( n First character ) putch ( ch ) printf ( n Second character ) putch ( ch ) Output Enter first character Enter second character b First character a Second character b Since the first input is taken using getch ( ) function the character a entered is not echoed
 However using getche ( ) function we can see what we have typed
 The last getch ( ) simply takes a character but doesnot store it anywhere
 <eos>","Formatted input refers to input data that has been arranged in a particular format; for example, `scanf(""%f %f %f"", &x, &y, &z)` can be used. `scanf` can also input strings containing more than one character, with specifications like `%s` or `%wc` for reading character strings. However, when reading a line of text, `scanf` with `%s` or `%ws` can only read strings without whitespaces, implying other methods are needed for lines containing a variety of characters including whitespace. Formatted output, conversely, is managed by the `printf` statement, which provides certain features that can be effectively exploited to control the alignment and spacing of printout on terminals, printing characters on the screen as they appear. For character-specific input and output, functions such as `putchar()`, `putch()`, `getchar()`, `getch()`, and `getche()` are available. For example, `putchar(answer)` is a statement that displays the character Y. The `putch()` function also prints a character onto the screen, with its general syntax being `putch(character_variable)`. The general syntax for `getch()` is `character_variable = getch()`, and similarly for `getche()`, it is `character_variable = getche()`. These three functions (`getch`, `getche`, `putch`) are defined under the standard library function `conio.h`, and therefore require `include <conio.h>` in a program. An illustrative example using these functions is shown in a typical `main` function: `main() { char ch; clrscr(); printf(""Enter first character: ""); ch = getch(); printf(""\n Enter second character: ""); ch = getche(); printf(""\n First character: ""); putch(ch); printf(""\n Second character: ""); putch(ch); }`. The output from this example, for instance, ""Enter first character (user types 'a') Enter second character b (user types 'b') First character a Second character b"", demonstrates that since the first input is taken using `getch()`, the character 'a' entered is not echoed, whereas using `getche()`, the typed character 'b' is echoed, allowing the user to see what they have typed. Another code snippet illustrates `getchar()` for string input: `void main() { char name[100]; char ch; int i = 0; printf(""\nEnter the name: ""); while ((ch = getchar()) != '\n') { name[i] = ch; i++; } name[i] = '\0'; printf(""\nThe name is: %s"", name); getch(); }`. The `getch()` function, particularly when used at the end of `main()`, simply takes a character but does not store it anywhere, typically serving to pause the console output."
merged_topic_4_2,"getchar, character, formatted, putchar, input, getche, putch","<task:merge> <sos>
 For example char name scanf ( nname ) printf ( sname ) Note we can use getchar and gets functions to take input to character array variable
 For example to getchar look at unformatted input example
 
 ++++
 
 gets ( ) and puts ( ) The gets ( ) function is used to read a string of text containing whitespaces until a newline character is encountered
 The general syntax of gets ( ) is gets ( string_variable ) The puts ( ) function is used to display the string onto the terminal
 The general syntax of puts ( ) is puts ( string _variable ) This prints the string value of string_variable and then moves the cursor to the beginning of the next line on the screen
 ( PU ) Distinguish between getc ( ) a getchar ( )
 <eos>","For example, when working with character arrays, one might use `scanf(nname)` for input and `printf(sname)` for output. Note that `getchar` and `gets` functions can also be used to take input into character array variables; specifically for `getchar`, one can look at unformatted input examples. Regarding `gets()` and `puts()`: The `gets()` function is used to read a string of text containing whitespaces until a newline character is encountered, with its general syntax being `gets(string_variable)`. The `puts()` function, on the other hand, is used to display the string onto the terminal. Its general syntax is `puts(string_variable)`, and it prints the string value of `string_variable` before moving the cursor to the beginning of the next line on the screen. Finally, it is important to distinguish between `getc()` and `getchar()`."
merged_topic_5_0,"marks, student, total, float, highest, grade, roll, remarks","<task:merge> <sos>
 of a student and marks obtained by him in subjectsDeclare array to hold the data of students
 Pass this to a function that displays the marks of student who has a highest total marks
 
 ++++
 
 M Singh ) printf ( n Names name ) name ( char ) realloc ( ame ) strcpy ( namecaptain B M Singh ) pritf ( nNamesname ) getch ( ) output Name B M Singh Name Captain B M Singh Program to read marks obtained by ditstudent calculate sum average using pointer include include include main ( ) int n i float p sum avg clrscr ( ) printf ( n How Many Students aretheret ) scanf ( dn ) printf ( n Enter marks of each studentsn ) p ( float ) malloc ( nsizeof ( float ) ) for ( i in i ) scanf ( f ( pi ) ) avgsumn printf ( The average marks of ) for ( i in i ) printf ( f t ( p i ) ) printf ( f t is avg ) free ( P ) getch ( ) output How many students are there
 Enter marks of each student The average marks of is write a pg to read an array of n integers using dynamic memory allocation and display the largest and smallest element int main ( ) int n i intnummaxmin clrscr ( ) printf ( n enter number of elements in our array ) scanf ( dn ) num ( int ) calloc ( nsizeof ( int ) ) printf ( nEnterd integersn ) for ( i i ( numi ) ) min ( numi ) printf ( n the maximum numberdmax ) printf ( n the minimum numberdmin ) getch ( ) output Enter numbers of element in our array Enter integers The maximum number The minimum number Some Important Questions What are the relationship between arrays and pointer
 <eos>","A program can be designed to manage student data, including marks obtained in various subjects. This involves declaring an array to hold the data for students and passing it to a function that displays the marks of the student with the highest total marks. Additionally, a program can be developed to read marks obtained by a student, calculate their sum and average using pointers, and implement dynamic memory allocation (e.g., using `malloc` for a float array). This process typically involves prompting for the number of students and their individual marks, then displaying the calculated average marks. Furthermore, a program can be written to read an array of 'n' integers using dynamic memory allocation (e.g., `calloc`), and subsequently display both the largest and smallest elements present in that array. Such programming tasks might also encompass operations like managing names, potentially utilizing dynamic memory functions such as `realloc` and string copying functions like `strcpy` for names such as 'M Singh' or 'Captain B M Singh'. An important question to consider in these programming contexts is the relationship between arrays and pointers."
merged_topic_5_1,"marks, student, total, float, highest, grade, roll, remarks","<task:merge> <sos>
 include include struct student int roll int marks int total void input ( struct student s ) int ij for ( iii ) printf ( nEnter the roll number of student ) scanf ( dsiroll ) printf ( nEnter marks for subjects ) sitotal for ( jjj ) scanf ( dsimarksj ) sitotalsitotalsimarksj void display ( struct student s ) int ilocationmax maxstotal location for ( iii ) if ( maxsitotal ) serching highest marks location maxsitotal locationi printf ( nRecord of student who score highest marks ) printf ( nRoll number of studentdslocationroll ) printf ( nEnter marks for subjects ) for ( iii ) printf ( nMarks in d subjectdislocationmarksi ) void main ( ) struct student civil input ( civil ) display ( civil ) getch ( ) Create a structure STUDENT containing name symbol number name of subjects mark of each subject and total mar as its members
 Write a program that uses this structure and reads data for a student and gives the total marks as the output
 
 ++++
 
 WAP using structure to read and display the data entered by the user include main ( ) struct student char name int roll float marks char remark struct student s clrsc ( ) printf ( enter name t ) gets ( sname ) printf ( In enter rollt ) scanf ( d sroll ) printf ( n enter marks t ) scanf ( f smarks ) printf ( enter remarks p for pass or f for fail t ) sremark getch ( ) printf ( nn The students information is n ) printf ( Student Name ItItIt Roll It Marks It Remarks ) printf ( n n ) printf ( sttdtftc sname sroll smarks sremark ) getch ( ) output enter name Ram Singh enter roll Enter remark p for pass or f for fail P The students information is Student Name Roll Marks Remarks Ram Singh P Array of Structure Like array of int float or char type there may be array of structure
 <eos>","A program can be written to use a structure for reading and displaying user-entered student data, and to output total marks. This involves defining a `struct student` which can contain members such as `char name`, `int roll`, `int symbol number`, `name of subjects`, `int marks` (possibly an array for multiple subjects), a `float marks` (for a single subject's score), `int total` (sum of marks), and a `char remark` (e.g., 'p' for pass or 'f' for fail). Within the `main()` function, typically after `include` directives, a `struct student` variable (e.g., `civil` or `s`) is declared. An `input` function, like `void input(struct student s)` with `int i` and `int j` variables, handles data entry. It prompts the user to ""Enter the roll number of student"" (`scanf(""%d"", &s.roll)`), ""Enter marks for subjects"", and uses a loop (e.g., `for (j=0; j<NUM_SUBJECTS; j++)`) to `scanf(""%d"", &s.marks[j])`, summing these to `s.total` (as `s.total = s.total + s.marks[j]`). Alternatively, input can involve prompts such as ""enter name"", reading `s.name` with `gets`, ""enter roll"" (`scanf(""%d"", &s.roll)`), ""enter marks"" (`scanf(""%f"", &s.marks)`), and ""enter remarks p for pass or f for fail"" with `s.remark`. A `display` function, such as `void display(struct student s)` with `int i`, `int location`, and `max_total` variables, is then used to present student information. This can print ""The student's information is"" with headers like ""Student Name"", ""Roll"", ""Marks"", and ""Remarks"", followed by their corresponding values (`s.name`, `s.roll`, `s.marks`, `s.remark`). The display function also includes logic for ""searching highest marks location"" by comparing `s.total` values to find a `max` and its `location`. Upon finding it, it prints the ""Record of student who score highest marks"", including their ""Roll number"" and ""Marks in d subject"" for each subject. An example interaction shows `output enter name Ram Singh enter roll Enter remark p for pass or f for fail P` resulting in `The students information is Student Name Roll Marks Remarks Ram Singh P`. `getch()` is commonly used to pause program execution. Furthermore, similar to arrays of `int`, `float`, or `char` types, there can be an `Array of Structure`."
merged_topic_6_0,"constant, real, point, fractional, mantissa, base, constants, integer, rarely, decimal","<task:merge> <sos>
 Number are called numeric constant
 etc are some numeric constants
 There are two types of Numeric Constant
 Real Constant INTEGER Constant Integer written without decimal point is called fixed point constant or integer constants
 No other character should occur in fixed point constant
 Real Constant Any number written with one decimal point is called a floating point constant of real constant
 A real constant can be expressed in any one of the following two forms i ) Fractional form ii ) Exponential form The following rules apply for the real constant in fractional form
 A real constant is written in the decimal form with the digitals and the decimal point
 No special symbols such as etc are allowed in a real constant
 The general form of the exponential floating point constant is Mantissa E exponent
 The mantissa must be valid real constant in fractional form
 All the rules of the fractional form applied to the mantissa
 
 ++++
 
 Integer and floating point constants represent numbers
 Integer Constants An integer constant is an integervalued number
 Integer ( number ) constants can be written in three different number systems decimal ( base ) octal ( base ) and hexadecimal ( base )
 Beginning programmers rarely however use anything other than decimal integer constants
 <eos>","Numbers are called numeric constants. Integer and floating point constants represent numbers and are the two main types of numeric constants. Integer constants, also known as fixed-point constants, are integer-valued numbers written without a decimal point, and no other character should occur in them. These constants can be expressed in three different number systems: decimal (base), octal (base), and hexadecimal (base), although beginning programmers rarely use anything other than decimal integer constants. A real constant, also called a floating-point constant, is any number written with one decimal point. Real constants can be expressed in either fractional form or exponential form. When in fractional form, a real constant is written in the decimal form with digits and a decimal point, and no special symbols are allowed. The general form of the exponential floating-point constant is Mantissa E exponent, where the mantissa must be a valid real constant in fractional form, and all rules of the fractional form apply to the mantissa."
merged_topic_7_0,"testcondition, body, continues, loop, process, executed, condition, statements","<task:merge> <sos>
 Body of the loop
 The testcondition is evaluated and if the condition is true then the body of the loop is executed
 After execution of the body the test condition is once again evaluated and if it is true the body is executed once again
 This process of repeated execution of the body continues until the testcondition finally becomes false and the control is transferred out of the loop
 Body of the loop Test condition
 This process continues as long as the condition is true
 Since the testcondition is evaluated at the bottom of the loop the dowhile construct provides an exitcontrolled loop and therefore the body of the loop is always executed at least once
 The value of the control variable is tested using the testcondition
 This process continues till the value of the control variable fails to satisfy the testcondition
 
 ++++
 
 This ensures that the algorithm will ultimately terminate
 So a loop may be defined as a block of statements which are repeatedly executed for a certain number of times or until a particular condition is satisfied
 The control statement in loop decides whether the body is to be executed or not
 After the execution again the condition is checked and if it is found to be true then again the statements in the body of loop are executed
 The body of this loop may contain a single statement or a block of statements
 If the condition is true then again the loop body is executed and this process continues until the condition becomes false
 Instead the remaining loop statements are skipped and the computation proceeds directly to the next pass through the loop
 <eos>","A loop may be defined as a block of statements which are repeatedly executed for a certain number of times or until a particular condition is satisfied. The body of this loop may contain a single statement or a block of statements. The control statement in a loop decides whether the body is to be executed or not. The testcondition, which tests the value of a control variable, is evaluated. If the condition is true, the body of the loop is executed. After execution of the body, or if remaining loop statements are skipped, the computation proceeds directly to the next pass through the loop, where the test condition is once again evaluated. This process of repeated execution continues as long as the condition remains true; if it is found to be true again, the statements in the body of the loop are executed again. This continues until the testcondition finally becomes false, and the control is transferred out of the loop, which ensures that the algorithm will ultimately terminate. Since the testcondition is evaluated at the bottom of the loop, the do-while construct provides an exit-controlled loop, and therefore the body of the loop is always executed at least once."
merged_topic_8_0,"constant, real, point, fractional, mantissa, unsigned, long, floating, appending, constants","<task:merge> <sos>
 Number are called numeric constant
 etc are some numeric constants
 There are two types of Numeric Constant
 Real Constant INTEGER Constant Integer written without decimal point is called fixed point constant or integer constants
 No other character should occur in fixed point constant
 Real Constant Any number written with one decimal point is called a floating point constant of real constant
 A real constant can be expressed in any one of the following two forms i ) Fractional form ii ) Exponential form The following rules apply for the real constant in fractional form
 A real constant is written in the decimal form with the digitals and the decimal point
 No special symbols such as etc are allowed in a real constant
 The general form of the exponential floating point constant is Mantissa E exponent
 The mantissa must be valid real constant in fractional form
 All the rules of the fractional form applied to the mantissa
 
 ++++
 
 An unsigned integer constant can be identified by appending the letter ( ) ( either upper or lowercase ) to the end of the constant
 Long integer constants may exceed the magnitude of ordinary integer constants but require more memory within the computer
 A long integer constant can be identified by appending the letter L ( either upper or lowercase ) to the end of the constant
 An unsigned long integer may be specified by appending the letters UL to the end of the constant
 However the U must preced the L Several unsigned and long integer constants are shown below Constant Number System U decimal ( unsigned ) L decimal ( long ) UL decimal ( unsigned long ) L octal ( long ) U octal ( unsigned ) XFFFFFUL hexadecimal ( unsigned long ) Floating Point Constants A floating point constant is a base number that contains either a decimal point or an exponent ( or both )
 Several valid floating point constants
 E e e The following are not valid floating point constants for the reason stated
 <eos>","Numbers are called numeric constants, and there are two types: Real Constants and Integer Constants. An Integer Constant, also known as a fixed point constant, is written without a decimal point, and no other character should occur within it. An unsigned integer constant can be identified by appending the letter U (either upper or lowercase) to the end of the constant. Long integer constants may exceed the magnitude of ordinary integer constants but require more memory within the computer, and are identified by appending the letter L (either upper or lowercase) to the end of the constant. An unsigned long integer may be specified by appending the letters UL to the end of the constant, with the U preceding the L. Examples of these include U decimal (unsigned), L decimal (long), UL decimal (unsigned long), L octal (long), U octal (unsigned), and XFFFFFUL hexadecimal (unsigned long). A Real Constant, also known as a floating point constant, is a base number that contains either a decimal point or an exponent (or both). Real constants can be expressed in two forms: fractional or exponential. For the fractional form, a real constant is written in decimal form with the digitals and the decimal point, and no special symbols are allowed. The general form of an exponential floating point constant is Mantissa E exponent, where the mantissa must be a valid real constant in fractional form, applying all the rules of the fractional form. There are several valid floating point constants, while others are deemed invalid for stated reasons."
merged_topic_9_0,"content, mode, file, existing, opens, exist, new, erased","<task:merge> <sos>
 File opening Modes The different types of file opening modes are r This mode open file for reading only
 w This mode open file for writing only
 a This mode open file for appending ( or adding ) data to it
 When the file is opened in this mode the file is opened with the current content safe
 r This mode opens the file for reading existing content writing new contents and modifying existing content of the file
 w This mode opens the file for writing new content reading them back and modifying the existing content of the file
 a This mode opens the file for appending new content to the end of file reading existing content from the file But can not modify existing contents
 
 ++++
 
 read write append etc )
 w ( write ) If the file dosent exist then this mode creates a new file for writing and if the file already exists then the previous data is erased and the new data entered is written to the file
 a ( append ) If the file doesnt exist then this mode creates a new file and if the file already exists then the new data entered is appended at the new data entered is appended at the end of existing data
 In this mode the data existing in the file is not erased as in w mode
 r ( read ) This mode is used for opening an existing file for reading purpose only
 The file to be opened must exist and the previous data of file is not erased
 w ( write read ) This mode is same as w mode but in this mode we can also read and modify the data
 If the file doesnt exist then a new file is created and if the file exists then previous data is erased
 r ( read write ) This mode is same as r mode but in this mode we can also write and modify existing data
 Since we can add new data and modify existing data so this mode is also called update mode
 <eos>","File opening Modes describe how a file can be accessed. The 'r' (read) mode is used for opening an existing file for reading purposes only; the file to be opened must exist, and its previous data is not erased. In contrast, the 'w' (write) mode opens a file primarily for writing. If the file doesn't exist, this mode creates a new file for writing, but if the file already exists, its previous data is erased before new data is written to the file. The 'a' (append) mode opens a file for appending or adding new data to it. When a file is opened in this mode, its current content is kept safe and is not erased, unlike in 'w' mode. If the file doesn't exist, this mode creates a new file, and if it already exists, new data is appended at the end of the existing data; existing content can also be read from the file, but existing contents cannot be modified. Furthermore, the 'w+' (write read) mode is similar to 'w' mode; if the file doesn't exist, a new file is created, and if it exists, its previous data is erased, but in this mode, data can also be read and modified. Lastly, the 'r+' (read write) mode is similar to 'r' mode, but we can also write and modify existing data, and since new data can be added and existing data modified, this mode is also called update mode."
merged_topic_9_1,"content, mode, file, existing, opens, exist, new, erased","<task:merge> <sos>
 Attempting to write a writeprotected file
 
 ++++
 
 at ( append read ) This mode is same as the a mode but in this mode we can also read the data stored in the file
 If the file doesnt exist a new file is created and if the file already exists then new data is appended at the end of existing data in this mode
 <eos>","Attempting to write a writeprotected file describes a specific scenario in file handling. Relatedly, the 'a+' (append read) mode functions the same as the 'a' mode, but also allows data stored in the file to be read. In this 'a+' mode, if the file doesn't exist, a new file is created, and if the file already exists, new data is appended at the end of existing data."
merged_topic_10_0,"section, closing, brace, executable, appear, userdefined, prototypes, ahead, function","<task:merge> <sos>
 This means that we can execute them directly but can not read or modify them
 This section also declares all the userdefined functions
 Every C program must have one main ( ) function section
 This section contains two parts declaration part and executable part
 The declaration part declares all the variables used in the executable part
 There is at least one statement in the executable part
 These two parts must appear between the opening and the closing braces
 The program executing begins at the opening brace and ends at the closing brace
 The closing brace of the main function section is the logical end of the program
 All statements in the declaration and executable parts end with a semicolon ( )
 The subprogram section contains all the userdefined functions that are called in the main function
 Userdefined functions are generally placed immediately after the main function although they may appear in any order
 All section except the main function section may be absent when they are not required
 define statements must not end with a semicolon
 define statements may appear anywhere in the program but before it is referenced in the program
 There is no need to put braces around these blocks
 The unit can be invoked from other part of the program
 
 ++++
 
 One of the function must be called main ( ) A function is a subroutine that may include one or more statements designed to perform a specific task
 Every C program must have one main ( ) function section
 The subprogram section contains all the userdefined functions that are called in the main ( ) function
 Userdefined functions are generally placed immediately after the main ( ) function although they may appear in any order
 All section except the main ( ) function section may be absent when they are not required
 The function main ( ) is always present in each program which is executed first and other functions are optional
 The function main ( ) is an user defined function except that the name of function is defined or fixed by the language
 <eos>","Every C program must have one `main()` function section. This `main()` function, although a user-defined function with its name defined or fixed by the language, is always present in each program and is executed first, while other functions are optional. The `main()` function section contains two parts: a declaration part and an executable part. The declaration part declares all variables used in the executable part, which must contain at least one statement. These two parts must appear between opening and closing braces; program execution begins at the opening brace and ends at the closing brace, with the closing brace of the `main()` function section being the logical end of the program. All statements in both the declaration and executable parts must end with a semicolon, which means that we can execute them directly but cannot read or modify them. The subprogram section contains all user-defined functions that are called in the `main()` function. A function is a subroutine that may include one or more statements designed to perform a specific task. User-defined functions are generally placed immediately after the `main()` function, although they may appear in any order, and these units can be invoked from other parts of the program. A section in the program also declares all the user-defined functions. All sections, except the `main()` function section, may be absent when they are not required. Define statements must not end with a semicolon and may appear anywhere in the program but before they are referenced; there is no need to put braces around these blocks."
merged_topic_10_1,"section, closing, brace, executable, appear, userdefined, prototypes, ahead, function","<task:merge> <sos>
 Such declaration is available for all the function in the program
 Function Definition A function must be defined before it is used anywhere in the program
 add ( ) When the compiler encounters the function call the control is transferred to the function definition
 And it executes each line of code in function and returns the control to the main program again
 A function may be used by many other program
 This is a nonexecutable statement
 
 ++++
 
 This function is executed first when the program starts execution
 Function Declaration or Prototype The function declaration or prototype is model or blueprint of the function
 If functions are used before they are defined then function declaration or prototype is necessary
 Many programmers prefer a topdown approach in which main appears ahead of the programmer defined function definition
 Function prototypes are usually written at the beginning of a program ahead of any userdefined function including main ( )
 Function prototypes provide the following information to the compiler
 In bottomup approach where userdefined functions are defined ahead of main ( ) function there is no need of function prototypes
 <eos>","A function must be defined before it is used anywhere in the program; it may also be used by many other programs. When the compiler encounters a function call, such as `add ( )`, control is transferred to the function definition, which then executes each line of code before returning control to the main program again. The function declaration, or prototype, is a model or blueprint of the function. This nonexecutable statement is available for all functions in the program and provides information to the compiler. If functions are used before they are defined, then a function declaration or prototype is necessary. Function prototypes are usually written at the beginning of a program, ahead of any user-defined function, including `main ( )`, which is the function executed first when the program starts. Many programmers prefer a top-down approach where `main` appears ahead of programmer-defined function definitions, making prototypes essential. Conversely, in a bottom-up approach, user-defined functions are defined ahead of the `main ( )` function, thus eliminating the need for function prototypes."
merged_topic_11_0,"function, calling, return, does, receive, keyword, argument","<task:merge> <sos>
 Void data type ( for empty set of value and nonreturning functions ) the void type specifies an empty set of values
 It is used as the return type for functions that do not return a value
 Function with no arguments and no return values When a function has no argument it does not receive any data from the calling function
 Similarly when it does not return value the calling function does not receive any data from the called function
 Function with no argument and return type In this function the function does not take any input from the calling function but it returns value to the calling function
 Recursive A function is said to be recursive if a statement in the body of the function calls itself
 The return statement is necessary only when the function is returning some data back to the calling function
 
 ++++
 
 If there is no return value the keyword void is used
 There are two ways in which it can be used return return ( expression ) where return is a keyword
 In this case only return keyword is written
 The value returned by the return statement may be any constant variable expression or even any other function call which returns a value
 Similarly when called function does not return a value the calling function does not receive any data from it
 There is no argument within parenthesis which implies function has no argument and it doesnt receive any data from the called function
 <eos>","The `void` data type specifies an empty set of values and is used for non-returning functions; it is utilized as the return type for functions that do not return a value. If there is no return value, the keyword `void` is used, and the calling function does not receive any data from the called function. When a function has no argument, which is implied by no argument within parentheses, it does not receive any data from the calling function. Functions with no arguments and no return values receive no data from the calling function, and similarly, the calling function does not receive any data from them. Conversely, in a function with no argument and a return type, the function does not take any input from the calling function but returns a value to it. The return statement is necessary only when the function is returning some data back to the calling function. There are two ways in which it can be used: `return;` where only the keyword is written, or `return (expression);`. The value returned by the return statement may be any constant, variable, expression, or even any other function call that returns a value. A function is said to be recursive if a statement in the body of the function calls itself."
merged_topic_12_0,"position, current, offset, fseek, file, putw, syntax, rewind","<task:merge> <sos>
 ftell takes a file pointer and return a number of type long that corresponds to the current position
 This function is useful in saving the current position of a file which can be used later in the program
 It takes the following form N fte ( fp ) n would give the relative offset ( in bytes ) if the current position
 This function helps us in reading a file more than once without having to close and open the file
 fseek function is used to move the file position to a desired location within the file
 
 ++++
 
 Its syntax is char_variable fget ( file_ptr_variable ) fputc ( ) It is used to write a character to a file
 Its syntax is fputc ( char_variable file_ptr vriable ) b ) String IO functions fgets ( ) It is used to read string from file
 Its syntax is fgets ( string int_value file_ptr_variable ) fputs ( ) It is used to write a string to a file
 Its syntax is fputs ( string file_ptr_variable )
 Its syntax is fprintf ( file_ptr_variablecontrol string list variables ) fscanf ( ) This function is used to read some integer float char or string froma file
 Its syntax is fscanf ( file_ptr_variablecontrol string list_variables ) Creating data files Some sample programs create a file named testtxt and write some text Welcome to Eastern College of Engineering to the file
 File Pointer Device Stdin Standard input device ( keyboard ) Stdout Standard OUTPUT devices ( screen ) Stderr Standard error OUTPUT device ( screen ) Some other unformatted function Intger IO getw ( ) putw ( ) for binary mode Record IO fread ( ) fwrite Putw ( ) used to write integer value th file
 Their syntaxes are int putw ( int value FILE fpir ) int getw ( FILE fptr ) fwrite ( ) used for writing an etire block to a given file
 <eos>","File positioning functions include `ftell` and `fseek`. `ftell` takes a file pointer and returns a number of type `long` that corresponds to the current position, indicating the relative offset in bytes. This function is useful in saving the current file position for later use in the program and helps in reading a file more than once without having to close and open it. The given syntax for `ftell` is `N fte ( fp ) n`. The `fseek` function is used to move the file position to a desired location within the file. For character I/O, `fputc()` is used to write a character to a file; its syntax is `fputc ( char_variable file_ptr_variable )`. The syntax `char_variable fget ( file_ptr_variable )` is also mentioned. For string I/O, `fgets()` is used to read a string from a file, with the syntax `fgets ( string int_value file_ptr_variable )`, while `fputs()` is used to write a string to a file, with the syntax `fputs ( string file_ptr_variable )`. Formatted I/O functions include `fprintf()` and `fscanf()`. The syntax for `fprintf()` is `fprintf ( file_ptr_variable, control_string, list_variables )`. `fscanf()` is used to read integers, floats, characters, or strings from a file, and its syntax is `fscanf ( file_ptr_variable, control_string, list_variables )`. Some sample programs create data files, such as a file named `test.txt`, and write text like ""Welcome to Eastern College of Engineering"" to them. Standard file pointer devices include `Stdin` for the standard input device (keyboard), `Stdout` for standard output devices (screen), and `Stderr` for standard error output devices (screen). Other unformatted functions include `getw()` and `putw()` for integer I/O in binary mode. `putw()` is specifically used to write an integer value to a file, with its syntax being `int putw ( int value, FILE *fptr )`. The syntax for `getw()` is `int getw ( FILE *fptr )`. For record I/O, `fread()` and `fwrite()` are used, with `fwrite()` specifically used for writing an entire block to a given file."
merged_topic_12_1,"position, current, offset, fseek, file, putw, syntax, rewind","<task:merge> <sos>
 It takes the following form fseek ( file_ptroffsetposition ) file_ptr is a pointer to the file concerned offset is a number or variable of type long and position is an integer number
 the offset specifies the number of position ( byte ) to be moved from the location specified by position
 The position can take one of the following three values value meaning Beginning of file Current position End of file Example fseek ( fpL ) meaning go to begining refer to class note for example FORTAN character set The following is the set of character used in FORTRAN
 
 ++++
 
 Their syntax are fwrite ( ptr size_of_array_or_structure number_of_array_or_structure fptr ) fread ( ptr size_of _array_or_structure number_of_structure_or_array fptr ) Random Acess to File We can acess the data stored in the file in two ways sequently or random
 The syntax is int fseek ( FILE fp long displacement int origin ) where fp is file pointer displacement is long integer which can be positive or negative and it denotes the number of bytes which are skipped backward ( if negative ) or forward ( if positive ) from the position specified in the third argument
 It can take one of these three values Constant Value Poition SEEK_SET Beginning of file SEEK_CURRENT Current position SEEK_END End of File rewind ( ) This function is used to move the file position positive to the beginning of the file syntax rewind ( File fp ) using rewind ( fp ) is equivalent to fseek ( fp OL O ) ftell ( ) This function returns the current position of the file position pointer
 <eos>","We can access the data stored in the file in two ways: sequentially or randomly. For random access, the `fseek` function is used. It takes the form `fseek ( file_ptroffsetposition )`, where `file_ptr` is a pointer to the file concerned, `offset` is a number or variable of type long, and `position` is an integer number. Alternatively, its syntax is `int fseek ( FILE fp long displacement int origin )`, where `fp` is a file pointer, and `displacement` is a long integer. The `offset` or `displacement` specifies the number of position (byte) to be moved from the location specified by `position` or `origin`, and it can be positive or negative, denoting the number of bytes which are skipped backward (if negative) or forward (if positive). The `position` or `origin` can take one of the following three values: `SEEK_SET` (Beginning of file), `SEEK_CURRENT` (Current position), or `SEEK_END` (End of File). An example is `fseek ( fpL )`, meaning to go to the beginning. The `rewind()` function, with syntax `rewind ( File fp )`, is used to move the file position pointer to the beginning of the file; using `rewind ( fp )` is equivalent to `fseek ( fp OL O )`. Additionally, the `ftell()` function returns the current position of the file position pointer. For general file input/output, their syntax forms are `fwrite ( ptr size_of_array_or_structure number_of_array_or_structure fptr )` and `fread ( ptr size_of _array_or_structure number_of_structure_or_array fptr )`. Refer to class notes for examples concerning the FORTRAN character set; the following is the set of characters used in FORTRAN."
merged_topic_13_0,"programmer, operating, crashing, conjunction, thorough, algebraic, augmented, assisting, visual, road","<task:merge> <sos>
 It is a set of instructions that tells the computer what to do when the computer operator does something
 It operates in close conjunction with operating system and enables us ( the programmer ) to exploit certain capabilities of operating system while creating the program
 It requires a thorough knowledge ( low level ) of the hardware for which the program is being created
 If not it will inform the programmer where rules have been violated
 It should be able to detect unreasonable or error conditions and indicate them to the programmer or user without stopping all operations crashing the system
 It facilitates topdown modular programming
 It is easy to locate and isolate a faulty function for further investigations
 
 ++++
 
 It is simply a method of assisting the program to lay out in a visual two dimensional format ideas on how to organize a sequence of steps necessary to solve a problem by a computer
 It is basically the plan to be followed when a program is written
 It acts like a road map for a programmer and guides himher how to go from starting point to the final point while writing a computer program
 It displays the dynamics of a program and allows us to examine and compare the information at various points
 Its instructions consists of terms that resemble algebraic expression augmented by certain English keywords such as if else for do and while etc
 <eos>","It is a set of instructions that tells the computer what to do when the computer operator does something. It is also basically the plan to be followed when a program is written, acting like a road map for a programmer that guides him/her how to go from a starting point to the final point while writing a computer program. Moreover, it is simply a method of assisting the programmer to lay out in a visual two-dimensional format ideas on how to organize a sequence of steps necessary to solve a problem by a computer. It operates in close conjunction with the operating system, enabling us (the programmer) to exploit certain capabilities of the operating system while creating the program. Its instructions consist of terms that resemble algebraic expressions augmented by certain English keywords such as if, else, for, do, and while. It requires a thorough knowledge (low level) of the hardware for which the program is being created. It displays the dynamics of a program and allows us to examine and compare the information at various points. It should be able to detect unreasonable or error conditions and indicate them to the programmer or user without stopping all operations or crashing the system; if not, it will inform the programmer where rules have been violated. Furthermore, it facilitates top-down modular programming, making it easy to locate and isolate a faulty function for further investigations."
merged_topic_14_0,"file, opening, data, defined, secondary, files, level, high, buffer, oriented","<task:merge> <sos>
 The basic file operations performed are Naming a file Opening a file Reading data from a file Writing data from a file Closing a file
 Defining and opening a file If we want to perform operation in a file in the secondary memory we must specify certain things about the file to the operating system
 Example Studenttxt Employdat Data structure of a file is defined as FILE in the library of standard IO function definitions
 Therefore all files should be declared as type FILE before they are used
 FILE is a defined data type
 For example we may write data to the file or read the already existing data
 Following is the general format for declaring and opening a file FILE fp fp fopen ( filenamemode ) the first statement declares the variable fp as a pointer to the data type FILE
 The second statement opens the file named filename and assigns an identifier to the FILE type pointer fp
 
 ++++
 
 Programming language C has various library functions for creating and processing data files
 High level ( standard or stream oriented ) files
 Low level ( system oriented ) files
 In high level data files the available library functions do their own buffer management where as the programmer should do it explicitely in case of lower level files
 For each binary and text files there are a number of formatted and unformatted library functions in C fig classification of files Data files High Low Text Binary Opening and closing a data file Before a program can write to a file or read from a file the program must open it
 While working with high level data file we need buffer area where information is stored temporarily in the course of transferring data between computer memory and data file
 A structure named FILE is defined in the file stdioh that contains all information about the file like name status buffer size current position and of file status etc
 ( PU ) What is a files ad explain its importance in C programming
 What is a file
 <eos>","Programming language C offers various library functions for creating and processing data files, which can be categorized as High-level (standard or stream oriented) or Low-level (system oriented). In high-level data files, available library functions manage their own buffers, whereas the programmer must explicitly handle buffer management for low-level files. For both binary and text files, C provides numerous formatted and unformatted library functions. Before a program can write to or read from a file in secondary memory, it must be defined and opened, requiring certain file details to be specified to the operating system. The basic file operations performed include Naming a file, Opening a file, Reading data from it, Writing data to it, and Closing a file. A structure named `FILE` is defined in the `stdio.h` library, which contains all information about the file, such as its name, status, buffer size, and current position. Since `FILE` is a defined data type, all files, like `Student.txt` or `Employ.dat`, should be declared as type `FILE` before they are used. While working with high-level data files, a buffer area is needed to temporarily store information during data transfer between computer memory and the data file. For example, data can be written to a file or already existing data can be read from it. The general format for declaring and opening a file is `FILE *fp; fp = fopen(""filename"", ""mode"");`. The first statement declares the variable `fp` as a pointer to the `FILE` data type, and the second statement opens the file named ""filename,"" assigning an identifier to the `FILE` type pointer `fp`."
merged_topic_15_0,"prototype, declaration, local, function, global, parameter, type, returned, mul, return","<task:merge> <sos>
 Function declaration or Function prototype
 Function Prototype A function prototype is a declaration of the function that tells the program about the type of the value returned by the function and the number and type of each argument
 Functiontype functionname ( parameter list ) Example void sum ( int a int b ) when we place the declaration above all the function ( in the global declaration section ) the prototype is referred to as global prototype
 When we place it in a function definition ( in the local declaration section ) the prototype is called a local prototype
 The prototype declaration should be similar to the function header
 
 ++++
 
 The general syntax of function prototype is return_type function_name ( type type typen ) where return_type specifies the data type of the value returned by the function
 A function can return value of any data type
 The general syntax is return_type function_name ( parameter parameter parametern ) statements where return_type is the data type specifier of data returned by the function
 The syntax of teh call if function return_type is void is function_name ( parameter name ) If function return int float or any other type value then we have to assign the call to same type value like variable function_name ( parameter ) For example m mul ( x y ) The type of m is same as the return type of mul function
 This type of function is defined as void function_name ( ) body of function The keyword void means the function does not return any value
 <eos>","A function prototype, also known as a function declaration, is a declaration of the function that informs the program about the type of the value it returns, as well as the number and type of each argument. The general syntax of a function prototype is `return_type function_name ( type type typen )`, where `return_type` specifies the data type of the value returned by the function. An example is `void sum ( int a int b )`, following the pattern `Functiontype functionname ( parameter list )`. A function can return a value of any data type. When the declaration is placed above all functions in the global declaration section, the prototype is referred to as a global prototype. Conversely, when it is placed within a function definition in the local declaration section, it is called a local prototype. The prototype declaration should be similar to the function header. The general syntax for a function definition is `return_type function_name ( parameter parameter parametern ) statements`, where `return_type` is the data type specifier of data returned by the function. A function defined as `void function_name ( ) body of function` uses the keyword `void` to signify that it does not return any value. For calling a function, if its `return_type` is `void`, the syntax is `function_name ( parameter name )`. If a function returns an `int`, `float`, or any other type value, its call must be assigned to a variable of the same type, for example, `m = mul ( x y )`, where the type of `m` is the same as the return type of the `mul` function."
merged_topic_16_0,"file, opening, data, defined, secondary, position, putw, syntax, rewind","<task:merge> <sos>
 The basic file operations performed are Naming a file Opening a file Reading data from a file Writing data from a file Closing a file
 Defining and opening a file If we want to perform operation in a file in the secondary memory we must specify certain things about the file to the operating system
 Example Studenttxt Employdat Data structure of a file is defined as FILE in the library of standard IO function definitions
 Therefore all files should be declared as type FILE before they are used
 FILE is a defined data type
 For example we may write data to the file or read the already existing data
 
 ++++
 
 Its syntax is char_variable fget ( file_ptr_variable ) fputc ( ) It is used to write a character to a file
 Its syntax is fputc ( char_variable file_ptr vriable ) b ) String IO functions fgets ( ) It is used to read string from file
 Its syntax is fgets ( string int_value file_ptr_variable ) fputs ( ) It is used to write a string to a file
 Its syntax is fputs ( string file_ptr_variable )
 Its syntax is fprintf ( file_ptr_variablecontrol string list variables ) fscanf ( ) This function is used to read some integer float char or string froma file
 Its syntax is fscanf ( file_ptr_variablecontrol string list_variables ) Creating data files Some sample programs create a file named testtxt and write some text Welcome to Eastern College of Engineering to the file
 File Pointer Device Stdin Standard input device ( keyboard ) Stdout Standard OUTPUT devices ( screen ) Stderr Standard error OUTPUT device ( screen ) Some other unformatted function Intger IO getw ( ) putw ( ) for binary mode Record IO fread ( ) fwrite Putw ( ) used to write integer value th file
 Their syntaxes are int putw ( int value FILE fpir ) int getw ( FILE fptr ) fwrite ( ) used for writing an etire block to a given file
 <eos>","The basic file operations performed include Naming a file, Opening a file, Reading data from a file, Writing data to a file, and Closing a file. To perform operations on a file in secondary memory, certain things about the file must be specified to the operating system, for example, 'Studenttxt' or 'Employdat'. The data structure of a file is defined as `FILE` in the library of standard I/O function definitions. Therefore, all files should be declared as type `FILE` before they are used, as `FILE` is a defined data type, allowing one to write data to the file or read the already existing data. For character I/O, `fgetc()` is used to read a character from a file, with its syntax being `char_variable = fgetc(file_ptr_variable)`. Conversely, `fputc()` writes a character to a file, with its syntax being `fputc(char_variable, file_ptr_variable)`. String I/O functions include `fgets()`, which is used to read a string from a file, with the syntax `fgets(string, int_value, file_ptr_variable)`. `fputs()` is used to write a string to a file, with its syntax being `fputs(string, file_ptr_variable)`. For formatted I/O, `fprintf()` uses the syntax `fprintf(file_ptr_variable, control_string, list_variables)`, and `fscanf()` is used to read some integer, float, char, or string from a file, with its syntax being `fscanf(file_ptr_variable, control_string, list_variables)`. Some sample programs demonstrate creating data files, such as a file named `testtxt` to which text like 'Welcome to Eastern College of Engineering' can be written. Standard file pointer devices include `Stdin` for the standard input device (keyboard), `Stdout` for standard output devices (screen), and `Stderr` for standard error output devices (screen). Other unformatted functions, often used in binary mode, include integer I/O functions like `getw()` and `putw()`. Specifically, `putw()` is used to write an integer value to a file, with its syntax being `int putw(int value, FILE *fptr)`, and `getw()` reads an integer, with its syntax `int getw(FILE *fptr)`. For record I/O, `fread()` and `fwrite()` are employed; `fwrite()` is used for writing an entire block to a given file."
merged_topic_16_1,"file, opening, data, defined, secondary, position, putw, syntax, rewind","<task:merge> <sos>
 Following is the general format for declaring and opening a file FILE fp fp fopen ( filenamemode ) the first statement declares the variable fp as a pointer to the data type FILE
 The second statement opens the file named filename and assigns an identifier to the FILE type pointer fp
 
 ++++
 
 Their syntax are fwrite ( ptr size_of_array_or_structure number_of_array_or_structure fptr ) fread ( ptr size_of _array_or_structure number_of_structure_or_array fptr ) Random Acess to File We can acess the data stored in the file in two ways sequently or random
 The syntax is int fseek ( FILE fp long displacement int origin ) where fp is file pointer displacement is long integer which can be positive or negative and it denotes the number of bytes which are skipped backward ( if negative ) or forward ( if positive ) from the position specified in the third argument
 It can take one of these three values Constant Value Poition SEEK_SET Beginning of file SEEK_CURRENT Current position SEEK_END End of File rewind ( ) This function is used to move the file position positive to the beginning of the file syntax rewind ( File fp ) using rewind ( fp ) is equivalent to fseek ( fp OL O ) ftell ( ) This function returns the current position of the file position pointer
 <eos>","Following is the general format for declaring and opening a file: `FILE *fp;`, which declares the variable `fp` as a pointer to the `FILE` data type. The statement `fp = fopen(filename, mode);` then opens the file named `filename` and assigns an identifier to the `FILE` type pointer `fp`. For file operations, the syntax for writing is `fwrite(ptr, size_of_array_or_structure, number_of_array_or_structure, fptr)`, and for reading it is `fread(ptr, size_of_array_or_structure, number_of_structure_or_array, fptr)`. Regarding random access to files, data can be accessed sequentially or randomly. The syntax for this is `int fseek(FILE *fp, long displacement, int origin)`. Here, `fp` is the file pointer, `displacement` is a long integer that can be positive or negative, denoting the number of bytes skipped backward (if negative) or forward (if positive) from the position specified in the third argument. The `origin` can take one of these three constant values: `SEEK_SET` (Beginning of file), `SEEK_CURRENT` (Current position), or `SEEK_END` (End of File). The `rewind()` function is used to move the file position to the beginning of the file, with its syntax being `rewind(File *fp)`. Using `rewind(fp)` is equivalent to `fseek(fp, 0L, 0)`. Additionally, the `ftell()` function returns the current position of the file position pointer."
merged_topic_18_0,"pointer, operator, subtract, integers, operators, precedence, associativity, left, right","<task:merge> <sos>
 C operators can be classified into a number of categories
 Special operators C support some special operators of interest such as comma operator sizeof operator pointer operator ( and ) and member selection operator (
 Example X ( int ) ie is converted to integer by truncation Operator precedence and associativity Precedence is used to determine how an expression involving more than one operator is evaluated
 Example int a int pa Pointer Expression C allows us to add integers to or subtract integers from pointers as well as to subtract one pointer from another
 Pppp In addition to arithmetic operations discussed pointer can also be compared using the relational operators
 We may no use pointer in division or multiplication
 Pointer increment and scalar factor When we increment a pointer its value is increased by the length of the data type that it points to
 
 ++++
 
 Precedence Associativity Precedence of an operator in C is defined as the order of evaluation
 The operators are grouped hierarchically according to their precedence
 Operations with a high precedence are carried out before operation having a lower precedence
 Within each of the precedence groups described above the associativity is left to right
 Operators not equal to These operators all fall within the same precedence group which is lower than the arithmetic and unary operators
 The associativity of these operators is left to right
 The associativity of size of right to left
 Give a table that shows their precedence and associatively
 The dot operator has precedence and associativity is left to right
 <eos>","C operators can be classified into a number of categories, including special operators such as the comma operator, sizeof operator, pointer operator (parentheses), and member selection operator (dot). For instance, a value like X can be converted to an integer by truncation using a type cast like (int). Regarding pointer expressions, C allows integers to be added to or subtracted from pointers, and one pointer to be subtracted from another. Pointers can also be compared using relational operators, but they cannot be used in division or multiplication. When a pointer is incremented, its value is increased by the length of the data type it points to, which is related to its scalar factor. Operator precedence and associativity are crucial concepts in C; precedence determines how an expression involving more than one operator is evaluated, defining the order of evaluation and grouping operators hierarchically, so operations with higher precedence are carried out before those with lower precedence. Within each precedence group, associativity is generally left to right. However, there are specific exceptions, such as the sizeof operator, which has right-to-left associativity. Operators like 'not equal to' fall within a precedence group lower than arithmetic and unary operators, and their associativity is left to right, similar to the dot operator which also has left-to-right associativity."
merged_topic_19_0,"satisfied, loop, body, looping, condition, stopping, terminate, problem, algorithm","<task:merge> <sos>
 Decision making and looping Looping ( or iteration ) is the process of executing a sequence of statements until some condition for termination of loop is satisfied
 If the conditions are not satisfied then the body of the loop will not be executed
 If the condition is true the program continues to evaluate the body of the loop once again
 If the condition is true the body of loop is executed otherwise the loop is terminated and execution continues with the statement that immediately follows the loop
 If the condition is satisfied the body of the loop is again executed
 
 ++++
 
 After performing the instructions that is after the algorithm terminates the desired results must be obtained
 Step Stop ( End ) The above mentioned example is simpler one but development of an algorithm of a complex problem is very difficult
 Sometimes it becomes necessary to come out of the loop even before the loop condition becomes false
 In such a situation break statement is used to terminate the loop
 This statement causes an immediate exit from that loop in which this statement appears
 The loop does not terminate when a continue statement is encountered
 Jumping completely out of the loop under certain conditions terminating the execution of a loop
 Problem statement must include a stopping condition ie
 The problem can be solved in this manner for any value of n greater than ( n represents a stopping condition )
 <eos>","Looping, or iteration, is the process of executing a sequence of statements until some condition for its termination is satisfied. If this condition is not satisfied, the body of the loop will not be executed. Conversely, if the condition is true, the body of the loop is executed, and the program continues to evaluate the body of the loop once again. If the condition becomes false, the loop is terminated and execution continues with the statement that immediately follows the loop. After an algorithm terminates, the desired results must be obtained, though the development of an algorithm for a complex problem can be very difficult. Sometimes, it becomes necessary to exit a loop even before its condition becomes false; in such a situation, a `break` statement is used to terminate the loop, causing an immediate exit from the loop in which it appears. It is important to note that a `continue` statement does not terminate the loop when encountered. Therefore, a problem statement must include a stopping condition; for instance, a problem can be solved for any value of 'n' greater than a specified threshold, where 'n' represents a stopping condition."
merged_topic_20_0,"function, calling, return, does, receive, recursive, calls, temperature, satisfied, recursion","<task:merge> <sos>
 Void data type ( for empty set of value and nonreturning functions ) the void type specifies an empty set of values
 It is used as the return type for functions that do not return a value
 Function with no arguments and no return values When a function has no argument it does not receive any data from the calling function
 Similarly when it does not return value the calling function does not receive any data from the called function
 Function with no argument and return type In this function the function does not take any input from the calling function but it returns value to the calling function
 Recursive A function is said to be recursive if a statement in the body of the function calls itself
 The return statement is necessary only when the function is returning some data back to the calling function
 
 ++++
 
 For example inlcude main ( ) int c double d crlscr ( ) printf ( Enter temperature in Celsius ) scanf ( d c ) d convert ( c ) Function call printf ( The Fahrenheit temperature of d C lf Fc d ) getch ( ) double convert ( int C ) function definition double f f c return f What is about main ( ) function
 main ( ) register int a Recursive Function Recursion in programming is a technique for defining a problem in terms of one or more smaller versions of the same problem
 A recursive function is one that calls itself directly or indirectly to solve a smaller version of its task until a final call which does not require a selfcall
 Thus the function is called recursive function if it calls to itself and recursion is a process by which a function call itself repeatedly until some specified condition will be satisfied
 To solve a problem using recursive method two conditions must be satisfied
 we must have an if statement somewhere to force the function to return without the recursive call being executed otherwise function will never return
 What is a recursive function
 <eos>","The void data type specifies an empty set of values and is primarily used as the return type for functions that do not return a value, signifying an empty set of values or non-returning functions. When a function has no arguments, it does not receive any data from the calling function; similarly, if it does not return a value, the calling function receives no data from the called function. Conversely, a function with no arguments but a return type will not take input from the calling function but will return a value to it. The return statement is necessary only when the function is returning some data back to the calling function. A function is said to be recursive if a statement in its body calls itself. Recursion in programming is a technique for defining a problem in terms of one or more smaller versions of the same problem. A recursive function is one that calls itself directly or indirectly to solve a smaller version of its task until a final call, which does not require a self-call. Thus, a function is called recursive if it calls itself, and recursion is a process by which a function calls itself repeatedly until some specified condition is satisfied. To solve a problem using a recursive method, two conditions must be satisfied: an `if` statement must be present to force the function to return without the recursive call being executed, otherwise, the function will never return. Fundamental programming concepts include function calls, function definitions, and the `main()` function."
merged_topic_21_0,"prototype, declaration, local, function, global, definition, body, display, int","<task:merge> <sos>
 Function declaration or Function prototype
 Function Prototype A function prototype is a declaration of the function that tells the program about the type of the value returned by the function and the number and type of each argument
 Functiontype functionname ( parameter list ) Example void sum ( int a int b ) when we place the declaration above all the function ( in the global declaration section ) the prototype is referred to as global prototype
 When we place it in a function definition ( in the local declaration section ) the prototype is called a local prototype
 The prototype declaration should be similar to the function header
 
 ++++
 
 For example int add ( int int ) int add ( int a int b ) void display ( int a ) void display ( int ) Function definition A function definition is a group of statements that is executed when it is called from some point of the program
 statements is the functions body
 The first line of the function definition is known as function header
 This statement can appear anywhere inside the body of the function
 Formal Actual When a function is called some parameters are written within parenthesis
 What is a function
 When we call the function no need to subscript or square brackets
 <eos>","<task:merge> <sos>
 A function prototype, also known as a function declaration, is a declaration that informs the program about the type of the value returned by the function and the number and type of each argument it expects. It specifies the function's return type, name, and parameter list, following a syntax like `Functiontype functionname ( parameter list )`; for instance, `void sum ( int a int b )`. When this declaration is placed above all functions in the global declaration section, it is referred to as a global prototype; conversely, when placed within a function definition in the local declaration section, it is called a local prototype. The prototype declaration should be similar to the function header. Further examples of prototypes include `int add ( int int )`, `int add ( int a int b )`, `void display ( int a )`, and `void display ( int )`. In contrast, a function definition is a group of statements, forming the function's body, that is executed when the function is called from some point in the program. The first line of the function definition is known as the function header. When a function is called, parameters, which can be formal or actual, are written within parentheses. Notably, when calling a function, there is no need for subscripts or square brackets.
 <eos>"
merged_topic_22_0,"function, calling, return, does, receive, parameter, type, returned, mul","<task:merge> <sos>
 Void data type ( for empty set of value and nonreturning functions ) the void type specifies an empty set of values
 It is used as the return type for functions that do not return a value
 Function with no arguments and no return values When a function has no argument it does not receive any data from the calling function
 Similarly when it does not return value the calling function does not receive any data from the called function
 Function with no argument and return type In this function the function does not take any input from the calling function but it returns value to the calling function
 Recursive A function is said to be recursive if a statement in the body of the function calls itself
 The return statement is necessary only when the function is returning some data back to the calling function
 
 ++++
 
 The general syntax of function prototype is return_type function_name ( type type typen ) where return_type specifies the data type of the value returned by the function
 A function can return value of any data type
 The general syntax is return_type function_name ( parameter parameter parametern ) statements where return_type is the data type specifier of data returned by the function
 The syntax of teh call if function return_type is void is function_name ( parameter name ) If function return int float or any other type value then we have to assign the call to same type value like variable function_name ( parameter ) For example m mul ( x y ) The type of m is same as the return type of mul function
 This type of function is defined as void function_name ( ) body of function The keyword void means the function does not return any value
 <eos>","The void data type specifies an empty set of values and is primarily used as the return type for functions that do not return a value. When a function has no arguments, it does not receive any data from the calling function; similarly, when it does not return a value, the calling function does not receive any data from the called function. This type of function is often defined as `void function_name ( ) { body of function }`, where the keyword `void` explicitly means the function does not return any value. In contrast, for functions that do return a value, the return statement is necessary only when the function is returning some data back to the calling function; this includes functions with no arguments but a return type, which do not take input but return a value to the calling function. A function can return a value of any data type, and a function is said to be recursive if a statement in the body of the function calls itself. The general syntax for a function prototype is `return_type function_name ( type type typen )`, where `return_type` specifies the data type of the value returned by the function. Similarly, the general syntax for a function definition is `return_type function_name ( parameter parameter parametern ) { statements }`, with `return_type` being the data type specifier of data returned. When calling a function, if its `return_type` is `void`, the syntax is `function_name ( parameter name )`; however, if a function returns an `int`, `float`, or any other type of value, the call must be assigned to a same-type variable, such as `variable = function_name ( parameter )`. For example, `m = mul ( x, y )` shows `m` having the same type as the return type of the `mul` function."
merged_topic_23_0,"function, calling, return, does, receive, sum, arguments, func","<task:merge> <sos>
 Void data type ( for empty set of value and nonreturning functions ) the void type specifies an empty set of values
 It is used as the return type for functions that do not return a value
 Function with no arguments and no return values When a function has no argument it does not receive any data from the calling function
 Similarly when it does not return value the calling function does not receive any data from the called function
 
 ++++
 
 int addition ( int a int b ) function prototype main ( ) int addition ( ) function call printf ( The result isdz ) int addition ( int a int b ) function header int r r ab return r Output The result is return statement The return statement is used in a function to return a value to the calling function
 Program to understand the use of return statement include void funct ( int float ) main ( ) int age float ht clrscr ( ) printf ( Enter age and height ) scanf ( df age ht ) funct ( age ht ) getch ( ) void funct ( int age float ht ) if ( age ) printf ( Age should be less than n ) return if ( ht ) printf ( Height should be more than n return print ( selected n ) The second form of return statement is used to terminate a function and return a value to the calling function
 For example return return ( xyz ) return ( sum ( ab ) ) Calling a function ( or A calling function ) A function can be called by specifying its name followed by a list of arguments enclosed in parenthesis and separated by commas in the main ( ) function
 Functions with no arguments and no return value
 Functions with no arguments and a return value functions with arguments and no return value Functions with no arguments and no return value When a function has no arguments it does not receive any data from the calling function
 <eos>","The void data type specifies an empty set of values and is used for non-returning functions, acting as the return type for functions that do not return a value. When a function has no arguments, it does not receive any data from the calling function; similarly, when it does not return a value, the calling function does not receive any data from the called function. A function can be called by specifying its name followed by a list of arguments enclosed in parentheses and separated by commas in the `main()` function. For instance, a function prototype is `int addition (int a, int b)`, a function call is `int addition ( )`, and the function header is also `int addition (int a, int b)`, which might contain logic such as `int r; r = a + b; return r;` to produce an output like 'The result is...'. The return statement is used in a function to return a value to the calling function. Its second form is used to terminate a function and return a value, with examples like `return`, `return (xyz)`, or `return (sum(ab))`. To understand its use, a program might include a `void funct (int, float)` prototype, with a `main()` function that declares `int age` and `float ht`, clears the screen (`clrscr()`), prompts for and scans `age` and `height` (`printf(""Enter age and height"")`, `scanf(""df age ht"")`), then calls `funct (age, ht)` before `getch()`. The `void funct (int age, float ht)` definition itself would contain `if (age)` leading to `printf(""Age should be less than n"") return;` and `if (ht)` leading to `printf(""Height should be more than n"") return;`, before `print(""selected n"")`. Functions can also be categorized as those with no arguments and no return value, functions with no arguments and a return value, and functions with arguments and no return value."
merged_topic_23_1,"function, calling, return, does, receive, sum, arguments, func","<task:merge> <sos>
 Function with no argument and return type In this function the function does not take any input from the calling function but it returns value to the calling function
 Recursive A function is said to be recursive if a statement in the body of the function calls itself
 The return statement is necessary only when the function is returning some data back to the calling function
 
 ++++
 
 Program to illustrate the function with no arguments and no return values void add ( ) int a b sum printf ( n Enter two numbers t ) scanf ( dd a b ) sum a b printf ( n The sum is d sum ) void main ( ) clrscr ( ) add ( ) getch ( ) Output Enter two numbers The sum is Functions with no arguments and a return value These type of functions do not receive any arguments but they can return a value
 int func ( void ) main ( ) int r int func ( void ) return ( expressions ) Program to illustrate function with no argument and a return value inlcude int add ( void ) main ) printf ( The sum is dn add ( ) ) int add ( void ) int n n sum printf ( Enter two numbers t ) scanf ( dd n n ) sum nn return ( sum ) Output Enter two numbers The sum is Functions with arguments and no return values These types of functions have arguments hence the calling function can send data to the called function but the called function does not return any value
 <eos>","A function with no argument and return type is one where the function does not take any input from the calling function but it returns a value to the calling function. In contrast, functions with no arguments and no return values are illustrated by a program like `void add ( ) int a b sum printf ( n Enter two numbers t ) scanf ( dd a b ) sum a b printf ( n The sum is d sum ) void main ( ) clrscr ( ) add ( ) getch ( ) Output Enter two numbers The sum is`. These types of functions do not receive any arguments and do not return values. Functions with no arguments and a return value, on the other hand, do not receive any arguments but they can return a value, as shown by the general structure `int func ( void ) main ( ) int r int func ( void ) return ( expressions )`. An example program illustrating this type of function is `inlcude int add ( void ) main ) printf ( The sum is dn add ( ) ) int add ( void ) int n n sum printf ( Enter two numbers t ) scanf ( dd n n ) sum nn return ( sum ) Output Enter two numbers The sum is`. Furthermore, functions with arguments and no return values are those types of functions that have arguments, hence the calling function can send data to the called function, but the called function does not return any value. Separately, a function is said to be recursive if a statement in the body of the function calls itself. The return statement is necessary only when the function is returning some data back to the calling function."
merged_topic_24_0,"pass, calling, called, function, parameters, reference, passed, mechanism, changed","<task:merge> <sos>
 In effect there is no data transfer between the calling function and the called function
 It is a twoway data communication between the calling and called function
 Ways of passing arguments to functions There are two different mechanisms to pass arguments to function
 Pass by value ( also called as call by value ) Pass by reference ( also known as call by pointer ) Pass by value In pass by value values of actual parameters are copied to the variable in the parameter list of the called function
 The called function works on the copy and not on the original values of the actual parameters
 This ensures that the original data in the calling function can not be changed accidently
 In this case the called function directly work on the data in the calling function and the changed value are available in the calling function for its use
 This method is also used when we require multiple values to returned by the called function
 Let us consider following example to explain it
 
 ++++
 
 There are some variables that are used in more than one function
 When some specific code is to be used more than once and at different places in the program the use of function avoids repetition of that code
 In function we can pass a variable by two ways
 Pass by value ( or call by value )
 Pass by reference ( or call by reference ) Function call by value In this the value of actual parameter is passed to formal parameter when we call the function
 its value persists between different function calls
 When we pass array that pass as a call by reference because the array name is address for that array
 As address is passed in this case this mechanism is also ka call by address or call by reference
 As address of variable is passed in this mechanism if value in the passed address is changed within function the value of actual variable also changed
 <eos>","<task:merge> <sos>When specific code is to be used more than once and at different places in a program, the use of functions avoids repetition of that code. There are two different mechanisms to pass arguments to functions: Pass by value (also called as call by value) and Pass by reference (also known as call by pointer or call by address). In pass by value, values of actual parameters are copied to the variables in the parameter list of the called function. The called function works on this copy and not on the original values of the actual parameters. This ensures that the original data in the calling function cannot be changed accidentally, and its value persists between different function calls. In effect, there is no direct modification of the original data transfer between the calling function and the called function through this mechanism. In contrast, Pass by reference facilitates a two-way data communication between the calling and called function. In this case, the called function directly works on the data in the calling function, and the changed values become available in the calling function for its use. As the address of the variable is passed in this mechanism, if the value in the passed address is changed within the function, the value of the actual variable also changes. This method is also used when multiple values are required to be returned by the called function. For instance, when an array is passed, it is done by call by reference because the array name represents the address for that array.<eos>"
merged_topic_25_0,"pointer, tells, slide, asterisk, unrelated, address, price, equivalent, variable","<task:merge> <sos>
 Pointer refer to book for proper knowledge as this content is from class note slide Declaring Pointer Variables Syntax data_type pt_name This tells the compiler three things about the variable pt_name
 This asterisk ( ) tells that the variable pt_name is a pointer variable
 pt_name needs a memory location
 pt_name points to a variable type of data_type
 However any comparisons of pointer that refers to separate and unrelated variables make no sense
 Similarly two pointer can not be added
 
 ++++
 
 Thus pointer variables are defined as int a float b char c where a b c are pointer variable which stores address of integer float and char variable
 Program to print address of variable using include main ( ) int sn float price printf ( value of snd Address of snun sn sn ) printf ( value of pricef Address of priceun price price ) output value of sn Address of sn value of price Address of price Pointer Fundament Pointer Declaration Introduction A pointer is a variable that contains a memory address of data or another variable
 The asterisk preceding this name informs the compiler that the variable is declared as a int iptrsn float fptrprice iptrsn assigning of pointer fptrprice Now iptr contains the address of variable sn ie
 it points to variable sn similarly fptr points to variable sn similarly fptr points variable price
 If pointers are declare after the variable like int snpsn float priceqprice It is also possible to assign the value of one pointer variable to the other provided their base type is some
 PP Now both pointer variable P and P contains the address of variable sn and points the same variable iptr sn fptr P sn P We can also assign constant zero to a pointer of any type
 <eos>","Pointers refer to books for proper knowledge, as this content is derived from class note slides. A pointer is fundamentally a variable that contains a memory address of data or another variable. Declaring pointer variables follows the syntax `data_type *pt_name`. The asterisk (`*`) preceding the variable name, such as `pt_name`, informs the compiler that the variable is a pointer variable, indicating it needs a memory location and points to a variable of the specified `data_type`. For example, pointer variables are defined as `int *a`, `float *b`, and `char *c`, where `a`, `b`, and `c` store the addresses of integer, float, and char variables, respectively. The assignment of a pointer involves storing the address of a variable in it; for instance, after declaring `int *iptrsn` and `float *fptrprice`, `iptrsn = &sn` means `iptrsn` now contains the address of variable `sn` and points to it, and similarly `fptrprice` points to `price`. It is also possible to declare pointers after their respective variables, like `int sn, *psn;` and `float price, *qprice;`. Furthermore, the value of one pointer variable can be assigned to another, provided their base types are the same; thus, if `P` and `P2` are pointer variables of the same type and `P = &sn`, then `P2 = P` results in both `P` and `P2` containing the address of `sn` and pointing to the same variable. However, any comparisons of pointers that refer to separate and unrelated variables make no sense, and similarly, two pointers cannot be added. It is also possible to assign a constant zero to a pointer of any type. For illustrative purposes, a program can print the address of a variable using constructs like `printf(""value of sn %d Address of sn %p\n"", sn, &sn)` to display both the value and memory address."
merged_topic_26_0,"file, opening, data, defined, secondary, mode, opened, fopen, open","<task:merge> <sos>
 The basic file operations performed are Naming a file Opening a file Reading data from a file Writing data from a file Closing a file
 Defining and opening a file If we want to perform operation in a file in the secondary memory we must specify certain things about the file to the operating system
 Example Studenttxt Employdat Data structure of a file is defined as FILE in the library of standard IO function definitions
 Therefore all files should be declared as type FILE before they are used
 FILE is a defined data type
 For example we may write data to the file or read the already existing data
 Following is the general format for declaring and opening a file FILE fp fp fopen ( filenamemode ) the first statement declares the variable fp as a pointer to the data type FILE
 The second statement opens the file named filename and assigns an identifier to the FILE type pointer fp
 
 ++++
 
 fp fopen ( argv w ) opens a file with name TEXT
 The function fopen ( ) is used to open a file
 On success fopen ( ) returns a pointer of type FILE and on error it returns NULL
 For example FILE fp fp fp fopen ( myfiletxt w ) fp fopen ( yourfiledat r ) The file opening mode specifies the way in which a file should be opened ( ie
 To open a file in binary mode we can append b to the mode and to open the file in text mode t can be appended to the mode
 But since text mode is the default mode t is generally omitted while opening files in text mode
 For example wb Binary file opened in write mode ab or ( ab ) Binary file opened in append mode rt or ( rt ) Text file opened in update mode w or ( wt ) Text file opened in write mode The file that was opened using fopen ( ) function must be closed when no more operations are to be performed on it
 <eos>","The basic file operations include Naming, Opening, Reading data from, Writing data to, and Closing a file. To perform operations on a file in secondary memory, certain details about the file must be specified to the operating system. Examples of file names include Studenttxt and Employdat. The data structure of a file is defined as `FILE` in the standard I/O function definitions library. Therefore, all files, which are of the `FILE` data type, should be declared as type `FILE` before they are used, for example, to write data to or read already existing data from them. The general format for declaring and opening a file is `FILE *fp; fp = fopen(filename, mode);`. The first statement declares the variable `fp` as a pointer to the `FILE` data type, while the second statement opens the file named `filename` and assigns an identifier to the `FILE` type pointer `fp`. The `fopen()` function is specifically used to open a file. For instance, `fp = fopen(argv, ""w"")` opens a file, possibly named `TEXT`, and other examples include `FILE *fp; fp = fopen(""myfile.txt"", ""w"")` or `fp = fopen(""yourfile.dat"", ""r"")`. On success, `fopen()` returns a pointer of type `FILE`, and on error, it returns `NULL`. The file opening mode specifies the way in which a file should be opened; to open a file in binary mode, `b` can be appended to the mode (e.g., `wb` for binary write mode, `ab` for binary append mode), and to open the file in text mode, `t` can be appended. However, since text mode is the default mode, `t` is generally omitted while opening files in text mode (e.g., `rt` for text update mode, `w` or `wt` for text write mode). The file that was opened using the `fopen()` function must be closed when no more operations are to be performed on it."
merged_topic_27_0,"columns, rows, varies, array, number, dimensional, multidimensional, arrays, square","<task:merge> <sos>
 A two dimensional array is the simplest of multidimensional arrays
 For instance an array A MN is a M by N table with M rows and N columns containing M X N element
 The number of elements in a D array can be determined by multiplying number of rows with number or columns
 For example the number of elements in an array A is calculated as X
 
 ++++
 
 Square brackets enclosing the size specification for text
 auto register static or extern ) Single and Multidimension arrays One or single dimensional array There are several forms of an array in Cone dimensional and multidimensional array
 In one dimensional array there is a single subscript or index whose value refers to the individual array element which ranges form to n where n is the size of the array
 Examples of single dimensional array Program that reads integers from keyboard and displays entered numbers in the screen include main ( ) int a i clrscr ( ) printf ( Enter numbers t ) for ( i i main ( ) float a int i clrscr ( ) printf ( The continuous memory locations are n ) printf ( tu ai ) address of array element getch ( ) Output The continuous memory locations are Program to sort n numbers in ascending order main ( ) int num i j n temp clrscr ( ) printf ( How many numbers are there
 Enter numbers The numbers in ascending order Multidimensional arrays An array of arrays is called multidimensional array
 For example a one dimensional array of one dimensional array is called two dimensional array
 A one dimensional array of two dimensional arrays is called three dimensional arrays etc
 Declaration of two dimensional array Multidimensional arrays are declared in the same manner as one dimensional array except that a separate pair of square brackets are required for each subscript ie
 two dimensional array requires two pair of square bracket three dimensional array requires three pairs of square brackets four dimensional array require four pair of square brackets etc
 <eos>","There are several forms of an array, including one-dimensional and multidimensional arrays. In a one-dimensional array, there is a single subscript or index whose value refers to the individual array element, which typically ranges from 0 to n, where n is the size of the array. Examples of single-dimensional arrays include programs that read and display integers from the keyboard, programs demonstrating continuous memory locations for array elements, and programs designed to sort numbers in ascending order. Multidimensional arrays are arrays of arrays; for instance, a one-dimensional array of one-dimensional arrays is called a two-dimensional array, and a one-dimensional array of two-dimensional arrays is called a three-dimensional array, and so on. A two-dimensional array is the simplest of multidimensional arrays. For example, an array A[M][N] is an M by N table with M rows and N columns, containing M x N elements. The total number of elements in a two-dimensional array can be determined by multiplying the number of rows by the number of columns. Multidimensional arrays are declared in the same manner as one-dimensional arrays, except that a separate pair of square brackets is required for each subscript. Thus, a two-dimensional array requires two pairs of square brackets, a three-dimensional array requires three pairs of square brackets, and a four-dimensional array requires four pairs of square brackets. Square brackets are used for enclosing the size specification of arrays, which can also be declared with storage class specifiers such as `auto`, `register`, `static`, or `extern`."
merged_topic_27_1,"columns, rows, varies, array, number, dimensional, multidimensional, arrays, square","<task:merge> <sos>
 N AN Row M A The general form of a twodimensional array is type arraynamerow_sizecolumn_size Where type is the data type of the array having name arrayname row_size the first index refers to the number of rows in the array and column_size the second index refers to the number of columns in the array
 For example consider a two dimensional array A ( IJ ) where I varies from to and J varies from to
 
 ++++
 
 For example int n float a static char line double add Initialization of multidimensional array Similar to one dimensional array multidimensional array can also be initialized
 <eos>","The general form of a two-dimensional array is `type arraynamerow_sizecolumn_size`, where `type` is the data type of the array, and `arrayname` is its name. In this structure, `row_size`, which is the first index, refers to the number of rows in the array, and `column_size`, the second index, refers to the number of columns. For instance, one could consider a two-dimensional array `A(IJ)` where `I` varies from to and `J` varies from to. Examples of variable declarations include `int n`, `float a`, `static char line`, and `double add`. Similar to one-dimensional arrays, multidimensional arrays can also be initialized."
merged_topic_28_0,"matrix, print, enter, column, array, dimensional, multidimensional, arrays, square","<task:merge> <sos>
 Store the sum of A and B in C
 Practice Write to program to arrange list of elements in ascending order include include include void main ( ) int ntemp int ij printf ( nEnter the list of elements ) for ( iinj ) tempni ninj njtemp printf ( n The elements in assending order ) for ( iii ) printf ( ndni ) getch ( ) Two Dimensional Array A twodimensional array is an array in which each element is itself an array
 Practice Write a program that adds the individual rows of a two dimensional array of m by n and store the sums of rows into a single dimensional array using functions
 Write a function that takes a two dimensional array and onedimensional array and process the result and store in onedimensional array
 
 ++++
 
 Square brackets enclosing the size specification for text
 auto register static or extern ) Single and Multidimension arrays One or single dimensional array There are several forms of an array in Cone dimensional and multidimensional array
 In one dimensional array there is a single subscript or index whose value refers to the individual array element which ranges form to n where n is the size of the array
 Examples of single dimensional array Program that reads integers from keyboard and displays entered numbers in the screen include main ( ) int a i clrscr ( ) printf ( Enter numbers t ) for ( i i main ( ) float a int i clrscr ( ) printf ( The continuous memory locations are n ) printf ( tu ai ) address of array element getch ( ) Output The continuous memory locations are Program to sort n numbers in ascending order main ( ) int num i j n temp clrscr ( ) printf ( How many numbers are there
 Enter numbers The numbers in ascending order Multidimensional arrays An array of arrays is called multidimensional array
 For example a one dimensional array of one dimensional array is called two dimensional array
 <eos>","There are several forms of an array, including one-dimensional and multidimensional arrays, which can be declared using storage classes such as auto, register, static, or extern. In a one-dimensional array, there is a single subscript or index whose value refers to the individual array element, which ranges from 0 to n where n is the size of the array, with square brackets enclosing the size specification for text. Examples of single-dimensional array usage include a program that reads integers from the keyboard and displays entered numbers, another demonstrating continuous memory locations of array elements with their addresses, and a program to sort n numbers in ascending order. Multidimensional arrays are an array of arrays; for example, a two-dimensional array is an array in which each element is itself an array, or more specifically, a one-dimensional array of one-dimensional arrays. Practical programming tasks mentioned include storing the sum of A and B in C, writing a program that adds the individual rows of a two-dimensional array of m by n and stores the sums of rows into a single dimensional array using functions, and writing a function that takes a two-dimensional array and a onedimensional array to process the result and store it in the onedimensional array."
merged_topic_28_1,"matrix, print, enter, column, array, dimensional, multidimensional, arrays, square","<task:merge> <sos>
 Matrix Multiplication include include void input ( int aint rint c ) int ij for ( iiri ) for ( jjcj ) scanf ( daij ) void display ( int aint rint c ) int ij for ( iiri ) for ( jjcj ) printf ( daij ) printf ( n ) void multiply ( int aint bint cint rint cint c ) int ijk for ( iiri ) for ( jjcj ) cij for ( kkck ) cijaikbkj void main ( ) int abcrrcc clrscr ( ) printf ( nEnter the row and column for first matrix ) scanf ( ddrc ) printf ( nEnter the row and column for second matrix ) scanf ( ddrc ) if ( cr ) printf ( nMultipication is not possible ) else printf ( nenter the value to first matrix ) input ( arc ) printf ( nenter the value to second matrix ) input ( brc ) multiply ( abcrcc ) printf ( n The resultant Matrix is ) display ( crc ) getch ( ) Passing string to functions The string are treated as character array in C and therefore the rules of passing string to function are very similar to those for passing array to functions
 WRITE ( ) ( A ( I ) I ) PRACTICE Write a program to take input to one dimensional array and display
 INTEGER IN ( ) PRINT ENTER THE ELEMENTS TO ARRAY READ ( ) ( IN ( I ) I ) PRINT THE ELEMENTS OF ARRAY IS WRITE ( ) ( IN ( I ) I ) STOP END Write a program to arrange one dimensional array in ascending order in FORTRAN
 PRACTICE Write a program to take input and display two dimensional arrays
 
 ++++
 
 A one dimensional array of two dimensional arrays is called three dimensional arrays etc
 Declaration of two dimensional array Multidimensional arrays are declared in the same manner as one dimensional array except that a separate pair of square brackets are required for each subscript ie
 <eos>","A one dimensional array of two dimensional arrays is called three dimensional arrays etc. Multidimensional arrays are declared in the same manner as one dimensional array except that a separate pair of square brackets are required for each subscript, i.e. `int aint rint c`. Matrix Multiplication functions include `void input ( int aint rint c )` which uses `int ij for ( iiri ) for ( jjcj ) scanf ( daij )` for input, and `void display ( int aint rint c )` which uses `int ij for ( iiri ) for ( jjcj ) printf ( daij ) printf ( n )` for output. The core `void multiply ( int aint bint cint rint cint c )` function employs `int ijk for ( iiri ) for ( jjcj ) cij for ( kkck ) cijaikbkj` for its logic. A typical `void main ( )` structure involves declaring `int abcrrcc`, then `clrscr ( )`, `printf ( nEnter the row and column for first matrix ) scanf ( ddrc )`, `printf ( nEnter the row and column for second matrix ) scanf ( ddrc )`. It includes a check `if ( cr ) printf ( nMultipication is not possible )` and, if possible, proceeds with `printf ( nenter the value to first matrix ) input ( arc )`, `printf ( nenter the value to second matrix ) input ( brc )`, followed by `multiply ( abcrcc )`, `printf ( n The resultant Matrix is ) display ( crc )`, and `getch ( )`. When passing strings to functions, the string are treated as character array in C, and therefore the rules of passing string to function are very similar to those for passing array to functions. For practice, one can `WRITE ( ) ( A ( I ) I )` to take input to a one dimensional array and display it. An example FORTRAN program for this task is: `INTEGER IN ( ) PRINT ENTER THE ELEMENTS TO ARRAY READ ( ) ( IN ( I ) I ) PRINT THE ELEMENTS OF ARRAY IS WRITE ( ) ( IN ( I ) I ) STOP END`. Further practice involves writing a program to arrange a one dimensional array in ascending order in FORTRAN, and also writing a program to take input and display two dimensional arrays."
merged_topic_28_2,"matrix, print, enter, column, array, dimensional, multidimensional, arrays, square","<task:merge> <sos>
 C input and display elements OF MATRIX INTEGER IN ( ) PRINT ENTER THE ELEMENTS TO ARRAY READ ( ) ( ( IN ( IJ ) J ) I ) PRINT THE ELEMENTS OF ARRAY IS WRITE ( ) ( ( IN ( IJ ) J ) I ) STOP END Write a program to add two matrixes and display the resultant matrix in FORTRAN
 C ADDING CORRESPONDING ELEMENT OF TWO MATRIX TO THIRD MATRIX INTEGER A ( ) B ( ) C ( ) RRCC PRINT ENTER THE ROW AND COLUMN OF FIRST MATRIX READ RC PRINT ENTER THE ROW AND COLUMN OF SECOND MATRIX READ RC IF ( ( REQR ) AND
 
 ++++
 
 two dimensional array requires two pair of square bracket three dimensional array requires three pairs of square brackets four dimensional array require four pair of square brackets etc
 For example int n float a static char line double add Initialization of multidimensional array Similar to one dimensional array multidimensional array can also be initialized
 <eos>","Two-dimensional arrays require two pairs of square brackets, three-dimensional arrays require three pairs of square brackets, and four-dimensional arrays require four pairs of square brackets, etc. For example, declarations can include `int n`, `float a`, `static char line`, or `double add`. Initialization of multidimensional arrays is similar to that of one-dimensional arrays, as multidimensional arrays can also be initialized. Programs for matrix operations, such as inputting and displaying elements, often in FORTRAN, are structured to handle `INTEGER` matrices. For example, a program might involve lines commenting `C input and display elements OF MATRIX INTEGER IN`, followed by commands to `PRINT ENTER THE ELEMENTS TO ARRAY` and `READ` elements using the structure `( ) ( ( IN ( IJ ) J ) I )`. Subsequently, it would `PRINT THE ELEMENTS OF ARRAY IS` and `WRITE` the elements using `( ) ( ( IN ( IJ ) J ) I )` before the program `STOP END`s. For adding two matrices and displaying the resultant matrix in FORTRAN, a program could involve comments like `C ADDING CORRESPONDING ELEMENT OF TWO MATRIX TO THIRD MATRIX` for `INTEGER A`, `B`, and `C` matrices (e.g., `RRCC`). This would require inputting rows and columns, by prompting to `PRINT ENTER THE ROW AND COLUMN OF FIRST MATRIX` and `READ RC`, then `PRINT ENTER THE ROW AND COLUMN OF SECOND MATRIX` and `READ RC`, potentially followed by a conditional check `IF ((REQR) AND)`."
merged_topic_29_0,"index, base, address, arrayindex, noriginal, local, swap, prints, stored","<task:merge> <sos>
 Identifiers refer to the name of variables functions and arrays
 In c arrays index numbering starts with
 Example include include void main ( ) int xbx int yay int z clrscr ( ) printf ( nEnter the value ) scanf ( dx ) printf ( nEnter the value ) scanf ( dy ) zxyab printf ( nThe value of z isdz ) printf ( nOriginal value of b is ub ) b printf ( nChanged value of b is ub ) printf ( nOriginal value of a is ua ) aa printf ( nChanged value of a is ua ) getch ( ) Pointer and Arrays When an array is declared the compiler allocate a base address and sufficient amount of storage to contain all the elements of the array in contiguous memory allocation
 The base address is the location of the first element ( index ) of the array
 The compiler also defines the array name as a constant pointer to the first element
 
 ++++
 
 int x float y char c a x the address of x is assigned to pointer variable a b y the address of y is stored to pointer variable b c c the address of c is stored to pointer variable c include void swap ( int int ) function prototype main ( ) int x y x clrscr ( ) swap ( x y ) function call by address printf ( xdn x ) printf ( ydn y ) getch ( ) void swap ( int a int b ) int t t a a b b t Output x y PU Concept of Local Global Static variables Local variables ( automatic or internal variable ) The variables that are defined within the body of a function or a block are local to that function or block only and are called local variables
 Address operator ( ) C provides an address operator which returns the address of a variable when placed before it
 The following program prints the address of variabvles using address operator
 <eos>","Identifiers refer to the name of variables, functions, and arrays. In C, arrays' index numbering typically starts with 0. When an array is declared, the compiler allocates a base address and sufficient storage to contain all the elements of the array in contiguous memory allocation. The base address is the location of the first element (index) of the array, and the compiler also defines the array name as a constant pointer to this first element. C provides an address operator (`&`), which, when placed before a variable, returns its address. For instance, the address of an `int x`, `float y`, or `char c` can be assigned to pointer variables `a`, `b`, and `c` respectively (e.g., `a x`, `b y`, `c c`, implying assignment of addresses). Local variables, also known as automatic or internal variables, are those defined within the body of a function or a block, making them local to that specific function or block only. An example demonstrating variable manipulation and output is: `include void main ( ) int xbx int yay int z clrscr ( ) printf ( nEnter the value ) scanf ( dx ) printf ( nEnter the value ) scanf ( dy ) zxyab printf ( nThe value of z isdz ) printf ( nOriginal value of b is ub ) b printf ( nChanged value of b is ub ) printf ( nOriginal value of a is ua ) aa printf ( nChanged value of a is ua ) getch ( )`. Another program, illustrating a function call by address, is: `include void swap ( int int ) function prototype main ( ) int x y x clrscr ( ) swap ( x y ) function call by address printf ( xdn x ) printf ( ydn y ) getch ( ) void swap ( int a int b ) int t t a a b b t Output x y PU`."
merged_topic_29_1,"index, base, address, arrayindex, noriginal, local, swap, prints, stored","<task:merge> <sos>
 Suppose we declare an array x as follows int x Suppose the base address of x is then Element x x x x x Value Address Example Heres the array version include include void main ( ) int a int i clrscr ( ) for ( iii ) printf ( nd uaiai ) getch ( ) Now lets see how this program would look using pointer notation
 ( array index ) is the same as arrayindex
 ( array index ) is the same as arrayindex Pointer to Array in Function As an example to explain that a program where each element of array will be added by a constant
 
 ++++
 
 Let us take an example int a float b intP a floatp b In above program if we place before P when we can access the variable whose address is stored in P
 For example int aP Pa After statement pa p point the array ie
 the p contains the address of a ( first address of array ) P After this statement P points to a element
 When i then ( pi ) is ( p ) means p therefore this prints the value which store at location P Similarly ( p ) means the value of second element because p is pointer to the second element of array
 p contains the address of element ) or p is name of array
 <eos>","Suppose we declare an array `x` as follows: `int x[];`. If the base address of `x` is known, then its elements can be accessed. For example, `*(array + index)` is the same as `array[index]`. Here's an array version program snippet: `void main ( ) { int a[SIZE]; int i; clrscr ( ); for ( i = 0; i < SIZE; i++ ) printf ( ""%d %u %d %u\n"", i, &a[i], a[i], &a[i] ); getch ( ); }`. Now, let's see how this program would look using pointer notation. For example, we can declare `int *P;` and make `P` point to the array, such as `P = a;` (where `a` is the array name, which decays to a pointer to its first element). The pointer `P` then contains the address of `a` (the first address of the array). After this statement, `P` points to an element. When `*P` is used, it means we access the value stored at location `P`. Similarly, `*(P + 1)` means the value of the second element, because `P` (when incremented) becomes a pointer to the second element of the array. In this context, `P` contains the address of an element, or `P` itself can be considered the name of the array when used in pointer contexts. This concept also applies to a pointer to an array in a function, as an example to explain a program where each element of an array will be added by a constant."
merged_topic_30_0,"loop, exitcontrolled, tested, entrycontrolled, control, body, executed, condition, statements","<task:merge> <sos>
 EntryControlled loop In entrycontrolled loop the control conditions are tested before the start of the loop execution
 ExitControlled loop In exitcontrolled loop the test is performed at the end of the body of the loop and therefore the body is executed unconditionally for the first time
 When the body of the loop is executed the control is transferred back to the for statement after the evaluating the last statement in the loop
 Now the control variable is incremented using as assignment statement such as ii and the new value of the control variable is again tested to see whether it satisfies the loop condition
 
 ++++
 
 This ensures that the algorithm will ultimately terminate
 So a loop may be defined as a block of statements which are repeatedly executed for a certain number of times or until a particular condition is satisfied
 The control statement in loop decides whether the body is to be executed or not
 After the execution again the condition is checked and if it is found to be true then again the statements in the body of loop are executed
 The body of this loop may contain a single statement or a block of statements
 If the condition is true then again the loop body is executed and this process continues until the condition becomes false
 Instead the remaining loop statements are skipped and the computation proceeds directly to the next pass through the loop
 <eos>","A loop may be defined as a block of statements which are repeatedly executed for a certain number of times or until a particular condition is satisfied. The control statement in a loop decides whether the body is to be executed or not, and the body of this loop may contain a single statement or a block of statements. In an entry-controlled loop, the control conditions are tested before the start of the loop execution. In an exit-controlled loop, the test is performed at the end of the body of the loop, and therefore the body is executed unconditionally for the first time. When the body of the loop is executed, the control is transferred back to the `for` statement after evaluating the last statement in the loop. Now, the control variable is incremented using an assignment statement such as `i++`, and the new value of the control variable is again tested to see whether it satisfies the loop condition. After this re-evaluation, if the condition is found to be true, then the statements in the body of the loop are executed again, and this process continues until the condition becomes false. This ensures that the algorithm will ultimately terminate. Instead, the remaining loop statements are skipped and the computation proceeds directly to the next pass through the loop."
merged_topic_31_0,"statement, condition, expression, switch, statements, case, choice, default","<task:merge> <sos>
 respectively Decision making and Branching C language possesses such decisionmaking capabilities by supporting the following statements if statement switch statement conditional operator statement goto statements These statements are known as decisionmaking statements
 if statement It takes the following form if ( test expression ) It allows the computer to evaluate the expression first and then depending on whether the value of the expression ( relation or condition ) is true ( non zero ) or false ( zero ) it transfers the control to a particular statement
 This point of program has two paths to follow one for the true condition and the other for the false condition Entry False True The ifelse statement The general form is if ( test expression ) Trueblock statement ( s ) else Falseblock statement ( s ) statementx if the test expression is true then the trueblock statement ( s ) immediately following the if statements are executed otherwise the falseblock statement ( s ) are executed
 In either case trueblock or falseblock will be executed not both
 Trueblock statement Falseblock statement Statement x Nesting of ifelse statement The general form is if ( test condition ) if ( test condition ) statement else statement else statement statementx The else if ladder A multipath decision is a chain of ifs in which the statement associated with each else is an if
 It takes the following general form if ( condition ) statement else if ( condition ) statement else if ( condition ) statement else if ( condition n ) statementn else defaultstatement statementx The switch statement The switch statement tests the value f a given variable ( or expression ) against a list of case values and when a match is found a block of statements associated with that case is executed
 
 ++++
 
 For making this choice we use the switch statement
 The general syntax is switch ( expression ) case constant statements break case constantN statements break default statements Here switch case and default are keywords
 <eos>","C language possesses decision-making and branching capabilities by supporting statements such as `if` statement, `switch` statement, conditional operator statement, and `goto` statements, all of which are known as decision-making statements. The `if` statement takes the form `if (test expression)` and allows the computer to first evaluate the expression, then, depending on whether its value (relation or condition) is true (non-zero) or false (zero), it transfers control to a particular statement. This point of a program often has two paths to follow: one for the true condition and the other for the false condition. The `if-else` statement, having the general form `if (test expression) Trueblock statement(s) else Falseblock statement(s) statementx`, is used where if the test expression is true, the trueblock statement(s) immediately following the `if` are executed; otherwise, the falseblock statement(s) are executed. In either case, the trueblock or falseblock will be executed, but not both. For more complex decision-making, nesting of `if-else` statements is possible, with a general form like `if (test condition) if (test condition) statement else statement else statement else statementx`. Additionally, a multipath decision known as the `else-if` ladder is a chain of `ifs` where the statement associated with each `else` is an `if`. It takes the general form `if (condition) statement else if (condition) statement else if (condition) statement else if (condition n) statementn else defaultstatement statementx`. For making choices, the `switch` statement tests the value of a given variable or expression against a list of case values; when a match is found, a block of statements associated with that case is executed. The general syntax for the `switch` statement is `switch (expression) case constant statements break case constantN statements break default statements`, where `switch`, `case`, and `default` are keywords."
merged_topic_31_1,"statement, condition, expression, switch, statements, case, choice, default","<task:merge> <sos>
 The general form of the switch statement is as shown below switch ( expression ) case value block break case value block break default defaultblock break statementx The expression is an integer expression or characters
 block blockare statement lists and may contain zero or more statements
 The general form is If ( expression ) nnn Where ( expression ) is a valid FORTRAN arithmetic expression enclosed within parenthesis
 The general form of the statement is IF ( condn ) Statement Where condn is a logical condition statement is an executable statement
 The general form of the statement is IF ( condn ) THEN S S ELSE S S ENDIF Where condn is a logical condition SS are the statement to be executed when cond is true SS are the statement to be executed when cond is false
 
 ++++
 
 The expression following the switch keyword can be any C expression that yields an integer value or a character value
 Writing a switch statement inside another is called nesting of switches
 Firstly the switch expression is evaluated then value of this expression is compared one by one with every case constant
 If none of the case constant matches with the value of the expression then the block of statements under default is Flowchart switch ( expression ) case constant ( expression constant ) Body of case constant case constant ( expression constant ) Body of case constant case N default default Out of switch fig Flowchart of switch statement Program to understand the switch control statment include main ( ) int choice clrscr ( ) printf ( Enter your choice ) scanf ( d choice ) switch ( choice ) case case printf ( secondn ) case printf ( thirdn ) default printf ( wrong choicen ) getch ( ) Output Enter your choice Second Third Wrong Choice Here value of choice matches with second case so all the statements after case are executed sequentially
 Write a menu driven program using switch statement having the following options
 <eos>","The general form of the switch statement is `switch ( expression ) case value block break case value block break default defaultblock break`. The expression is an integer expression or characters, which can specifically be any C expression that yields an integer value or a character value. The blocks are statement lists and may contain zero or more statements. Firstly, the switch expression is evaluated, then its value is compared one by one with every case constant. If none of the case constants match the value of the expression, the block of statements under `default` is executed. Writing a switch statement inside another is called nesting of switches. A flowchart typically illustrates the structure of a switch statement, showing the expression evaluation, comparison with case constants and their bodies, and execution of a default block if no matches occur before exiting. An example program to understand the switch control statement might use an integer choice, where based on the user's input, the value of choice matches a specific case, and all statements after that case are executed sequentially. This functionality makes `switch` statements suitable for creating menu-driven programs. In contrast, `IF` statements also provide conditional control. The general form for some `IF` statements is `If ( expression ) nnn`, where `expression` is a valid FORTRAN arithmetic expression enclosed within parentheses. Another general form of the `IF` statement is `IF ( condn ) Statement`, where `condn` is a logical condition and `Statement` is an executable statement. A more elaborate form is `IF ( condn ) THEN S S ELSE S S ENDIF`, where `condn` is a logical condition, `SS` represents the statements to be executed when the condition is true, and other `SS` represent the statements to be executed when the condition is false."
merged_topic_32_0,"starting, variable, integer, letters, ijklm, root, declarations, contains, short, long","<task:merge> <sos>
 Variable definitions The statement datatype variable_name eg
 int atotal Defining a variable tells the compiler the name of the variable and the type of variable
 An identifier declared as int becomes an integer variable and can hold integer value only
 An identifier declared as float becomes a floatingpoint variable and can hold floatingpoint number only
 This is done as follows register auto int a Most compilers allow only int or char type variable to be placed in register
 If the variables are not declared the variable names starting with letters IJKLM or N are considered to be integer variable and other as real variables
 The general format for declaring integer variables is shown below INTEGER list of variables Eg
 Example IMPLICIT INTEGER ( A ) The above statement declares that all the variable name starting with the alphabet A are integer variables
 
 ++++
 
 The standard keywords are auto break case char const continue default do double else enum extern float for goto if int long register return short signed sizeof static struct switch typedef union unsigned void volatile while The keywords are all lowercase
 A C program contains the following lines char d a b c a b d a a b c a b d w The first two lines are not type declaration which state that a b and c are integer variables and that d is a character type
 A C program contains the following type declarations int a b c float root root char flag text Thus a b and c are declared to be integer variables root and root are floating variables flag is a chartype variable and text is an element chartype array
 These declarations could also have been written as follows int a int b int c float root float root char flag char text A C program contains the following type declarations short int a b c long int r s t int p q Also written as short a b c long r s t int p q short and short int are equivalent as are long and long int
 <eos>","Variable definitions use the statement `datatype variable_name`, for example, `int atotal`. Defining a variable tells the compiler its name and type. An identifier declared as `int` becomes an integer variable and can hold integer values only, while an identifier declared as `float` becomes a floating-point variable and can hold floating-point numbers only. Most compilers allow only `int` or `char` type variables to be placed in a register, which is done as follows: `register auto int a`. In some contexts, if variables are not explicitly declared, variable names starting with the letters I, J, K, L, M, or N are considered integer variables, and others as real variables. The general format for declaring integer variables is `INTEGER list of variables`, as seen in an example like `IMPLICIT INTEGER ( A )`, which declares all variable names starting with the alphabet A as integer variables. A C program utilizes standard keywords, all lowercase, including `auto`, `break`, `case`, `char`, `const`, `continue`, `default`, `do`, `double`, `else`, `enum`, `extern`, `float`, `for`, `goto`, `if`, `int`, `long`, `register`, `return`, `short`, `signed`, `sizeof`, `static`, `struct`, `switch`, `typedef`, `union`, `unsigned`, `void`, `volatile`, and `while`. C programs contain various type declarations, such as `int a b c; float root root; char flag text;`, which means `a`, `b`, and `c` are integer variables, `root` and `root` are floating variables, `flag` is a character-type variable, and `text` is an element character-type array. These declarations could also be written as `int a; int b; int c; float root; float root; char flag; char text;`. Furthermore, C programs can include type declarations like `short int a b c; long int r s t; int p q;`, which can also be written as `short a b c; long r s t; int p q;`; it is noted that `short` and `short int` are equivalent, as are `long` and `long int`. While not explicit declarations, initial lines in a C program, such as `char d a b c a b d a a b c a b d w`, might imply variable types; for instance, the first two lines could indicate `a`, `b`, and `c` are integer variables and `d` is a character type."
merged_topic_32_1,"starting, variable, integer, letters, ijklm, root, declarations, contains, short, long","<task:merge> <sos>
 This does not affect the general rule that the variables starting with the letters IJKLM or N are also integer variable
 So the above statement declare that all the variable starting with the letters AIJKLM or N are integer variable in the program
 
 ++++
 
 A C program contains the following type declarations float c c c double root root also written as long float root root A C program contains the following type declarations
 int c char star float sum Thus c is an integer variable whose initial value is star is a char type variable initially assigned the character sum is a floating point variable whose initial value is and factor is double precision variable whose initial value is
 A C program contains the following type declarations
 <eos>","A C program contains various type declarations, including float c c c, double root root (which can also be written as long float root root), int c, char star, and float sum. Based on these declarations, c (from int c) is an integer variable whose initial value is, star is a char type variable initially assigned the character, sum is a floating point variable whose initial value is, and factor is a double precision variable whose initial value is. This does not affect the general rule that variables starting with the letters I, J, K, L, M, or N are also integer variables. Consequently, the above statements declare that all variables starting with the letters A, I, J, K, L, M, or N are integer variables in the program."
merged_topic_33_0,"pointer, operator, subtract, integers, operators, operand, operands, requires","<task:merge> <sos>
 C operators can be classified into a number of categories
 Special operators C support some special operators of interest such as comma operator sizeof operator pointer operator ( and ) and member selection operator (
 Example X ( int ) ie is converted to integer by truncation Operator precedence and associativity Precedence is used to determine how an expression involving more than one operator is evaluated
 Example int a int pa Pointer Expression C allows us to add integers to or subtract integers from pointers as well as to subtract one pointer from another
 Pppp In addition to arithmetic operations discussed pointer can also be compared using the relational operators
 We may no use pointer in division or multiplication
 Pointer increment and scalar factor When we increment a pointer its value is increased by the length of the data type that it points to
 
 ++++
 
 Some operators require two operands while other act upon only one operand
 Most operators allow the individual operands to be expressions
 A few operators permit only single variable as operand
 The operands acted upon by arithmetic operators must represent numeric values
 The remainder operator ( ) requires that both operands be integers and the second operand be non zero
 Similarly the division operator ( ) requires that the second operand be nonzero
 The operation always result in a truncated quotient ( ie
 a x y delta sum ab area length width Assignment operator and equality operator are distinctly different
 These operators can not be used in place of one another
 The operand used with each of these operators must be a single variable
 <eos>","C operators can be classified into a number of categories. Some operators require two operands while others act upon only one operand. Most operators allow the individual operands to be expressions, though a few, such as the assignment operator and equality operator, permit only single variables as operands. The operands acted upon by arithmetic operators must represent numeric values. Specifically, the remainder operator (`%`) requires that both operands be integers and the second operand be non-zero. Similarly, the division operator (`/`) requires that the second operand be non-zero. The operation always results in a truncated quotient; for example, `X ( int ) ie is converted to integer by truncation`, and this is also relevant when considering `a x y delta sum ab area length width`. C also supports some special operators of interest, such as the comma operator, the sizeof operator, pointer operator ( and ), and member selection operator (. Operator precedence and associativity are used to determine how an expression involving more than one operator is evaluated. Regarding pointer expressions, C allows us to add integers to or subtract integers from pointers, as well as to subtract one pointer from another. In addition to arithmetic operations, pointers can also be compared using the relational operators, but they cannot be used in division or multiplication. When we increment a pointer, its value is increased by the length of the data type that it points to, also known as its scalar factor. It is important to note that the assignment operator (`=`) and the equality operator (`==`) are distinctly different and these operators cannot be used in place of one another."
merged_topic_0_0,"checksum, data, items, layer, protocols, numbers, sum, send, message","<task:merge> <sos>
 The checksum is used in the Internet by several protocols although not at the data link layer
 The receiver can add all the numbers received ( including the checksum )
 The sender initializes the checksum to and adds all data items and the checksum ( the checksum is considered as one data item and is shown in color )
 The sender now sends six data items to the receiver including the checksum
 Since the value of the checksum is this means that the data is not corrupted
 The receiver drops the checksum and keeps the other data items
 If the checksum is not zero the entire packet is dropped
 The checksum is sent with the data
 If the value of checksum is the message is accepted otherwise it is rejected
 Note that if there is any corruption the checksum recalculated by the receiver is not all s
 
 ++++
 
 In the Internet the checksum technique is mostly used at the network and transport layer rather than the datalink layer
 The generator then creates anextra extram mbitbit unit called the checksum which is sent with the message
 At the destination the checker creates a new checksum from the combination of the message and sent checksum
 If the checksup is all s the message is accepted other wise the message is discarded
 Example Suppose our data is a list of five bit numbers that we want to send to a destination
 In addition to sending these numbers we send the sum of the numbers
 For example if the set of numbers is ( ) we send ( ) where is the sum of the original numbers
 The receiver adds the five numbers and compares the result with the sum
 If the two are the same the receiver assumes no error accepts the five numbers and discards the sum
 For Simplicity Example We can make the job of the receiver easier if we send the negative ( complement ) of the sum called the checksum
 In this case we send ( )
 The receiver can add all the numbers received ( including the checksum )
 <eos>","The checksum is used in the Internet by several protocols, primarily at the network and transport layer rather than at the data link layer. The sender initializes the checksum and adds all data items, treating the checksum itself as one data item. An extra mbitbit unit, called the checksum, is then created by the generator and sent along with the message or data. For example, if the data is a list of five-bit numbers such as ( ), the sender can transmit ( ) where the last element is the sum of the original numbers. For simplicity, the receiver's job can be made easier if the negative (complement) of the sum, called the checksum, is sent, in which case the sender transmits ( ). The sender now sends these data items to the receiver, including the checksum. At the destination, the receiver can add all the numbers received, including the checksum. The checker creates a new checksum from the combination of the message and the sent checksum. If the checksup is all ones, or if the sum of all numbers received (including the checksum) results in zero, the message is accepted, assuming no error. Note that if there is any corruption, the checksum recalculated by the receiver will not be all ones. If the checksum is not all ones or not zero, the entire packet is dropped, or the message is rejected. Upon acceptance, the receiver drops the checksum and keeps the other data items."
merged_topic_1_0,"hamming, distance, minimum, dmin, scheme, coding, block","<task:merge> <sos>
 Table A code for error correction ( Example ) Note The Hamming distance between two words is the number of differences between corresponding bits
 Example Let us find the Hamming distance between two pairs of words
 The Hamming distance d ( ) is because
 The Hamming distance d ( ) is because Note The minimum Hamming distance is the smallest Hamming distance between all possible pairs in a set of words
 
 ++++
 
 Coding schemes are divided into two broad categories Block coding Convolution coding Dataword Codeword Block Coding Message Messageis isdivided dividedinto intoblocks blockseach eachof ofk kbits bitscalled calleddatawords datawords We Weadd addr rredundant redundantbits bitsto toeach eachblock blockto tomake makethe thelength lengthn n k k r r The Theresulting resultingn nbitbitblocks blocksare arecalled calledcodewords codewords Datawords and codewords in block coding Block Coding With k bits we can create a combination of k datawords
 Error Detection in Block coding Two conditions satisfy the error detection
 Hamming Distance It is one of the central concept in coding for error control
 Why do you think Hamming distance is important for error detection
 The reason is that the Hamming distance between the received codeword and the sent codeword is the number of bits that are corrupted during transmission
 dmin used to define the minimum Hamming distance in a coding scheme
 The dmin in this case is
 Table A code for error detection ( Example ) BLOCK CODING BLOCK CODING Minimum Hamming Distance Minimum Hamming Distance Find the minimum Hamming distance of the coding scheme in Table
 Table A code for error correction ( Example ) BLOCK CODING Three Parameters For any coding scheme we need three parameters
 Code word size n Dataword size k Minimum Hamming distance dmin A coding scheme C is written is C ( n k ) with a separate expression for dmin For example C ( ) with dmin and C ( ) with dmin
 Relationship in between Hamming distance and errors occurring Hamming distance between the sent and received codewords is the number of bits affected by the error
 <eos>","The Hamming distance between two words is defined as the number of differences between their corresponding bits. This concept is central in coding for error control, as the Hamming distance between a received codeword and a sent codeword represents the number of bits corrupted during transmission. The minimum Hamming distance (dmin) is the smallest Hamming distance between all possible pairs in a given set of words within a coding scheme. Coding schemes are broadly divided into two categories: Block coding and Convolution coding. In Block coding, a message is initially divided into blocks, each consisting of k bits, which are termed datawords. To form codewords, r redundant bits are added to each dataword, resulting in n-bit blocks, where the total length n equals k + r. These resulting n-bit blocks are known as codewords. For any coding scheme, three key parameters are essential: the codeword size (n), the dataword size (k), and the minimum Hamming distance (dmin). A coding scheme C is typically expressed as C (n, k), with a separate notation for its dmin, such as C ( ) with dmin and C ( ) with dmin. Error detection in Block coding is directly related to these fundamental concepts."
merged_topic_1_1,"hamming, distance, minimum, dmin, scheme, coding, block","<task:merge> <sos>
 Example Find the minimum Hamming distance of the coding scheme in Table
 Solution We first find all Hamming distances
 Solution We first find all the Hamming distances
 Note To guarantee the detection of up to s errors in all cases the minimum Hamming distance in a block code must be dmin s
 Example The minimum Hamming distance for our first code scheme ( Table ) is
 Example A code scheme has a Hamming distance dmin
 Error correction codes need to have an odd minimum distance (
 So the minimum Hamming distance is dmin
 Note All Hamming codes discussed in this book have dmin
 
 ++++
 
 For example send codeword received codeword bits are in error and the Hamming distance is d ( ) Minimum Hamming Distance for Error Detection If s errors occur during transmission the Hamming distance between the sent codeword and received codeword is s If it is necessary to detect upto s errors the minimum hamming distance between the valid codes must be s so that the received codeword does not match a valid codeword
 To guarantee the detection of up to s errors in all cases the minimum Hamming distance in a block code must be dmins The minimum Hamming distance for our first code scheme from the table is dmin s or s S So this code guarantees detection of only a single error
 Dataword Codeword BLOCK CODING Minimum Distance for Error Correction To guarantee correction of up to tt errors in all cases the minimum Hamming distance in a block code must be dmin t
 BLOCK CODING Minimum Distance for Error Minimum Distance for Error Correction Correction Example BLOCK CODING A code scheme has a Hamming distance dmin
 Error correction codes need to have anodd oddminimum minimumdistance distance (
 Linear Block Codes This is the widespread used coding scheme
 A linear block code is a code in which the exclusive OR of two valid codeword creates another valid codeword
 Hamming codes Hamming codes were originally designed with dmin which means that can detect up to two errors or correct one single error
 <eos>","To find the minimum Hamming distance of a coding scheme, one must first find all Hamming distances. For example, when a codeword is sent and a received codeword has bits in error, the Hamming distance is calculated as d(). If s errors occur during transmission, the Hamming distance between the sent codeword and received codeword is s. To guarantee the detection of up to s errors in all cases, the minimum Hamming distance in a block code must be dmin s; this also ensures the received codeword does not match a valid codeword. The minimum Hamming distance for our first code scheme from the table is dmin s, or s S, which guarantees detection of only a single error. For error correction, to guarantee correction of up to tt errors in all cases, the minimum Hamming distance in a block code must be dmin t. Error correction codes generally need to have an odd minimum distance, and a code scheme has a Hamming distance dmin. Linear Block Codes represent a widespread used coding scheme where the exclusive OR of two valid codewords creates another valid codeword. All Hamming codes discussed in this book have dmin; specifically, Hamming codes were originally designed with dmin which means they can detect up to two errors or correct one single error."
merged_topic_2_0,"hamming, distance, minimum, dmin, scheme, words, pairs, distances","<task:merge> <sos>
 Table A code for error correction ( Example ) Note The Hamming distance between two words is the number of differences between corresponding bits
 Example Let us find the Hamming distance between two pairs of words
 The Hamming distance d ( ) is because
 The Hamming distance d ( ) is because Note The minimum Hamming distance is the smallest Hamming distance between all possible pairs in a set of words
 Example Find the minimum Hamming distance of the coding scheme in Table
 Solution We first find all Hamming distances
 Solution We first find all the Hamming distances
 Note To guarantee the detection of up to s errors in all cases the minimum Hamming distance in a block code must be dmin s
 Example The minimum Hamming distance for our first code scheme ( Table ) is
 Example A code scheme has a Hamming distance dmin
 Error correction codes need to have an odd minimum distance (
 So the minimum Hamming distance is dmin
 Note All Hamming codes discussed in this book have dmin
 
 ++++
 
 The Hamming distance between two words ( of the same size ) as the number of difference between the corresponding bits
 Let us find the Hamming distance between two pairs of words
 The Hamming distance d ( ) is because
 The Hamming distance d ( ) is because Hamming Distance Let us find the Hamming distance between two pairs of words
 The Hamming distance d ( ) is because BLOCK CODING Minimum Hamming Distance Minimum Hamming Distance The minimum Hamming distance is the smallest Hamming distance all possible pairs in a set of words
 Solution We first find all Hamming distances
 Solution We first find all the Hamming distances
 <eos>","The Hamming distance between two words (of the same size) is the number of differences between corresponding bits. Let us find the Hamming distance between two pairs of words; for example, the Hamming distance d( ) is because [specific calculations are implied here]. The minimum Hamming distance is defined as the smallest Hamming distance between all possible pairs in a set of words. To determine this, we first find all the Hamming distances. For instance, find the minimum Hamming distance of the coding scheme presented in a Table. The minimum Hamming distance for our first code scheme (from the Table) is [value], thus the minimum Hamming distance is dmin. A code scheme has a Hamming distance dmin. To guarantee the detection of up to 's' errors in all cases, the minimum Hamming distance in a block code must be dmin â‰¥ s. Furthermore, error correction codes need to have an odd minimum distance. All Hamming codes discussed in this book inherently have a specified minimum distance (dmin)."
merged_topic_3_0,"received, codeword, transmission, corrupted, accepts, receiver, dataword, syndrome","<task:merge> <sos>
 The codeword is corrupted during transmission and is received
 The receiver accepts the received codeword and the errors are undetected
 No error occurs the received codeword is
 The received codeword is
 The codeword is received
 
 ++++
 
 Hence out of codewords are used for message transfer and rest are unused
 If the receiver receives an invalid codeword this indicates that the data was corrupted during transmission
 The receiver has a list of valid codewords
 Let k and n Dataword Codeword Let the sender encodes dataword as and send it receiver
 Receiver receives it is valid codeword
 Dataword is extracted by receiver
 Receiver incorrectly extracts dataword
 Dataword Codeword An errordetecting code can detect only the types of errors for which it is designed other types of errors may remain undetected
 If the syndrome is there is no error in the received codeword codeword is accepted as the dataword if the syndrome is the data portion of the received codeword is discarded
 The codeword created from this dataword is which is sent to the receiver
 The dataword is created at the receiver
 Note that here the dataword is wrongly created due to the syndrome valueThe Thesimply simplyparity paritycheckcheckdecoder decodercannot cannotdetect detectan aneven evennumbers numbersof oferrors errors
 Dataword becomes codeword is received syndrome no error
 The dataword is sent as codeword
 Relationship among the sent codeword error received codeword and the generator
 The receiver divides the received codeword by g ( x ) to get the syndrome
 <eos>","Let k denote the dataword and n denote the codeword. The sender encodes the dataword into a codeword (n) and transmits it to the receiver. This codeword is received, though it can be corrupted during transmission. The receiver maintains a list of valid codewords; hence, out of all possible codewords, some are used for message transfer while the rest remain unused. If the receiver receives an invalid codeword, this indicates that the data was corrupted during transmission. To check for errors, the receiver divides the received codeword by g(x) to obtain the syndrome. If the syndrome indicates no error, the received codeword is accepted as the dataword, which is then extracted by the receiver. Conversely, if the syndrome is non-zero, the data portion of the received codeword is discarded. It is crucial to understand that an error-detecting code can only detect specific types of errors for which it is designed, and other types of errors may remain undetected; for example, a simple parity check decoder cannot detect an even number of errors. Sometimes, no error occurs in the received codeword at all. However, even when the received codeword is accepted and errors are undetected, the receiver might still incorrectly extract or create the dataword, particularly if the dataword is wrongly created due to the syndrome value."
merged_topic_4_0,"generator, note, simple, errors, isolated, paritycheck, odd, number, parity","<task:merge> <sos>
 Note A simple paritycheck code is a singlebit errordetecting code in which n k with dmin
 This shows that the simple parity check guaranteed to detect one single error can also find any odd number of errors
 Note A simple paritycheck code can detect an odd number of errors
 Note In a cyclic code those e ( x ) errors that are divisible by g ( x ) are not caught
 Note If the generator has more than one term and the coefficient of x is all single errors can be caught
 Example Find the status of the following generators related to two isolated singlebit errors
 This is a very poor choice for a generator
 A codeword with two isolated errors up to bits apart can be detected by this generator
 Note A generator that contains a factor of x can detect all oddnumbered errors
 Note A good polynomial generator needs to have the following characteristics
 
 ++++
 
 Simple parityCheck Code In Simple paritycheck code a kbit dataword is changed to an nbit codeword where nk The extra bit called the parity bit The extra bit called the parity bit is selected to make the total number of s in the codeword even
 Although some implementations specify an odd number of s we discuss the even case
 A simple paritycheck code is a singlebit errordetecting code in which n k with dmin
 At Generator ro aaaa ( modulo ) Where if number of s is even the result is zero if number of s is odd the result is one Minimum Distance for Linear Block Codes Simple paritycheck code C ( ) Minimum Distance for Linear Block Codes At Generator ro aaaa ( modulo ) Where if number of s is even the result is zero if number of s is odd the result is one The checker at the receiver does the same thing as the generator in the sender with one exception The addition is done over all bits
 Simple paritycheck ( Cont ) Assume the sender sends the dataword
 Simple paritycheck ( Cont )
 <eos>","A simple parity-check code is a single-bit error-detecting code in which n k with dmin; in this code, a k-bit dataword is changed to an n-bit codeword where n k, and the extra bit, called the parity bit, is selected to make the total number of 1s in the codeword even, although some implementations specify an odd number of 1s, we discuss the even case. This code is guaranteed to detect one single error and can also find any odd number of errors. At the generator ro aaaa (modulo), if the number of 1s is even, the result is zero, and if the number of 1s is odd, the result is one; the checker at the receiver does the same thing as the generator in the sender, with the exception that the addition is done over all bits. If a generator has more than one term and the coefficient of x, all single errors can be caught. A generator that contains a factor of x can detect all odd-numbered errors. However, in a cyclic code, those e (x) errors that are divisible by g (x) are not caught. A good polynomial generator needs to have the following characteristics. For example, when finding the status of generators related to two isolated single-bit errors, some options are a very poor choice for a generator; however, a codeword with two isolated errors up to bits apart can be detected by this generator."
merged_topic_5_0,"codeword, received, receiver, table, dataword, syndrome","<task:merge> <sos>
 First the receiver finds that the received codeword is not in the table
 The receiver assuming that there is only bit corrupted uses the following strategy to guess the correct dataword
 Comparing the received codeword with the first codeword in the table ( versus ) the receiver decides that the first codeword is not the one that was sent because there are two different bits
 The original codeword must be the second one in the table because this is the only one that differs from the received codeword by bit
 
 ++++
 
 Hence out of codewords are used for message transfer and rest are unused
 If the receiver receives an invalid codeword this indicates that the data was corrupted during transmission
 The receiver has a list of valid codewords
 Let k and n Dataword Codeword Let the sender encodes dataword as and send it receiver
 Receiver receives it is valid codeword
 Dataword is extracted by receiver
 Receiver incorrectly extracts dataword
 Dataword Codeword An errordetecting code can detect only the types of errors for which it is designed other types of errors may remain undetected
 If the syndrome is there is no error in the received codeword codeword is accepted as the dataword if the syndrome is the data portion of the received codeword is discarded
 The codeword created from this dataword is which is sent to the receiver
 The dataword is created at the receiver
 Note that here the dataword is wrongly created due to the syndrome valueThe Thesimply simplyparity paritycheckcheckdecoder decodercannot cannotdetect detectan aneven evennumbers numbersof oferrors errors
 Dataword becomes codeword is received syndrome no error
 The dataword is sent as codeword
 Relationship among the sent codeword error received codeword and the generator
 The receiver divides the received codeword by g ( x ) to get the syndrome
 <eos>","Let k and n denote Dataword and Codeword respectively. The sender encodes a dataword as a codeword, which is then sent to the receiver. Only a subset of codewords are used for message transfer, with the rest remaining unused. The receiver possesses a list of valid codewords. If the receiver finds that the received codeword is not in its table, or if it receives an invalid codeword, this indicates that the data was corrupted during transmission. An error-detecting code can only detect the types of errors for which it is designed, while other types of errors may remain undetected. The relationship among the sent codeword, error, received codeword, and the generator is crucial here. The receiver divides the received codeword by g(x) to obtain the syndrome. If the syndrome indicates no error, the received codeword is accepted as the dataword. However, if the syndrome is non-zero, the data portion of the received codeword is discarded, or the dataword might be wrongly created due to the syndrome value, as a simple parity check decoder cannot detect an even number of errors. Assuming there is only a single bit corrupted, the receiver employs a strategy to guess the correct dataword. By comparing the received codeword with the first codeword in the table, for example, the receiver may decide it was not the one sent if there are two different bits. In such cases, the original codeword must be the one in the table that differs from the received codeword by only one bit, allowing the receiver to extract the dataword."
merged_topic_6_0,"complement, arithmetic, ones, number, using, represent","<task:merge> <sos>
 Note In moduloN arithmetic we use only the integers in the range to N inclusive
 Example How can we represent the number in ones complement arithmetic using only four bits
 Solution The number in binary is ( it needs five bits )
 We can wrap the leftmost bit and add it to the four rightmost bits
 Solution In ones complement arithmetic the negative or complement of a number is found by inverting all bits
 Positive is negative is
 If we consider only unsigned numbers this is
 In other words the complement of is
 Another way to find the complement of a number in ones complement arithmetic is to subtract the number from n ( in this case )
 Example Let us redo Exercise using ones complement arithmetic
 However can not be expressed in bits
 The extra two bits are wrapped and added with the sum to create the wrapped sum value
 The sum is wrapped and becomes
 All words are added using ones complement addition
 
 ++++
 
 Ones Complement The previous example has one major drawback
 We have solution to use ones complement arithmetic
 In this ones complement arithmetic we can represent unsigned numbers between and mm using only m bits
 In ones complement arithmetic we have two s one positive and one negative which are complements of each other
 How can we represent the number in ones complement arithmetic using only four bits
 We have ( ) ( ) ( ) ( ) How can we represent the number in ones complement arithmetic using only four bits
 Solution In ones complement arithmetic the negative or complement of a number is found by inverting all bits
 Positive is Ones complement of is If we consider only unsigned number this is
 In other words the complement of is
 <eos>","In one's complement arithmetic, unsigned numbers between 0 and 2^m - 1 can be represented using m bits. The negative or complement of a number is found by inverting all its bits; for example, positive 10101 becomes negative 01010. Another way to find the complement of a number in one's complement arithmetic is to subtract the number from 2^n - 1 (in this case, 1111). Notably, in this arithmetic, there are two zeros, one positive and one negative, which are complements of each other. If only unsigned numbers are considered, the complement of 1111 is 0000. Now, let us consider how to represent the number 15 in one's complement arithmetic using only four bits: 15 in binary is 1111, which fits perfectly into four bits. Other examples of four-bit representations include 14 (1110), 13 (1101), and 12 (1100). Note that in modulo N arithmetic, we use only integers in the range 0 to N inclusive. The previous example has one major drawback, particularly when a number, such as one whose binary representation needs five bits, must be expressed using only four bits. In such cases, the leftmost bit can be wrapped and added to the four rightmost bits. All words are added using one's complement addition; for instance, if a sum results in extra two bits, these are wrapped and added with the sum to create the wrapped sum value, which then becomes 0000. This technique can be applied when redoing Exercise 3 using one's complement arithmetic, especially when a number, such as one that requires five bits (like 2^5), cannot be expressed directly in fewer bits."
merged_topic_7_0,"valid, codeword, match, sent, errors, receiver, dataword, received, syndrome","<task:merge> <sos>
 For example if the third codeword ( ) is sent and one error occurs the received codeword does not match any valid codeword
 If two errors occur however the received codeword may match a valid codeword and the errors are not detected
 Again we see that when any of the valid codewords is sent two errors create a codeword which is not in the table of valid codewords
 However some combinations of three errors change a valid codeword to another valid codeword
 Otherwise there is an error somewhere and the data are not accepted
 
 ++++
 
 Hence out of codewords are used for message transfer and rest are unused
 If the receiver receives an invalid codeword this indicates that the data was corrupted during transmission
 The receiver has a list of valid codewords
 Let k and n Dataword Codeword Let the sender encodes dataword as and send it receiver
 Receiver receives it is valid codeword
 Dataword is extracted by receiver
 Receiver incorrectly extracts dataword
 Dataword Codeword An errordetecting code can detect only the types of errors for which it is designed other types of errors may remain undetected
 If the syndrome is there is no error in the received codeword codeword is accepted as the dataword if the syndrome is the data portion of the received codeword is discarded
 The codeword created from this dataword is which is sent to the receiver
 The dataword is created at the receiver
 Note that here the dataword is wrongly created due to the syndrome valueThe Thesimply simplyparity paritycheckcheckdecoder decodercannot cannotdetect detectan aneven evennumbers numbersof oferrors errors
 Dataword becomes codeword is received syndrome no error
 The dataword is sent as codeword
 Relationship among the sent codeword error received codeword and the generator
 The receiver divides the received codeword by g ( x ) to get the syndrome
 <eos>","Let k and n represent dataword and codeword lengths respectively. The sender encodes a dataword into a codeword, which is then sent to the receiver. The receiver has a list of valid codewords and, to check for errors, divides the received codeword by g(x) to obtain a syndrome. If the syndrome is zero, it indicates no error in the received codeword, which is then accepted as the dataword from which the original dataword is extracted. However, if the syndrome is non-zero, it signifies that the data was corrupted during transmission, and the received codeword, or specifically its data portion, is discarded, as an invalid codeword indicates an error somewhere and the data are not accepted, thus preventing the receiver from incorrectly extracting the dataword. An error-detecting code is designed to detect specific types of errors, and other types may remain undetected. For instance, if a valid codeword is sent and one error occurs, the received codeword will not match any valid codeword, thus detecting the error. Yet, if two errors occur, the received codeword may, in some cases, match a valid codeword, leading to errors not being detected, particularly as a simple parity check decoder cannot detect an even number of errors. Conversely, sometimes when two errors occur, they create a codeword which is not in the table of valid codewords, enabling detection. Moreover, some combinations of three errors can change a valid codeword to another valid codeword, causing them to go undetected. Hence, out of all possible codewords, some are used for message transfer, and the rest are unused, with the relationship among the sent codeword, the error, the received codeword, and the generator being crucial for error detection."
merged_topic_8_0,"divisible, divide, useless, greater, polynomial, remainder, xoois, xig","<task:merge> <sos>
 No xi can be divisible by x
 If i is equal to or greater than xi is divisible by g ( x )
 c All values of i make xi divisible by g ( x )
 This g ( x ) is useless
 d This polynomial can not divide xt if t is less than
 It should not divide xt for t between and n
 
 ++++
 
 If the term does not have remainder ( syndrome ) either e ( x ) or e ( x ) is divisible by g ( x )
 then xig ( x ) will have a remainder
 If g ( x ) have at least two terms and the coefficient ofx xoois is then e ( x ) can not be divided by g ( x ) ie there will be some remainder
 No xi can be divisible by x
 If i is equal to or greater than xi is divisible by g ( x )
 c All values of i make xi divisible by g ( x )
 <eos>","No xi can be divisible by x. If i is equal to or greater than, xi is divisible by g(x), and all values of i make xi divisible by g(x). This g(x) is useless. If the term does not have remainder (syndrome), then either e(x) or e(x) is divisible by g(x); however, xig(x) will then have a remainder. Moreover, if g(x) has at least two terms and the coefficient of xoois is, then e(x) cannot be divided by g(x), meaning there will be some remainder. Finally, this polynomial cannot divide xt if t is less than, and it should not divide xt for t between and n."
merged_topic_9_0,"error, discuss, detection, correction, section, data, applications, require, chances, corrupt","<task:merge> <sos>
 Some applications require that errors be detected and corrected
 INTRODUCTION Let us first discuss some issues related directly or indirectly to error detection and correction
 Let us first discuss some issues related directly or indirectly to error detection and correction
 Topics discussed in this section Types of Errors Redundancy Detection Versus Correction Forward Error Correction Versus Retransmission Coding Modular Arithmetic Topics discussed in this section Note In a singlebit error only bit in the data unit has changed
 Table A code for error detection ( Example ) Note An errordetecting code can detect only the types of errors for which it is designed other types of errors may remain undetected
 What is the error detection and correction capability of this scheme
 In other words if this code is used for error correction part of its capability is wasted
 For each case what is the error that can not be caught
 Table Standard polynomials CHECKSUM The last error detection method we discuss here is called the checksum
 However we briefly discuss it here to complete our discussion on error checking The last error detection method we discuss here is called the checksum
 However we briefly discuss it here to complete our discussion on error checking Topics discussed in this section Idea Ones Complement Internet Checksum Topics discussed in this section Example Suppose our data is a list of five bit numbers that we want to send to a destination
 If the result is it assumes no error otherwise there is an error
 
 ++++
 
 Data Link Layer Data can be corrupted during transmission
 during transmissionSome applications require that Some applications require that errors be detected and corrected
 Data can be corrupted Error Detection and Correction Network must be able to transfer data from one devices to another with acceptable accuracy
 The chances of data being corrupt can not be ignored
 The number of errors and the size of the message are important factors
 What is the error detection and correction capability of this scheme
 <eos>","INTRODUCTION: Let us first discuss some issues related directly or indirectly to error detection and correction. Some applications require that errors be detected and corrected, as data can be corrupted during transmission. The Data Link Layer, in particular, must be able to transfer data from one device to another with acceptable accuracy; thus, the chances of data being corrupt cannot be ignored. The number of errors and the size of the message are important factors in this context. Topics discussed in this section include Types of Errors, Redundancy, Detection Versus Correction, Forward Error Correction Versus Retransmission, Coding, and Modular Arithmetic. Note that in a single-bit error, only one bit in the data unit has changed. An error-detecting code can detect only the types of errors for which it is designed; other types of errors may remain undetected. In other words, if this code is used for error correction, part of its capability is wasted. The last error detection method we discuss here is called the checksum; however, we briefly discuss it here to complete our discussion on error checking. Related checksum topics include Idea, Ones Complement, and Internet Checksum. For example, suppose our data is a list of five-bit numbers that we want to send to a destination; if the result is 'it', it assumes no error, otherwise there is an error. For each case, we must consider what error cannot be caught and what is the error detection and correction capability of this scheme."
merged_topic_10_0,"generator, note, simple, errors, isolated, divisible, caught, useless, criteria","<task:merge> <sos>
 Note A simple paritycheck code is a singlebit errordetecting code in which n k with dmin
 This shows that the simple parity check guaranteed to detect one single error can also find any odd number of errors
 Note A simple paritycheck code can detect an odd number of errors
 Note In a cyclic code those e ( x ) errors that are divisible by g ( x ) are not caught
 Note If the generator has more than one term and the coefficient of x is all single errors can be caught
 Example Find the status of the following generators related to two isolated singlebit errors
 This is a very poor choice for a generator
 A codeword with two isolated errors up to bits apart can be detected by this generator
 Note A generator that contains a factor of x can detect all oddnumbered errors
 Note A good polynomial generator needs to have the following characteristics
 
 ++++
 
 To find the criteria that must be imposed on the generator g ( x ) to detect the type of error that need to be detected
 Those errors that are not divisible by g ( x ) are not In a cyclic code those e ( x ) errors that are divisible by g ( x ) are not caught
 Note If the generator has more than one term and the coefficient of x is all single errors can be caught
 This g ( x ) is useless
 <eos>","A simple parity-check code is a single-bit error-detecting code in which n k with dmin; this simple parity check is guaranteed to detect one single error and can also find any odd number of errors. To detect the specific type of error that needs to be detected, criteria must be imposed on the generator g(x), as a good polynomial generator needs particular characteristics. In a cyclic code, those errors e(x) that are divisible by g(x) are not caught. If the generator has more than one term, its coefficient of x is such that all single errors can be caught. Furthermore, a generator that contains a factor of x can detect all odd-numbered errors. For instance, some generators, such as one capable of detecting a codeword with two isolated errors up to bits apart, can be useful, while others prove to be a very poor choice or useless. This involves finding the status of generators related to two isolated single-bit errors."
file1_topic_5,"truck, trucks, waste, morgan, vesilind","<task:clean> <sos>
 ( Vesilind and Morgan )
 Exercise A town with residents wants to establish a municipally owned and operated solid waste ( garbage ) collection program
 They can purchase one of three possible trucks that have the following capacity Truck A m Truck B m Truck C m If the truck is to collect the refuse every day and the truck will have to make only one trip per day to the landfill which truck or trucks will have sufficient capacity
 For example if a municipal engineer is considering purchasing refuse collection vehicles and finds that the following alternatives to buy the Truck Expensive trucks Higher compaction reduces volume reduces no
 of trips per day Inexpensive trucks lower compaction requires more trips per day How does the engineer know which is less expensive for the community
 When all the numbers are in and the variables are evaluated the information is synthesized into a solution ( Vesilind and Morgan ) Similarly Solid Waste Management Act This act addresses the management disposal and treatment of solid waste to reduce environmental pollution and promote better waste management practices
 <eos>","(Vesilind and Morgan)
 Exercise: A town with residents wants to establish a municipally owned and operated solid waste (garbage) collection program. They can purchase one of three possible trucks that have the following capacities: Truck A (m), Truck B (m), Truck C (m). If the truck is to collect refuse every day and is required to make only one trip per day to the landfill, which truck or trucks will have sufficient capacity? For example, if a municipal engineer is considering purchasing refuse collection vehicles and finds the following alternatives: expensive trucks (higher compaction reduces volume, reducing the number of trips per day) versus inexpensive trucks (lower compaction requires more trips per day). How does the engineer determine which option is less expensive for the community? When all the numbers are in and the variables are evaluated, the information is synthesized into a solution (Vesilind and Morgan). Similarly, the Solid Waste Management Act addresses the management, disposal, and treatment of solid waste to reduce environmental pollution and promote better waste management practices."
file1_topic_6,"assessment, environmental, guided, schedule, epr","<task:clean> <sos>
 The Environmental Impact of any project is evaluated through different assessment methods
 This involves considering factors such as air and water pollution greenhouse gas emissions habitat destruction and resource depletion
 This includes assessing the projects impact on local communities public health cultural heritage and overall quality of life
 Brief Environmental Study ( BES ) is performed as guided by schedule of EPR
 Initial Environmental Examination ( IEE ) is performed as guided by schedule of EPR
 Environmental Impacts Assessment ( EIA ) is performed as guided by schedule of EPR
 While carrying out an Environmental Assessment ( EA ) of a project a noproject scenario is referred against the various alternatives which help to identify the environmental impacts and engineering or social mitigation measures
 Similarly life cycle assessment ( LCA ) of products is increasingly used in identifying the environmental impacts caused by the manufacturing process and use of the products
 <eos>","The Environmental Impact of any project is evaluated through different assessment methods. This involves considering factors such as air and water pollution, greenhouse gas emissions, habitat destruction, and resource depletion. This includes assessing the project's impact on local communities, public health, cultural heritage, and overall quality of life. Brief Environmental Study (BES) is performed as guided by the schedule of EPR. Initial Environmental Examination (IEE) is performed as guided by the schedule of EPR. Environmental Impacts Assessment (EIA) is performed as guided by the schedule of EPR. While carrying out an Environmental Assessment (EA) of a project, a no-project scenario is compared against various alternatives, which helps to identify the environmental impacts and engineering or social mitigation measures. Similarly, life cycle assessment (LCA) of products is increasingly used to identify the environmental impacts caused by the manufacturing process and use of products."
file1_topic_7,"beds, resort, roads, hotels","<task:clean> <sos>
 Hospitals from beds up to beds
 Hotels or Resort from beds to beds c Bridges up to m d Municipal or urban roads
 Hospital from to beds Hotel and resort of to beds
 b Bridge above m c New road construction of up to km
 d Upgrading roads from km to km
 e Acquisition of forest area from ha to ha
 Hospital and hotels above beds
 Any projects acquiring National parks or conservation areas or forests above ha
 <eos>","Hospitals with beds from up to beds; Hotels or resorts with beds from to beds; Bridges up to m; Municipal or urban roads; Hospitals with beds from to beds; Hotels and resorts with beds from to beds; Bridges above m; New road construction of up to km; Upgrading roads from km to km; Acquisition of forest areas from ha to ha; Hospitals and hotels with beds above beds; Any projects acquiring National Parks, conservation areas, or forests above ha."
file1_topic_8,"plant, treatment, wastewater, mld, nepali","<task:clean> <sos>
 e Up to MLD water supply projects with treatment plant and sewer
 f Solar power plant upto MW Hydropower upto MW
 c Hydropower production above MW
 The stream water has been diverted using a dam and is supplied to a treatment plant
 If the treatment plant can remove of the suspended solids find the concentration of sediments in the effluent of treatment plant
 She would recognize the highly variable nature of land costs construction costs coverage of the municipality as it extends to rural areas as well required treatment efficiency etc
 Yet the mayor wants a preliminary estimate a number and quickly
 For example she might know that the population of the community to be served is approximately
 Next she estimates based on experience that the domestic wastewater flow might be about Liter per capita per day thus requiring a plant of about MLD capacity
 With room for expansion industrial effluents storm inflow and infiltration of groundwater into the sewers she may estimate that MLD capacity may be adequate
 Such domestic wastewater treatment plant she is aware cost about crore ( à¤•à¤°à¤¡ ) Nepali Rupees per MLD of influent wastewater treated
 She calculates that the plant would cost about crore ( Arba ) Nepali Rupees
 Giving him herself a cushion hshe could respond by saying about billion Nepali Rupees
 This is exactly the type of information the mayor seeks
 She has no use for anything more accurate because she might be trying to decide whether to ask for a budget of billion or billion
 Exercise The wastewater treatment plant in Guheshwori receives ms of wastewater
 The plant was established to directly serve a population of X in Gokarna and Chabahil area
 The total project cost of the plant was half billion Nepali Rupees ( NRs ) in
 Estimate the per capita cost of the project in in ( a ) NRs MLD of treated wastewater and ( b ) NRsindividual benefitted
 <eos>","<task:clean> <sos>
 e Up to MLD water supply projects, including treatment plants and sewers.
 f Solar power plants up to MW; Hydropower up to MW.
 c Hydropower production above MW.
 The stream water has been diverted using a dam and is then supplied to a treatment plant.
 If the treatment plant can remove some of the suspended solids, find the concentration of sediments in the effluent of the treatment plant.
 She would recognize the highly variable nature of land costs, construction costs, the municipality's coverage (as it extends to rural areas as well), required treatment efficiency, etc.
 Yet, the mayor wants a preliminary estimateâ€”a numberâ€”and wants it quickly.
 For example, she might know that the population of the community to be served is approximately.
 Next, she estimates, based on experience, that the domestic wastewater flow might be about Liters per capita per day, thus requiring a plant of about MLD capacity.
 With room for expansion, industrial effluents, storm inflow, and infiltration of groundwater into the sewers, she may estimate that MLD capacity may be adequate.
 She is aware that such a domestic wastewater treatment plant costs about crore (à¤•à¤°à¤¡) Nepali Rupees per MLD of influent wastewater treated.
 She calculates that the plant would cost about crore (Arba) Nepali Rupees.
 Giving herself a cushion, she could respond by saying about billion Nepali Rupees.
 This is exactly the type of information the mayor seeks.
 She has no use for anything more accurate because she might be trying to decide whether to ask for a budget of billion or billion.
 Exercise: The wastewater treatment plant in Guheshwori receives ms of wastewater.
 The plant was established to directly serve a population of X in the Gokarna and Chabahil area.
 The total project cost of the plant was half billion Nepali Rupees (NRs) in.
 Estimate the per capita cost of the project in (a) NRs/MLD of treated wastewater and (b) NRs/individual benefitted.
 <eos>"
file1_topic_9,"professional, members, seen, monitor, agencies","<task:clean> <sos>
 Produce and monitor the professional code of conduct
 To continuously enhance the highest professional ideals among the members and widen it
 SEEN is governed by an executive committee of seven ( ) members elected by the general members of the society
 Some of the major responsibilities of SEEN includes Enhancement of technical and professional competencies of its members
 It works for the protection of the basic professional rights It supports the government and other agencies in the formulation of policies and strategies in related fields
 SEEN is committed to carry out various professional activities that are intended to bring qualitative results to improve the sanitary and environmental conditions of the country
 <eos>",SEEN produces and monitors the professional code of conduct. SEEN continuously enhances the highest professional ideals among its members and widens them. SEEN is governed by an executive committee of seven members elected by the general members of the society. Some of the major responsibilities of SEEN include the enhancement of technical and professional competencies of its members. It works for the protection of the basic professional rights. It supports the government and other agencies in the formulation of policies and strategies in related fields. SEEN is committed to carry out various professional activities that are intended to bring qualitative results that improve the sanitary and environmental conditions of the country.
file1_topic_10,"river, example, tce, ppm, extremely","<task:clean> <sos>
 For example a river discharge of ms a sand particle of mm snow mass of km in the Himalayas
 In the study of environmental engineering it is quite common to encounter both extremely large quantities and extremely small ones
 The concentration of some toxic substance may be measured in parts per billion while the discharge of a large river may be measured with a larger unit
 A typical example of the concentration of total dissolved solid in a polluted river like at Bagmati at Teku is mgL or kgm
 The unit ppm is typically used in sludges or sediments
 Exercise kg of soil sample was analyzed and found to contain mg TCE
 What is the TCE concentration in mgkg ppm and ppb
 For example the BOD or nutrient loads of a wastewater discharged from a community
 Exercise A stream can have a sediment load of up to mgL in the rainy season
 <eos>","In the study of environmental engineering, it is quite common to encounter both extremely large quantities and extremely small ones. For example, a river discharge of mÂ³/s, a sand particle of mm, or a snow mass of kmÂ³ in the Himalayas. The concentration of some toxic substance may be measured in parts per billion, while the discharge of a large river may be measured with a larger unit. A typical example of the concentration of total dissolved solids in a polluted river, such as the Bagmati at Teku, is mg/L or kg/mÂ³. The unit ppm is typically used in sludges or sediments. Exercise: A kg soil sample was analyzed and found to contain mg of TCE. What is the TCE concentration in mg/kg, ppm, and ppb? For example, the BOD or nutrient loads of wastewater discharged from a community. Exercise: A stream can have a sediment load of up to mg/L in the rainy season."
file1_topic_11,"density, solution, mass, volume, solute","<task:clean> <sos>
 Table Average size of the substances Note meter ( m ) centimeter ( cm ) millimeter ( mm ) micrometer ( Î¼m ) Concentration and density The mass density or density of a material or a solution is defined as its mass per unit volume or Ï Where Ï density M mass V volume In SI system the base unit for density is kgm
 Water in the SI system has a density of kgm which is equal to gcm
 Whereas the concentration of a substance in a solution is defined as mass of solute per unit volume of the solution ( including solute and liquid )
 M A CA VA V B Where CA concentration of A MA Mass of material A VA Volume of material A In SI system the basic unit for concentration is kgm
 Since solutes in solution are often analyzed by weight the terms milligram per liter or microgram per liter is used
 It is often assumed that the substance does not change the density of water
 If such assumption is made and we recall that mL water weighs g then The use of mgL is most common in water applications as the volume of the solution is usually determined as well as the mass of the solute
 <eos>","Units commonly used to denote the average size of substances include: meter (m), centimeter (cm), millimeter (mm), and micrometer (Âµm).
 
 Regarding concentration and density: The mass density (or simply density) of a material or solution is defined as its mass per unit volume. This is represented as Ï = M/V, where Ï is density, M is mass, and V is volume. In the SI system, the base unit for density is kg/mÂ³. Water in the SI system has a density of kg/mÂ³, which is equal to g/cmÂ³.
 
 In contrast, the concentration of a substance in a solution is defined as the mass of solute per unit volume of the solution (including both solute and liquid). This can be expressed as C_A = M_A / V_A, where C_A is the concentration of material A, M_A is the mass of material A, and V_A is the volume of material A. In the SI system, the basic unit for concentration is kg/mÂ³.
 
 Since solutes in solution are often analyzed by weight, the terms milligram per liter (mg/L) or microgram per liter (Âµg/L) are used. It is often assumed that the substance does not change the density of water. If such an assumption is made, and we recall that 1 mL of water weighs 1 g, then the use of mg/L is most common in water applications, as the volume of the solution is usually determined, as well as the mass of the solute."
file1_topic_12,"flow, rate, volume, volumetric, second","<task:clean> <sos>
 Flow ( discharge ) rate The flow rate can be expressed as volume of the liquid per unit time
 QV VT Where QV Volumetric flow rate V Volume of the liquid T Time period In SI system the basic unit of volumetric flow rate is ms
 The flow of water is measured in units of volume per unit time
 Commonly used units for flow measurement are liter per second ( lps ) liter per day ( LD ) millions liter per day ( MLD ) cubic meter per second ( ms )
 m L MLD Liters per day In engineering processes the flow rate can be either volume flow rate or mass flow rate
 Mass and volumetric flow rates are not independent quantities because the mass ( M ) of material passing a point in a flow line during unit time is related to the volume ( V ) of that material
 Mathematically Let us assume a tank of volume V with Length L Width W and Height H and Q is the volumetric flow rate
 Let us assume v is the velocity of water flowing through tank
 The tapped flow is lps ( liters per second )
 <eos>","The flow (discharge) rate can be expressed as the volume of liquid per unit time. It is represented as Q_V = V/T, where Q_V is the volumetric flow rate, V is the volume of the liquid, and T is the time period. In the SI system, the basic unit of volumetric flow rate is mÂ³/s. The flow of water is measured in units of volume per unit time. Commonly used units for flow measurement include liters per second (lps), liters per day (LD), millions of liters per day (MLD), and cubic meters per second (mÂ³/s). In engineering processes, the flow rate can be either volume flow rate or mass flow rate. Mass and volumetric flow rates are not independent quantities, because the mass (M) of material passing a point in a flow line during a unit time is related to the volume (V) of that material. Mathematically, let us assume a tank of volume V, with length L, width W, and height H. Let Q be the volumetric flow rate. Let us assume v is the velocity of water flowing through the tank. The tapped flow is lps (liters per second)."
file1_topic_13,"time, hrt, retention, container, fluid","<task:clean> <sos>
 Hydraulic Retention Time One of the most important concepts in treatment processes is retention time also called detention time or even residence time
 It is the time an average particle of the fluid spends in a container through which the fluid flows ( which is the time it is exposed to treatment or a reaction )
 An alternate definition is the time it takes to fill the container
 We know Velocity ( v ) Distance ( L ) Time ( HRT ) HRT Multiplying both side by Cross sectional Area ( A ) HRT HRT ( Since V AL and QAv ) The average retention time can be increased by reducing the flow rate Q or increasing the volume V and decreased by doing the opposite
 In SI system the basic unit of retention time is sec
 <eos>","Hydraulic Retention Time is one of the most important concepts in treatment processes, also called detention time or even residence time. It is the time an average particle of the fluid spends in a container through which the fluid flows (which is the time it is exposed to treatment or a reaction). An alternate definition is the time it takes to fill the container. We know Velocity (v), Distance (L), and Time (HRT). HRT can be derived as V/Q by multiplying by Cross-sectional Area (A), since V = AL and Q = Av. The average retention time can be increased by reducing the flow rate (Q) or increasing the volume (V), and decreased by doing the opposite. In the SI system, the basic unit of retention time is seconds."
file2_topic_14,"professional, professionals, clients, expert, independent","<task:clean> <sos>
 The professionalism is defined by following seven characteristics Professional decisions are made by means of general principles theories or propositions that are independent of the particular case under consideration
 Professional decisions imply knowledge in a specific area in which the person is expert
 The professional is an expert only in his or her profession and not as expert at everything
 The professionals relations with his or her clients are objective and independent of particular sentiments about them
 A professional achieves status and financial reward by accomplishment not by inherent qualities such as birth order race religion sex or age or by membership in a union
 A professionals decisions are assumed to be on behalf of the client and to be independent of selfinterest
 The professional relates to a voluntary association of professionals
 A professional is someone who knows better what is good for clients than do the clients
 The professionals expertise puts the client into a very vulnerable position
 This vulnerability has necessitated the development of strong professional codes and ethics which serve to protect the client
 Such codes are enforced through colleague peer group
 <eos>","Professionalism is defined by the following seven characteristics. Professional decisions are made using general principles, theories, or propositions that are independent of the particular case under consideration.
 Professional decisions imply knowledge in a specific area in which the person is an expert.
 A professional is an expert only in his or her profession, and not an expert at everything.
 A professional's relations with his or her clients are objective and independent of particular sentiments about them.
 A professional achieves status and financial reward by accomplishment, not by inherent qualities such as birth order, race, religion, sex, or age, or by membership in a union.
 A professional's decisions are assumed to be on behalf of the client and to be independent of self-interest.
 A professional relates to a voluntary association of professionals.
 A professional is someone who knows what is good for clients better than the clients do.
 A professional's expertise puts the client in a very vulnerable position.
 This vulnerability has necessitated the development of strong professional codes and ethics, which serve to protect the client.
 Such codes are enforced through the colleague peer group."
file2_topic_15,"risk, risks, smoking, imposed","<task:clean> <sos>
 Sometimes these decisions turn out to be poor and or not appropriate
 Yet when a decision turns out to be wrong the results are often catastrophic
 Risk management on the other hand is the process of reducing risks that are deemed unacceptable
 In our private lives we are continually doing both
 Smoking cigarettes is a risk to our health and it is possible to calculate the potential effect of smoking
 Quitting smoking is a method of risk management because the effect is to reduce the risk of dying of certain diseases
 Some risks we choose to accept while other risks are imposed upon us from outside
 We choose for example to drink alcohol drive cars or fly in airplanes
 Each of these activities has a calculated risk because risks are imposed from outside and we can do little about them
 We can do little about this risk and it is this type of risk that people resent the most
 In fact studies have shown that the acceptability of an involuntary risk is on the order of times less than our acceptability of a voluntary risk
 Such human behavior can explain why people who smoke cigarettes still get upset about air quality or why people driving recklessly complain about the bad road conditions
 Thus for externally imposed risks it is essential to decide what levels of risks are acceptable
 <eos>","Sometimes these decisions turn out to be poor and/or inappropriate. Yet, when a decision turns out to be wrong, the results are often catastrophic. Risk management, on the other hand, is the process of reducing risks that are deemed unacceptable. In our private lives, we are continually doing both. Smoking cigarettes is a risk to our health, and its potential effects can be calculated. Quitting smoking is a method of risk management because its effect is to reduce the risk of dying from certain diseases. Some risks we choose to accept, while others are imposed upon us from outside. We choose, for example, to drink alcohol, drive cars, or fly in airplanes. Each of these activities has a calculated risk, because risks are imposed from outside, and we can do little about them. We can do little about this risk, and it is this type of risk that people resent the most. In fact, studies have shown that the acceptability of an involuntary risk is on the order of times less than our acceptability of a voluntary risk. Such human behavior can explain why people who smoke cigarettes still get upset about air quality, or why people driving recklessly complain about bad road conditions. Thus, for externally imposed risks, it is essential to decide what levels of risk are acceptable."
file2_topic_16,"ethical, theories, values, focuses, conflict","<task:clean> <sos>
 look alike ( Vesilind and Morgan )
 Ethics provide a systematized framework for making decisions where values conflict
 Ethical analysis involves values rather than cost or environmental data
 There are two theories leading to the ethical analysis utilitarianism and deontological
 A detail on these two theories can be found elsewhere
 An ethical perspective focuses on the attitude of people towards other living things and towards the natural environment
 <eos>","The ideas look alike (Vesilind and Morgan).
 Ethics provides a systematized framework for making decisions where values conflict.
 Ethical analysis involves values rather than cost or environmental data.
 There are two theories that lead to ethical analysis: utilitarianism and deontology.
 Details on these two theories can be found elsewhere.
 An ethical perspective focuses on the attitude of people towards other living things and towards the natural environment."
file2_topic_17,"risk, analysis, resources, health, potential","<task:clean> <sos>
 When life and health enter benefitcost calculations the analyses are generally referred as riskbenefitcost analysis to indicate that people or resources are at risk
 They have in the past few years become more widely known as simply risk analyses
 Risk analysis is comprise do risk assessment and risk management
 The former involves a study and analysis of the potential effect of certain hazards on human health
 Using statistical information risk assessment is intended to be a tool for making informed decisions
 For example it has been shown that the life expectancy of people living in a dirty urban atmosphere is considerably shorter than that of people living identical lives but breathing clean air
 In addition to the potential effect to human health and well being environmental impacts also include effects on the natural resources or infrastructures providing socioeconomic services
 Risk analysis calculates the potential damage to the health and environmental impact analysis provides a means for decision making based on longterm effects on resources
 <eos>","When life and health enter benefit-cost calculations, the analyses are generally referred to as risk-benefit-cost analyses to indicate that people or resources are at risk. They have in the past few years become more widely known as simply risk analyses. Risk analysis is comprised of risk assessment and risk management. The former involves a study and analysis of the potential effects of certain hazards on human health. Using statistical information, risk assessment is intended to be a tool for making informed decisions. For example, it has been shown that the life expectancy of people living in a dirty urban atmosphere is considerably shorter than that of people living identical lives but breathing clean air. In addition to the potential effect on human health and well-being, environmental impacts also include effects on natural resources or infrastructures providing socioeconomic services. Risk analysis calculates the potential damage to health, and environmental impact analysis provides a means for decision-making based on long-term effects on resources."
file1_topic_14,"streams, black, inflow, flow, box","<task:clean> <sos>
 shows a black box into which some material is flowing
 Splitting SingleMaterial Flow Streams A black box shown in Fig
 receives flow from one feed source and separates this into two or more flow streams
 A separator with one inflow and two outflows The material X can of course be separated into more than two fractions so the material balance can be n i i X X ( ) where there are n exit streams of effluents
 Combining SingleMaterial Flow Streams A black box can also receive numerous influents and discharge one effluent as shown in Fig
 Everything inside the dashed line becomes the black box
 In some cases the process is one of mixing where several inflow streams are combined to produce a single outflow stream while in other cases a single inflow stream is split into several outflow streams according to some material characteristics
 <eos>","<task:clean> <sos>
 A black box is shown, into which some material is flowing.
 For splitting single-material flow streams, a black box, shown in Fig., receives flow from one feed source and separates it into two or more flow streams.
 A separator can have one inflow and two or more outflows. For instance, material X can be separated into more than two fractions. Thus, the material balance can be represented as X = X_1 + X_2 + ... + X_n, where there are 'n' exit streams of effluents.
 For combining single-material flow streams, a black box can also receive numerous influents and discharge a single effluent, as shown in Fig.
 Everything inside the dashed line constitutes the black box.
 In some cases, the process involves mixing, where several inflow streams are combined to produce a single outflow stream. In other cases, a single inflow stream is split into several outflow streams based on certain material characteristics.
 <eos>"
file1_topic_15,"air, flow, mhr, add, average","<task:clean> <sos>
 Add the available information such as flow rates and concentrations
 This could be a volumetric or mass flow rate
 The average annual wind speed is mhr
 It is clear that a simple application of the volume balance equation would show ( Air IN ) ( Air Out ) so the flow of air at the outlet is mhr
 <eos>","The available information includes details such as flow rates and concentrations. These flow rates may be either volumetric or mass-based. The average annual wind speed is mhr. A simple application of the volume balance equation would clearly show the relationship between Air IN and Air Out; consequently, the flow of air at the outlet is mhr."
file2_topic_16_0,"rate, input, output, reaction, transformation","<task:clean> <sos>
 Thus physical transport phenomena become predominant in governing the processing rate rather than the chemical or biochemical rate
 Balance Deposit Withdrawal Interest ( ) In an environmental system or subsystem the equation would be written as Accumulation Input Output Transformation rate ( ) Where Accumulation Input and Output refer to the mass quantities accumulating in the system or flowing into or out of the system
 With an anaology to the environmental system we note that this situation would mean the rate of incoming material is equal to the rate of outgoing material
 Increase in conversion of a reactant to product
 In these instances Equation ( ) is modified to the following form Rate of accumulation Rate of input Rate of output ( ) Where rate is used to mean per unit of time
 In the calculus this may be written as ( ) In most systems of environmental interest transformation occurs within the system byproducts are formed ( eg
 Because many environmental reactions do not occur instantaneously the time dependence of the reaction must be taken into account
 Thus the mass balance equation may be written as follows Accumulation rate Input rate Output rate Transformation rate ( ) Timedependent reactions are called kinetic reactions
 The rate of transformation or reaction rate ( r ) is used to describe the rate of formation ( ex
 In the calculus The reaction rate is often some complex function of temperature pressure the reacting components andor product of reaction
 is reduced to Input rate Output rate ( ) SteadyState System with Nonconservative Pollutants Many environmental pollutants undergo chemical biological or nuclear reactions at a rate sufficient to require us to treat them as nonconservative substances
 to Input rate Output rate transformation rate ( ) If the transformation rate is simply the decomposition or decay of the substance ( various pollutants are decomposed in the environment ) then Eq
 <eos>","Thus, physical transport phenomena become predominant in governing the processing rate rather than the chemical or biochemical rate. Balance = Deposit - Withdrawal + Interest ( ). In an environmental system or subsystem, the equation would be written as: Accumulation = Input - Output Â± Transformation rate ( ). Here, Accumulation, Input, and Output refer to the mass quantities accumulating in the system or flowing into or out of the system. With an analogy to the environmental system, we note that this situation would mean the rate of incoming material is equal to the rate of outgoing material. Increase in conversion of a reactant to product. In these instances, Equation ( ) is modified to the following form: Rate of accumulation = Rate of input - Rate of output ( ). Here, 'rate' is used to mean per unit of time. In calculus, this may be written as ( ). In most systems of environmental interest, transformation occurs within the system; byproducts are formed (e.g., Because many environmental reactions do not occur instantaneously, the time dependence of the reaction must be taken into account. Thus, the mass balance equation may be written as follows: Accumulation rate = Input rate - Output rate Â± Transformation rate ( ). Time-dependent reactions are called kinetic reactions. The rate of transformation, or reaction rate (r), is used to describe the rate of formation (e.g., In calculus, the reaction rate is often some complex function of temperature, pressure, the reacting components, and/or product of reaction. is reduced to: Input rate = Output rate ( ). Steady-State System with Nonconservative Pollutants: Many environmental pollutants undergo chemical, biological, or nuclear reactions at a rate sufficient to require us to treat them as nonconservative substances. to: Input rate = Output rate - Transformation rate ( ). If the transformation rate is simply the decomposition or decay of the substance (various pollutants are decomposed in the environment), then Eq."
file2_topic_16_1,"rate, input, output, reaction, transformation","<task:clean> <sos>
 is further reduced to Input rate Output rate decay rate ( ) The decay of nonconservative substances is frequently modeled as a firstorder reaction that is it is assumed that the rate of loss of the substance is proportional to the amount of substance that is present at any given time
 That is dC kC ( ) Where k is the reaction rate coefficient with dimension of ( time ) the negative sign implies a loss of substance with time and C is the pollutant concentration ( mass per unit volume )
 The differential equation may be integrated to yield either C ln kt ( ) Co or C Co e k t ( ) Eq
 indicates the rate of change of concentration of the substance
 The total rate of decay of the amount of a nonconservative substance is thus d ( CV ) dt V dC dt decay rate kCV Eq
 can be rewritten as Input rate Output rate k C V ( ) Implicit in Eq
 The CO is converted to CO with reaction rate coefficient of hr
 <eos>","The overall rate equation is further simplified to: Input rate - Output rate - Decay rate. The decay of nonconservative substances is frequently modeled as a first-order reaction; that is, it is assumed that the rate of loss of the substance is proportional to the amount of substance present at any given time. That is, dC/dt = -kC. Where k is the reaction rate coefficient with dimensions of (time)^-1; the negative sign implies a loss of substance with time; and C is the pollutant concentration (mass per unit volume). The differential equation may be integrated to yield either ln(C/Co) = -kt or C = Co * e^(-kt). This differential equation indicates the rate of change of concentration of the substance. The total rate of decay of a nonconservative substance is thus d(CV)/dt, which can be expanded to V * dC/dt; this represents the decay rate, kCV. This can be rewritten as: Input rate - Output rate = kCV. This relationship is implicit in the given equations. The CO is converted to CO, with a reaction rate coefficient of hr^-1."
file2_topic_17,"properties, extensive, intensive, property, matter","<task:clean> <sos>
 The terms intensive and extensive were first described by physical chemist and physicist Richard C Tolman in
 Intensive properties are bulk properties which mean they do not depend on the amount of matter that is present
 Examples of intensive properties include density color temperature odor hardness etc
 Extensive properties do depend on the amount of matter that is present
 An extensive property is considered additive for subsystems
 Examples of extensive properties include volume mass size weight length etc
 The ratio between two extensive properties is an intensive property
 For example mass and volume are extensive properties but their ratio ( density ) is an intensive property of matter
 While extensive properties are great for describing a sample they arent very helpful in identifying it because they can change according to sample size or conditions
 <eos>","The terms intensive and extensive were first described by physical chemist and physicist Richard C. Tolman. Intensive properties are bulk properties, meaning they do not depend on the amount of matter present. Examples of intensive properties include density, color, temperature, odor, hardness, etc. Extensive properties do depend on the amount of matter present. An extensive property is considered additive for subsystems. Examples of extensive properties include volume, mass, size, weight, length, etc. The ratio between two extensive properties is an intensive property. For example, mass and volume are extensive properties, but their ratio (density) is an intensive property of matter. While extensive properties are great for describing a sample, they aren't very helpful in identifying it because they can change according to sample size or conditions."
file2_topic_18,"stream, recycle, process, streams, inflow","<task:clean> <sos>
 receives flow from one feed source and separates this into two or more flow streams
 A separator with one inflow and two outflows The material X can be separated into more than two fractions so the material balance can be ( ) Where there are n exit streams of effluents
 In some cases the process is one of mixing where several inflow streams are combined to produce a single outflow stream while in other cases a single inflow stream is split into several outflow streams according to some material characteristics
 Recycle Bypass and Purge stream Recycle stream is a term denoting a process stream that returns material from downstream of a process unit back to the process unit
 There are several reasons one might employ a recycle stream
 Recovery of catalyst Reuse of working fluid
 Bypass stream A stream that skips one or more stages of the process and goes directly to another downstream stage
 This arrangement is used when it is desired to control the composition of the final exit stream ( product ) at desired value
 Purge stream A stream bled off from the process to remove an accumulation of inerts or unwanted material that might otherwise build up in the recycle stream
 This is common with multiphase systems where only one phase is either removed or recycled
 <eos>","A process receives flow from one feed source and separates it into two or more flow streams. A separator with one inflow and two outflows can separate material X into more than two fractions, so the material balance can be ( ) where there are 'n' exit streams of effluents.
 In some cases, the process is one of mixing, where several inflow streams are combined to produce a single outflow stream; while in other cases, a single inflow stream is split into several outflow streams according to some material characteristics.
 Recycle, Bypass, and Purge Streams: A Recycle stream is a term denoting a process stream that returns material from downstream of a process unit back to the process unit. There are several reasons one might employ a recycle stream. These include recovery of catalyst and reuse of working fluid.
 A Bypass stream is a stream that skips one or more stages of the process and goes directly to another downstream stage. This arrangement is used when it is desired to control the composition of the final exit stream (product) to a desired value.
 A Purge stream is a stream bled off from the process to remove an accumulation of inerts or unwanted material that might otherwise build up in the recycle stream. This is common in multiphase systems where only one phase is either removed or recycled."
file2_topic_19,"wood, using, steady, chemical, completely","<task:clean> <sos>
 The two assumptions used to approach the analysis above are the flows are in steady state ( they do not change with time ) and that no material is being destroyed ( consumed ) or created ( produced )
 is the assumption that the concentration C is uniform throughout the volume V This complete mixing assumption is common in the analysis of chemical tanks called reactors and in such cases the idealization is referred to as a continuously stirred tank reactor ( CSTR ) model
 Idealized models involving nonconservative pollutants in completely mixed steadystate systems are used to analyze a variety of commonly encountered water pollution problems such as mixing of sewage in receiving waters
 Assume complete mixing nonreactive organic material and steady state conditions
 Non conservative system A kitchen with volume m operating for an hour is using wood burning stoves each using kg of wood
 kg of wood emits mg of harmful chemical ( CO )
 For a completely mixed system calculate the steady state concentration of harmful chemical in the air using mass balance method
 <eos>","The two assumptions used to approach the analysis above are that the flows are in steady state (they do not change with time) and that no material is being destroyed (consumed) or created (produced). A third assumption is that the concentration C is uniform throughout the volume V. This complete mixing assumption is common in the analysis of chemical tanks, called reactors, and in such cases, the idealization is referred to as a continuously stirred tank reactor (CSTR) model.
 Idealized models involving non-conservative pollutants in completely mixed, steady-state systems are used to analyze a variety of commonly encountered water pollution problems, such as the mixing of sewage in receiving waters.
 Assume complete mixing, non-reactive organic material, and steady-state conditions.
 In a non-conservative system, a kitchen with volume 'm' operating for an hour uses wood-burning stoves, each consuming 'kg' of wood. Each 'kg' of wood emits 'mg' of a harmful chemical (CO).
 For a completely mixed system, calculate the steady-state concentration of the harmful chemical in the air using the mass balance method."
file2_topic_20,"river, mgl, flow, mhr, regulation","<task:clean> <sos>
 Add the available information such as flow rates and concentrations
 This could be a volumetric or mass flow rate
 Mixing An Industry discharges wastewater into a river that has a flow rate of ms
 The waste discharge stream has flow rate of ms and the concentration is mgL
 The concentration of river before mixing is mgL
 The state regulation allows upto mgL for the pollutants in river
 Will the industry be able to discharge the water to river under state regulation
 The average annual wind speed is mhr
 Fresh air enters in the air with the rate of mhr and state air leaves at the same rate
 <eos>","Add the available information, such as flow rates and concentrations. This could be a volumetric or mass flow rate. An industry discharges wastewater into a river that has a flow rate of ms. The waste discharge stream has a flow rate of ms, and its concentration is mgL. The concentration of the river before mixing is mgL. State regulation allows up to mgL for pollutants in the river. Will the industry be able to discharge the water into the river under state regulation? The average annual wind speed is mhr. Fresh air enters the air at a rate of mhr, and state air leaves at the same rate."
file1_topic_19,"analysis, standalone, gain, insigh, used","<task:clean> <sos>
 Con ten ts Cluster Analysis What is cluster analysis
 What is cluster analysis
 Cluster analysis has b een widely used in n umerous applications including pattern recognition data analysis image pro cess ing and mark et researc h By clustering one can iden tify cro wded and sparse regions and therefore disco v er o v erall distribution patterns and in teresting correlations among data attributes
 As a data mining function cluster analysis can b e used as a standalone to ol to gain insigh t in to the distribution of data to observ e the c haracteristics of eac h cluster and to fo cus on a particular set of clusters for further analysis
 If cluster analysis is used as a descriptiv e or exploratory to ol it is p ossible to try sev eral algorithms on the same data to see what the data ma y disclose
 Cluster analysis can b e used as a standalone data mining to ol to gain insigh t in to the data distribution or serv e as a prepro cessing step for other data mining algorithms op erating on the detected clusters
 <eos>","Contents: Cluster Analysis. What is cluster analysis? What is cluster analysis? Cluster analysis has been widely used in numerous applications, including pattern recognition, data analysis, image processing, and market research. By clustering, one can identify crowded and sparse regions and therefore discover overall distribution patterns and interesting correlations among data attributes. As a data mining function, cluster analysis can be used as a standalone tool to gain insight into the distribution of data, to observe the characteristics of each cluster, and to focus on a particular set of clusters for further analysis. If cluster analysis is used as a descriptive or exploratory tool, it is possible to try several algorithms on the same data to see what the data may disclose. Cluster analysis can be used as a standalone data mining tool to gain insight into the data distribution or serve as a preprocessing step for other data mining algorithms operating on the detected clusters."
file1_topic_20,"analysis, accessibilit, constrained, bridges, hanging","<task:clean> <sos>
 T yp es of data in clustering analysis
 T yp es of data in clustering analysis In this section w e study the t yp es of data whic h often o ccur in clustering analysis and ho w to prepro cess them for suc h an analysis
 The measuremen t unit used can a ect the clustering analysis
 F or example c hanging measuremen t units from meters to inc hes for heigh t or from kilograms to p ounds for w eigh t ma y lead to a v ery di eren t clustering structure
 The clustering ho w ev er ma y b e constrained b y factors in v olving the lo cation of bridges riv ers and high w a ys whic h can a ect A TM accessibilit y
 <eos>","In this section, we study the types of data which often occur in clustering analysis and how to preprocess them for such an analysis. The measurement unit used can affect the clustering analysis. For example, changing measurement units from meters to inches for height or from kilograms to pounds for weight may lead to a very different clustering structure. The clustering, however, may be constrained by factors involving the location of bridges, rivers, and highways, which can affect ATM accessibility."
file1_topic_21_0,"ordinal, states, ariable, ranks, ordered","<task:clean> <sos>
 Nominal ordinal and ratioscaled v ariables
 Nominal ordinal and ratioscaled v ariables This section discusses ho w to compute the dissimilarit y b et w een ob jects describ ed b y nominal ordinal and ratio scaled v ariables
 Let the n um b er of states of a nominal v ariable b e M
 The states can b e denoted b y letters sym b ols or a set of in tegers suc h as
 W eigh ts can b e assigned to increase the e ect of m or to assign greater w eigh t to the matc hes in v ariables ha ving a larger n um b er of states
 Ordinal v ariables A discrete ordinal v ariable resem bles a nominal v ariable except that the M states of the ordinal v alue are ordered in a meaningful sequence
 Ordinal v ariables are v ery useful for registering sub jectiv e assessmen ts of qualities that can not b e measured ob jectiv ely
 F or example professional ranks are often en umerated in a sequen tial order suc h as assistan t asso ciate and full
 A con tin uous ordinal v ariable lo oks lik e a set of con tin uous data of an unkno wn scale that is the relativ e ordering of the v alues is essen tial but not their actual magnitude
 F or example the relativ e ranking in a particular sp ort is often more essen tial than the actual v alues of a particular measure
 Ordinal v ariables ma y also b e obtained from the discretization of in terv alscaled quan tities b y splitting the v alue range in to a nite n um b er of classes
 The v alues of an ordinal v ariable can b e mapp ed to r anks
 F or example supp ose that an ordinal v ariable f has M states
 These ordered states de ne the ranking M
 <eos>","Nominal, ordinal, and ratio-scaled variables.
 Nominal, ordinal, and ratio-scaled variables. This section discusses how to compute the dissimilarity between objects described by nominal, ordinal, and ratio-scaled variables.
 Let the number of states of a nominal variable be M.
 The states can be denoted by letters, symbols, or a set of integers, such as.
 Weights can be assigned to increase the effect more, or to assign greater weight to the matches in variables having a larger number of states.
 Ordinal variables. A discrete ordinal variable resembles a nominal variable, except that the M states of the ordinal value are ordered in a meaningful sequence.
 Ordinal variables are very useful for registering subjective assessments of qualities that can not be measured objectively.
 For example, professional ranks are often enumerated in a sequential order, such as assistant, associate, and full.
 A continuous ordinal variable looks like a set of continuous data of an unknown scale; that is, the relative ordering of the values is essential, but not their actual magnitude.
 For example, the relative ranking in a particular sport is often more essential than the actual values of a particular measure.
 Ordinal variables may also be obtained from the discretization of interval-scaled quantities by splitting the value range into a finite number of classes.
 The values of an ordinal variable can be mapped to ranks.
 For example, suppose that an ordinal variable f has M states.
 These ordered states define the ranking M."
file1_topic_21_1,"ordinal, states, ariable, ranks, ordered","<task:clean> <sos>
 The treatmen t of ordinal v ariables is quite similar to that of in terv alscaled v ariables when computing the dissimilarit y b et w een ob jects
 Supp ose that f is a v ariable from a set of ordinal v ariables describing n ob jects
 The v alue of f for the ith ob ject is x and f has M ordered states represen ting the ranking M
 Replace if f f eac h x b y its corresp onding rank r f M g if if f
 Since eac h ordinal v ariable can ha v e a di eren t n um b er of states it is often necessary to map the range of eac h v ariable on to so that eac h v ariable has equal w eigh t This can b e ac hiev ed b y replacing the rank r of if the ith ob ject in the f th v ariable b y r if ( ) z if M f
 T reat x as con tin uous ordinal data and treat their ranks as in terv alv alued
 If f is ordinal or ratioscaled compute the ranks r and z and treat z as in terv alscaled
 Data cub es and m ultidim ensional databases con tain categorical ordinal and n umerical data in hierarc hical or aggregate forms
 <eos>","The treatment of ordinal variables is quite similar to that of interval-scaled variables when computing the dissimilarity between objects. Suppose that f is a variable from a set of ordinal variables describing n objects. The value of f for the ith object is x, and f has M ordered states representing the ranking M. Replace each `x_if` by its corresponding rank `r_if` (from `M_f`). Since each ordinal variable can have a different number of states, it is often necessary to map the range of each variable onto a common range so that each variable has equal weight. This can be achieved by replacing the rank `r_if` of the `i`th object in the `f`th variable by `z_if(r_if, M_f)`. Treat x as continuous ordinal data and treat their ranks as interval-valued. If f is ordinal or ratio-scaled, compute the ranks r and z, and treat z as interval-scaled. Data cubes and multidimensional databases contain categorical, ordinal, and numerical data in hierarchical or aggregate forms."
file1_topic_22,"metho, normally, artition, terminates, ctive","<task:clean> <sos>
 P artitioning metho ds
 Hierarc hical metho ds
 Densit ybased metho ds
 if The latter t w o metho ds are the most e ectiv e although the c hoice of metho d used ma y b e dep enden t on the giv en application
 P artition in g metho ds
 Mo delbased metho ds
 Normally k n and t n The metho d often terminates at a lo cal optim um
 Th us the metho d is incremen tal
 The metho d has sev eral
 How e e ctive is this metho d
 <eos>","Partitioning methods. Hierarchical methods. Density-based methods. The latter two methods are the most effective, although the choice of method used may be dependent on the given application. Partitioning methods. Model-based methods. Normally, k n and t n. The method often terminates at a local optimum. Thus, the method is incremental. The method has several. How effective is this method?"
file1_topic_23,"purp, fragile, tativ, presence, shap","<task:clean> <sos>
 CURE Clustering Using REpresen tativ es
 Disco v ery of clusters with arbitrary shap e Man y clustering algorithms determine clusters based on Euclidean or Manhattan distance measures
 The c hoice of clustering algorithm dep ends b oth on the t yp e of data a v ailable and on the particular purp ose and application
 CURE Clustering Using REpresen tativ es Most clustering algorithms either fa v or clusters with spherical shap e and similar sizes or are fragile in the presence of outliers
 <eos>",CURE Clustering Using Representatives. Discovery of clusters with arbitrary shapes. Many clustering algorithms determine clusters based on Euclidean or Manhattan distance measures. The choice of clustering algorithm depends both on the type of data available and on the particular purpose and application. CURE Clustering Using Representatives. Most clustering algorithms either favor clusters with spherical shapes and similar sizes or are fragile in the presence of outliers.
file1_topic_24,"deling, chameleon, dynamic, hical, hierarc","<task:clean> <sos>
 CHAMELEON A hierarc hical clustering algorithm using dynamic mo deling
 CHAMELEON Hierarc hical clustering based on knearest neigh b ors and dynamic mo deling
 The fourth called CHAMELEON explores dynamic mo deling in hierarc hical clustering
 CHAMELEON A hierarc hical clustering algorithm using dynamic mo deling CHAMELEON is a clustering algorithm whic h explores dynamic mo deling in hierarc hical clustering
 CHAMELEON is deriv ed based on the observ ation of the w eakness of t w o hierarc hical clustering algorithms CURE and R OCK
 <eos>","CHAMELEON: A hierarchical clustering algorithm using dynamic modeling. CHAMELEON: Hierarchical clustering based on k-nearest neighbors and dynamic modeling. The fourth, called CHAMELEON, explores dynamic modeling in hierarchical clustering. CHAMELEON, a hierarchical clustering algorithm using dynamic modeling, is a clustering algorithm which explores dynamic modeling in hierarchical clustering. CHAMELEON is derived based on the observation of the weakness of two hierarchical clustering algorithms, CURE and ROCK."
file1_topic_25,"densit, functions, denclue, ybased, habilit","<task:clean> <sos>
 DENCLUE Clustering based on densit y distribution functions
 Densit y reac habilit y and densit y connectivit y in densit ybased clustering
 The basic ideas of densit ybased clustering in v olv e a n um b er of new de nitions
 A densit ybased cluster is a set of densit yconnected ob jects that is maxima l with resp ect to densit yreac habilit y
 DENCLUE Clustering based on densit y distribution functions DENCLUE ( DENsit ybased CLUstEring ) is a clustering metho d based on a set of densit y distribution functions
 A densit ybased metho d cluster ob jects based on the notion of densit y
 The DENCLUE algorithm based on a set of densit y distribution functions w as prop osed b y Hinneburg and Keim
 <eos>","DENCLUE Clustering based on density distribution functions. Density reachability and density connectivity in density-based clustering. The basic ideas of density-based clustering involve a number of new definitions. A density-based cluster is a set of density-connected objects that is maximal with respect to density-reachability. DENCLUE Clustering based on density distribution functions: DENCLUE (DENsity-based CLUstEring) is a clustering method based on a set of density distribution functions. A density-based method clusters objects based on the notion of density. The DENCLUE algorithm, based on a set of density distribution functions, was proposed by Hinneburg and Keim."
file1_topic_26,"ecluster, spatial, indexing, rtrees, erformance","<task:clean> <sos>
 W a v eCluster Clustering using w a v elet transformation
 The p erformance of CLARANS can b e further impro v ed b y exploring spatial data structures suc h as Rtrees and some fo cusing tec hniques
 Spatial indexing structures can b e used to further enhance its p erformance
 W a v eCluster Clustering using w a v elet transformation W a v eCluster is a m ultiresolution clustering algorithm whic h rst summarizes the data b y imp osing a m ultidim en sional grid structure on to the data space
 Indexbased algorithm Giv en a data set the indexbased algorithm uses m ultidim ensional indexing struc tures suc h as Rtrees or kd trees to searc h for neigh b ors of eac h ob ject o within radius d around that ob ject
 The R tree An ecien t and robust access metho d for p oin ts and rectangles
 Kno wledge disco v ery in large spatial databases F o cusing tec hniques for ecien t class iden ti cation
 W a v eCluster A m ultiresolution clustering approac h for v ery large spatial databases
 <eos>","WaveCluster Clustering using wavelet transformation.
 The performance of CLARANS can be further improved by exploring spatial data structures such as R-trees and some focusing techniques.
 Spatial indexing structures can be used to further enhance its performance.
 WaveCluster Clustering using wavelet transformation. WaveCluster is a multiresolution clustering algorithm which first summarizes the data by imposing a multidimensional grid structure onto the data space.
 Index-based algorithm. Given a data set, the index-based algorithm uses multidimensional indexing structures such as R-trees or k-d trees to search for neighbors of each object 'o' within radius 'd' around that object.
 The R-tree: An efficient and robust access method for points and rectangles.
 Knowledge discovery in large spatial databases: Focusing techniques for efficient class identification.
 WaveCluster: A multiresolution clustering approach for very large spatial databases."
file1_topic_27,"clique, highdimensional, quest, subspace, cliques","<task:clean> <sos>
 CLIQUE Clustering highdimensional space
 CLIQUE Clustering highdimensional space The CLIQUE ( CLustering In QUEst ) clustering algorithm in tegrates densit ybased and gridbased clustering
 CLIQUEs clustering iden ti es the sparse and the cro wded ar e as in sp ac e ( or units ) thereb y disco v ering the o v erall distribution patterns of the data set
 CLIQUE p erforms m ultidim ensional clustering in t w o steps
 Automatic subspace clustering of high dimensional data for data mining applications
 <eos>","The CLIQUE (CLustering In QUEst) clustering algorithm integrates density-based and grid-based clustering, specifically designed for high-dimensional space. CLIQUE's clustering identifies the sparse and crowded areas in space (or units), thereby discovering the overall distribution patterns of the dataset. CLIQUE performs multidimensional clustering in two steps. This approach facilitates automatic subspace clustering of high-dimensional data for data mining applications."
file1_topic_28,"delbased, shap, arbitrary, studied, elop","<task:clean> <sos>
 Mo delbased clustering metho ds
 Ho w ev er a cluster could b e of an y shap e It is imp ortan t to dev elop algorithms whic h can detect clusters of arbitrary shap e
 P artitioningbased clustering metho ds are studied in depth in Section
 Mo delbased clustering metho ds are studied in Section
 Densit ybased metho ds T o disco v er clusters with arbitrary shap e densit ybased clustering metho ds ha v e b een dev elop ed
 A mo delbased metho d h yp othesizes a mo del for eac h of the clusters and nds the b est t of the data to that mo del
 F or a set of seminal papaers on mo delbased clustering see Sha vlik and Dietteric h
 <eos>","Model-based clustering methods.
 However, a cluster could be of any shape. It is important to develop algorithms which can detect clusters of arbitrary shape.
 Partitioning-based clustering methods are studied in depth in Section.
 Model-based clustering methods are studied in Section.
 Density-based methods. To discover clusters with arbitrary shape, density-based clustering methods have been developed.
 A model-based method hypothesizes a model for each of the clusters and finds the best fit of the data to that model.
 For a set of seminal papers on model-based clustering, see Shavlik and Dietterich."
file1_topic_29,"net, neural, ork, approac, som","<task:clean> <sos>
 Neural net w ork approac h
 Neural net w ork approac h The neural net w ork approac h to clustering tends to represen t eac h cluster as an exemplar
 In this section w e discuss t w o prominen t metho ds of the neural net w ork approac h to clustering
 The neural net w ork approac h to clustering has strong theoretical links with actual brain pro cessing
 T ypical mo delbased metho ds include statistical approac h suc h as AutoClass COBWEB and CLASSIT and neural net w ork approac h suc h as SOM
 Studies of the neural net w ork approac h include comp etitiv e learning b y Rumelhart and Zipser and SOM ( selforganizing feature maps ) b y Kohonen
 <eos>","Neural network approach. Neural network approach. The neural network approach to clustering tends to represent each cluster as an exemplar. In this section, we discuss two prominent methods of the neural network approach to clustering. The neural network approach to clustering has strong theoretical links with actual brain processing. Typical model-based methods include statistical approaches such as AutoClass, COBWEB, and CLASSIT, and neural network approaches such as SOM. Studies of the neural network approach include competitive learning by Rumelhart and Zipser, and SOM (self-organizing feature maps) by Kohonen."
file1_topic_30_0,"function, dissimilarit, cardinalit, string, strings","<task:clean> <sos>
 P ossible densit y functions for a D data set
 The dissimilarit y computation with resp ect to f in v olv es the follo wing steps
 The con tribution of if j f ij ( f ) v ariable f to the dissimilarit y b et w een i and j d is computed dep enden t on its t yp e ij ( f ) ( f )
 The in uence function of data ob ject y on x is a y d function f F whic h is de ned in terms of a basic in uence function f
 Giv en d n data ob jects D fx the densit y function at x is de ned as x g F n n X x D ( x ) ( ) ( x ) f f i B B i F or example the densit y function that results from the Gaussian in uence function ( ) is n d ( xx ) X i D ( x ) ( ) f e Gaussian i F rom the densit y function one can de ne the gr adient of a function and the density attr actor whic h is the lo cal maxima of the o v erall densit y function
 there exists a path P from eac h region to another and the densit y function v alue for eac h p oin t along the path is no less than
 F or example it ma y ha v e a di eren t mean or disp ersion or a longer tail
 It is an y function that if giv en a set of ob jects returns a lo w v alue if the ob jects are similar to one another
 The greater the dissimilarit y is among the ob jects the higher is the v alue returned b y the function
 <eos>","Possible density functions for a D dataset.
 
 The dissimilarity computation with respect to `f` involves the following steps:
 The contribution of `f_ij(f)` (variable `f`) to the dissimilarity `d_ij(f)` between `i` and `j` is computed dependent on its type.
 The influence function of data object `y` on `x` is a function `f_F` which is defined in terms of a basic influence function `f`.
 Given `n` data objects `D = {x_i}`, the density function at `x` is defined as: `g(x) = F_n(x) = (1/n) * Sum_{x_i in D} f_B(x, x_i)`.
 For example, the density function that results from the Gaussian influence function is: `rho_Gaussian(x) = (1/n) * Sum_{x_i in D} e^(-(x - x_i)^2 / d)`.
 From the density function, one can define the gradient of a function and the density attractor, which is the local maxima of the overall density function.
 There exists a path `P` from each region to another, and the density function value for each point along the path is no less than.
 For example, it may have a different mean or dispersion, or a longer tail.
 It is any function that, if given a set of objects, returns a low value if the objects are similar to one another.
 The greater the dissimilarity among the objects, the higher the value returned by the function."
file1_topic_30_1,"function, dissimilarit, cardinalit, string, strings","<task:clean> <sos>
 Giv en a subset of n n um b ers g a p ossible dissimilarit y function is the v ariance of the n um b ers in the set ie fx x n n ( x x ) ( ) i i n where x is the mean of the n n um b ers in the set
 F or c haracter strings the dissimilarit y function ma y b e in the form of a pattern string ( eg con taining wildcard c haracters ) that is used to co v er all of the patterns seen so far
 The dissimilarit y increases when the pattern co v ering all of the strings in S do es not co v er an y string j in S that is not in S
 j j Cardinalit y function This is t ypically the coun t of the n um b er of ob jects in a giv en set
 This v alue is scaled b y the cardinalit y of the set
 The ab o v e metho d has b een sho wn to b e dep enden t on the dissimilarit y function used
 This complexit y is also based on the notion that the computation of the dissimilarit y function is incremen tal
 <eos>","Given a subset of numbers, a possible dissimilarity function is the variance of the numbers in the set, i.e. fxxnn(xx)()iin, where x is the mean of the numbers in the set. For character strings, the dissimilarity function may be in the form of a pattern string (e.g., containing wildcard characters) that is used to cover all of the patterns seen so far. The dissimilarity increases when the pattern covering all of the strings in S does not cover any string j in S that is not in S. Cardinality function. This is typically the count of the number of objects in a given set. This value is scaled by the cardinality of the set. The above method has been shown to be dependent on the dissimilarity function used. This complexity is also based on the notion that the computation of the dissimilarity function is incremental."
file1_topic_31_0,"orho, neigh, region, radius, densit","<task:clean> <sos>
 Examples of cen terde ned clusters and arbitraryshap ed clusters
 Their general idea is to con tin ue gro wing the giv en cluster as long as the densit y ( n um b er of ob jects or data p oin ts ) in the neigh b orho o d exceeds some threshold ie for eac h data p oin t within a giv en cluster the neigh b orho o d of a giv en radius has to con tain at least a minim um n um b er of p oin ts
 The k nearest neigh b or graph G captures the concept of neigh b orho o d dynamically the neigh b orho o d k radius of an ob ject is determined b y the density of the region in whic h this ob ject resides
 In a dense region the neigh b orho o d is de ned narro wly in a sparse region it is de ned more widely
 That is the edge of a dense region tends to w eigh more than that of a sparse region
 It de nes a cluster as a maxim al set of densityc onne cte d p oin ts
 The neigh b orho o d within a radius of a giv en ob ject is called the neigh b orhoo d of the ob ject
 Ev ery ob ject not con tained in an y cluster is considered to b e noise
 A cen ter de ned cluster is a subset C that is densityextr acte d ie with its densit y function v alue no less than a threshold otherwise ( ie if its densit y function v alue is less than ) it is considered an outlier
 F or eac h cluster it determines the maxim al region that co v ers the cluster of connected dense units
 <eos>","Examples of center-defined clusters and arbitrary-shaped clusters. Their general idea is to continue growing a given cluster as long as the density (number of objects or data points) in its neighborhood exceeds some threshold. That is, for each data point within a given cluster, the neighborhood of a given radius has to contain at least a minimum number of points. The k-nearest neighbor graph G dynamically captures the concept of neighborhood. The neighborhood (k) radius of an object is determined by the density of the region in which this object resides. In a dense region, the neighborhood is defined narrowly; in a sparse region, it is defined more widely. That is, the edge of a dense region tends to weigh more than that of a sparse region. It defines a cluster as a maximal set of density-connected points. The neighborhood within a given radius of an object is called the object's neighborhood. Every object not contained in any cluster is considered to be noise. A center-defined cluster is a subset C that is density-extracted. That is, its density function value is no less than a threshold; otherwise (if its density function value is less than the threshold), it is considered an outlier. For each cluster, it determines the maximal region that covers the cluster of connected dense units."
file1_topic_31_1,"orho, neigh, region, radius, densit","<task:clean> <sos>
 It either gro ws clusters according to densit y of neigh b orho o d ob jects ( suc h as in DBSCAN ) or according to some densit y function ( suc h as in DENCLUE )
 Use a diagram to illustrate ho w for a constan t MinPts v alue densityb ase d clusters with resp ect to a higher densit y ( ie a lo w er v alue for the neigh b orho o d radius ) are completely con tained in densit yconnected sets obtained with resp ect to a lo w er densit y
 <eos>","It either grows clusters according to the density of neighborhood objects (such as in DBSCAN) or according to some density function (such as in DENCLUE). Use a diagram to illustrate how, for a constant MinPts value, density-based clusters with respect to a higher density (i.e., a lower value for the neighborhood radius) are completely contained in density-connected sets obtained with respect to a lower density."
file1_topic_32,"highdimensional, ecially, esp, sets, dimensional","<task:clean> <sos>
 A sample of dimensional feature space
 P arameters are often hard to determine esp ecially for data sets con taining highdimensional ob jects
 Suc h parameter settings are usually empirically set and dicult to determine esp ecially for realw orld highdimensional data sets
 Moreo v er highdimensional real data sets often ha v e v ery sk ew ed distributions
 Ho w ev er W a v eCluster is only applicable to lo wdimensional data
 When m ultidim ensional data are analyzed not an y particular one but rather a c ombination of dimension v alues ma y b e extreme
 What ab out for ev en higher dimensional data
 <eos>","A sample of dimensional feature space.
 Parameters are often hard to determine, especially for data sets containing high-dimensional objects.
 Such parameter settings are usually empirically set and difficult to determine, especially for real-world high-dimensional data sets.
 Moreover, high-dimensional real data sets often have very skewed distributions.
 However, WaveCluster is only applicable to low-dimensional data.
 When multidimensional data are analyzed, not any particular one, but rather a combination of dimension values may be extreme.
 What about for even higher-dimensional data?"
file1_topic_33,"dense, clique, units, dimensional, subspaces","<task:clean> <sos>
 CLIQUE determining dense units
 CLIQUE is based on the follo wing Giv en a large set of m ultidim ensional data p oin ts the data space is usually not uniformly o ccupied b y the data p oin ts
 A unit is dense if the fraction of total data p oin ts con tained in it exceeds an input mo del parameter
 In CLIQUE a cluster is de ned as a maxim al set of c onne cte d dense units
 How do es CLIQUE work
 First CLIQUE partitions the ndimensional data space in to nono v erlapping rectangular units iden tifying the dense units among these
 The subspaces represen ting these dense units are in tersected to form a c andidate searc h space in whic h dense units of higher dimensionalit y ma y exist
 How do es CLIQUE se ar ch for dense units of higher dimensionality
 The prop ert y adapted for CLIQUE states the follo wing If a k dimensional unit is dense then so ar e its pr oje ctions in ( k ) dimensional sp ac e That is giv en a k dimensional candidate dense unit if w e c hec k its ( k ) th pro jection units and nd an y that are not dense then w e kno w that the k th dimensional unit can not b e dense either
 Therefore w e can generate p oten tial or candidate dense units in k dimensional space from the dense units found in ( k ) dimensional
 How e e ctive is CLIQUE
 CLIQUE automatically nds subspaces of the highest dimensionalit y suc h that high densit y clusters exist in those subspaces
 <eos>","CLIQUE: Determining Dense Units.
 CLIQUE is based on the following premise: Given a large set of multidimensional data points, the data space is usually not uniformly occupied by the data points. A unit is dense if the fraction of total data points contained in it exceeds an input model parameter. In CLIQUE, a cluster is defined as a maximal set of connected dense units.
 How does CLIQUE work?
 First, CLIQUE partitions the n-dimensional data space into non-overlapping rectangular units, identifying the dense units among these. The subspaces representing these dense units are intersected to form a candidate search space in which dense units of higher dimensionality may exist.
 How does CLIQUE search for dense units of higher dimensionality?
 The property adapted for CLIQUE states the following: If a k-dimensional unit is dense, then so are its projections in (k) dimensional space. That is, given a k-dimensional candidate dense unit, if we check its (k)-th projection units and find any that are not dense, then we know that the k-th dimensional unit cannot be dense either. Therefore, we can generate potential or candidate dense units in k-dimensional space from the dense units found in (k) dimensional.
 How effective is CLIQUE?
 CLIQUE automatically finds subspaces of the highest dimensionality such that high-density clusters exist in those subspaces."
file1_topic_34,"classi, tree, cation, des, probabilistic","<task:clean> <sos>
 A classi cation tree
 A classi cation tree di ers from a decision tree
 Eac h no de in a classi cation tree refers to a concept and con tains a probabilistic description of that concept whic h summarizes the ob jects classi ed under the no de
 This is unlik e decision trees whic h lab el branc hes rather than no des and use logical rather than probabilistic descriptors
 The sibling no des at a giv en lev el of a classi cation tree are said to form a partition
 T o classify an ob ject using a classi cation tree a partial matc hing function is emplo y ed to descend the tree along a path of b est matc hing no des
 where n is the n um b er of no des concepts or categories forming a partition fC g at the giv en lev el of C C n the tree
 F urthermore the classi cation tree is not heigh t balanced for sk ew ed input data whic h ma y cause the time and space complexit y to degrade dramatically
 Ba y esian classi cation ( AutoClass ) Theory and results
 <eos>","A classification tree. A classification tree differs from a decision tree. Each node in a classification tree refers to a concept and contains a probabilistic description of that concept, which summarizes the objects classified under the node. This is unlike decision trees, which label branches rather than nodes and use logical rather than probabilistic descriptors. The sibling nodes at a given level of a classification tree are said to form a partition. To classify an object using a classification tree, a partial matching function is employed to descend the tree along a path of best matching nodes, where n is the number of nodes, concepts, or categories forming a partition {C} at the given level of C C n of the tree. Furthermore, the classification tree is not height-balanced for skewed input data, which may cause the time and space complexity to degrade dramatically. Bayesian classification (AutoClass) Theory and results."
file1_topic_35,"comp, arc, hitecture, etitiv, olv","<task:clean> <sos>
 An arc hitecture for comp etitiv e learning
 Early in c hildho o d one learns ho w to distinguish b et w een cats and dogs or b et w een animals and plan ts b y con tin uously impro ving sub conscious classi cation sc hemes
 The rst in c omp etitive le arning and the second is selfor ganizing fe atur e maps b oth of whic h in v olv e comp eting neural units
 Comp etitiv e learning in v olv es an hierarc hical arc hitecture of sev eral units ( or arti cial neurons ) whic h comp ete in a winnertak esall fashion for the ob ject that is curren tly b eing presen ted to the system
 <eos>","An architecture for competitive learning.
 Early in childhood, one learns how to distinguish between cats and dogs, or between animals and plants, by continuously improving subconscious classification schemes.
 The first is competitive learning, and the second is self-organizing feature maps, both of which involve competing neural units.
 Competitive learning involves a hierarchical architecture of several units (or artificial neurons) which compete in a winner-takes-all fashion for the object that is currently being presented to the system."
file1_topic_36,"gender, test, ait, attributes, trait","<task:clean> <sos>
 A relational table con taining mostly binary attributes
 A relational table con taining binary attributes for a p enpal matc hing service
 One suc h example could b e the attribute gender ha ving the states male and female
 Supp ose that a patien t record table T able con tains the attributes name gender fever c ough test test test and test where name is an ob jectid gender is a symmetric attribute and the remaining attributes are asymmetric binary
 name gender fev er cough test test test test T able A relational table con taining mostly binary attributes
 T able con tains the attributes name gender tr ait tr ait tr ait and tr ait where name is an ob jectid gender is a symmetric attribute and the remaining tr ait attributes are asymmetric describing p ersonal traits of individuals who desire a p enpal
 name gender trait trait trait trait T able A relational table con taining binary attributes for a p enpal matc hing service
 ( e ) Supp ose that w e are to include the symmetric v ariable gender in our analysis
 animal P ( C ) P ( scalesC ) amphibian P ( C ) P ( moistC ) fish mammalbird P ( C ) P ( hairC ) P ( scalesC ) P ( C ) mammal P ( C ) P ( hairC ) bird P ( C ) P ( feathersC )
 <eos>","A relational table containing mostly binary attributes. A relational table containing binary attributes for a penpal matching service. One such example could be the attribute 'gender', having the states 'male' and 'female'. Suppose that a patient record table contains the attributes 'name', 'gender', 'fever', 'cough', 'test', 'test', 'test', and 'test'; 'name' is an object ID, 'gender' is a symmetric attribute, and the remaining attributes are asymmetric binary. The attributes 'name', 'gender', 'fever', 'cough', 'test', 'test', 'test', and 'test' are found in a relational table containing mostly binary attributes. A table contains the attributes 'name', 'gender', 'trait', 'trait', 'trait', and 'trait'; 'name' is an object ID, 'gender' is a symmetric attribute, and the remaining 'trait' attributes are asymmetric, describing personal traits of individuals who desire a penpal. The attributes 'name', 'gender', 'trait', 'trait', 'trait', and 'trait' are found in a relational table containing binary attributes for a penpal matching service. (e) Suppose that we are to include the symmetric variable 'gender' in our analysis. Animal P(C) P(scalesC); Amphibian P(C) P(moistC); Fish; Mammalbird P(C) P(hairC) P(scalesC) P(C); Mammal P(C) P(hairC); Bird P(C) P(feathersC)."
file1_topic_37_0,"dissimilarity, ompute, etwe, cts, obje","<task:clean> <sos>
 Dissimilarities are assessed based on the attribute v alues describing the ob jects
 Y ou will also study ho w to compute dissimilarities b et w een ob jects represen ted b y v arious attribute or v ariable t yp es
 How c an dissimilarity d ( i j ) b e assesse d
 OK y ou no w ask onc e I have standar dize d the data how c an I c ompute the dissimilarity b etwe en obje cts
 Therefore metho ds sp eci c to binary data are necessary for computing dissimilarities
 So how c an I c ompute the dissimilarity b etwe en two binary variables
 F or in v arian t similarities the most w ellkno wn co ecien t for assessing the dissimilarit y b et w een ob jects i and j is the simple matc hing co ecien t de ned in (
 The similarit y based on suc h v ariables is called nonin v arian t similari t y F or nonin v arian t similariti es the most w ellkno wn co ecien t is the Jaccard co ecien t de ned in ( ) where the n um b er of negativ e matc hes d is considered unimp ortan t and th us is ignored in the computation
 How is dissimilarity c ompute d b etwe en obje cts describ e d by nominal variables
 The dissimilarit y b et w een t w o ob jects i and j can b e computed using the simple matc hing approac h as in ( ) p m d ( i j ) ( ) p where m is the n um b er of matches ( ie the n um b er of v ariables for whic h i and j are in the same state ) and p is the total n um b er of v ariables
 <eos>","Dissimilarities are assessed based on the attribute values describing the objects. You will also study how to compute dissimilarities between objects represented by various attribute or variable types. How can dissimilarity d(i,j) be assessed? You now ask: once I have standardized the data, how can I compute the dissimilarity between objects? Therefore, methods specific to binary data are necessary for computing dissimilarities. So, how can I compute the dissimilarity between two binary variables? For invariant similarities, the most well-known coefficient for assessing the dissimilarity between objects i and j is the simple matching coefficient, defined in (). The similarity based on such variables is called noninvariant similarity. For noninvariant similarities, the most well-known coefficient is the Jaccard coefficient, defined in (), where the number of negative matches d is considered unimportant and thus is ignored in the computation. How is dissimilarity computed between objects described by nominal variables? The dissimilarity between two objects i and j can be computed using the simple matching approach, as in () p m d(i,j) () p, where m is the number of matches (i.e., the number of variables for which i and j are in the same state) and p is the total number of variables."
file1_topic_37_1,"dissimilarity, ompute, etwe, cts, obje","<task:clean> <sos>
 T ypical examples include the gro wth of a bacteria p opulation or the deca y of a radioactiv e elemen t How c an I c ompute the dissimilarity b etwe en obje cts describ e d by r ationsc ale d variables
 In general a database can con tain all of the six v ariable t yp es listed ab o v e So how c an we c ompute the dissimilarity b etwe en obje cts of mixe d variable typ es
 if if if if M f Th us the dissimilarit y b et w een ob jects can b e computed ev en when the v ariables describing the ob jects are of di eren t t yp es
 can b e used to transform b et w een dissimilarit y and similarit y co ecien ts
 They di er only in their de nition of in tercluster similarit y
 The option of lo oking for a univ ersal dissimilarit y function w as rejected based on exp erimen ts with real life databases
 <eos>","Typical examples include the growth of a bacteria population or the decay of a radioactive element. How can I compute the dissimilarity between objects described by ratio-scaled variables? In general, a database can contain all of the six variable types listed above. So, how can we compute the dissimilarity between objects of mixed variable types? Thus, the dissimilarity between objects can be computed even when the variables describing the objects are of different types. It can be used to transform between dissimilarity and similarity coefficients. They differ only in their definition of intercluster similarity. The option of looking for a universal dissimilarity function was rejected based on experiments with real-life databases."
file1_topic_38,"distance, function, measures, computed, section","<task:clean> <sos>
 Often distance measures are used
 Measures of dissimilarit y are discussed throughout this section
 It then describ es distance measures that are commonly used for computing the dissimilarit y of ob jects describ ed b y suc h v ariables
 If eac h v ariable is assigned a w eigh t according to its p erceiv ed imp ortance the weighte d Euclidean distance can b e computed as follo ws
 Supp ose that the distance b et w een ob jects ( patien ts ) is computed based only on the asymmetric v ariables
 The dissimilarit y co ecien t for this form of enco ding can b e calculated using the metho ds discussed in Section
 Dissimilarit y can then b e computed using an y of the distance measures describ ed in Section for in terv al scaled v ariables using z to represen t the f v alue for the ith ob ject
 R B B y ( x ) f ( x y ) ( ) f B B In principle the in uence function can b e an arbitrary function that can determine the distance b et w een t w o ob jects in a neigh b orho o d It should b e re exiv e and symmetric suc h as the Euclidean distance function ( Section ) a squar e wave in uenc e function if d ( x y ) ( x y ) ( ) f S q uar e other w ise or a Gaussian in uenc e function d ( xy ) ( x y ) e ( ) f Gauss d The densit y function at an ob ject x F is de ned as the sum of in uence functions of all data p oin ts
 Dissimil ari t y function This function do es not require a metrical distance b et w een the ob jects
 Supp ose that the distance b et w een ob jects ( p oten tial p enpals ) is computed based only on the asymmetric v ariables
 <eos>","Often, distance measures are used.
 Measures of dissimilarity are discussed throughout this section.
 It then describes distance measures that are commonly used for computing the dissimilarity of objects described by such variables.
 If each variable is assigned a weight according to its perceived importance, the weighted Euclidean distance can be computed as follows:
 Suppose that the distance between objects (patients) is computed based only on the asymmetric variables.
 The dissimilarity coefficient for this form of encoding can be calculated using the methods discussed in Section.
 Dissimilarity can then be computed using any of the distance measures described in Section for interval-scaled variables, using z to represent the f-value for the i-th object.
 R B B y ( x ) f ( x y ) ( ) f B B In principle, the influence function can be an arbitrary function that can determine the distance between two objects in a neighborhood. It should be reflexive and symmetric, such as the Euclidean distance function (Section), a square wave influence function if d ( x y ) ( x y ) ( ) f S q uar e otherwise, or a Gaussian influence function d ( xy ) ( x y ) e ( ) f Gauss d.
 The density function at an object x F is defined as the sum of influence functions of all data points.
 Dissimilarity function. This function does not require a metrical distance between the objects.
 Suppose that the distance between objects (potential penpals) is computed based only on the asymmetric variables."
file1_topic_39,"dete, visualization, ction, outlier, visualizing","<task:clean> <sos>
 Clustering can also b e used for outlier dete ction whic h forms the nal topic of this c hapter
 W e also examine clustering in highdimensional space and outlier analysis
 Outlier analysis whic h t ypically in v olv es clustering is describ ed in Section
 outliers is insensitiv e to the order of input and do es not require the sp eci cation of input parameters suc h as the n um b er of clusters or a neigh b orho o d radius
 What ab out using data visualization metho ds for outlier dete ction
 Data visualization metho ds are w eak in detecting outliers in data with ma y categorical attributes or in data of highdimensionalit y since h uman ey es are go o d at visualizing n umeric data of only t w o to three dimensions
 <eos>","Clustering can also be used for outlier detection, which forms the final topic of this chapter. We also examine clustering in high-dimensional space and outlier analysis. Outlier analysis, which typically involves clustering, is described in Section. Outlier analysis is insensitive to the order of input and does not require the specification of input parameters such as the number of clusters or a neighborhood radius. What about using data visualization methods for outlier detection? Data visualization methods are weak in detecting outliers in data with many categorical attributes or in data of high-dimensionality since human eyes are good at visualizing numeric data of only two to three dimensions."
file1_topic_40,"traclass, terclass, similarit, probabilit, cance","<task:clean> <sos>
 The guideline of striving for high in traclass similarit y and lo w in terclass similarit y still applies
 Category utilit y rew ards in terclass similarit y and in traclass dissimilarit y where in terclass similari t y is the probabilit y P ( C V )
 in traclass similarit y is the probabilit y P ( A V )
 Signi cance probabilit y S P ( v ) P r ob ( T v ) is ev aluated
 <eos>","The guideline of striving for high intraclass similarity and low interclass similarity still applies. Category utility rewards interclass similarity and intraclass dissimilarity, where interclass similarity is the probability P(C V). Intraclass similarity is the probability P(A V). Significance probability SP(v) (Prob(T v)) is evaluated."
file1_topic_41,"biased, results, aried, sensitivit, solely","<task:clean> <sos>
 Clustering on a sample of a giv en large data set ma y lead to biased results
 The clustering results are often quite sensitiv e to input parameters
 The resulting clusters are returned b y the clustering pro cess
 A go o d clustering based on samples will not necessarily represen t a go o d clustering of the whole data set if the sample is biased
 A sensitivit y analysis sho w ed that although some parameters can b e v aried without impacting the qualit y of clustering the parameter setting in general do es ha v e a signi can t in uence on the results
 Here clustering qualit y is not solely a function of the individual ob jects
 <eos>","Clustering on a sample of a given large data set may lead to biased results. The clustering results are often quite sensitive to input parameters. The resulting clusters are returned by the clustering process. A good clustering based on samples will not necessarily represent a good clustering of the whole data set if the sample is biased. A sensitivity analysis showed that although some parameters can be varied without impacting the quality of clustering, the parameter setting in general does have a significant influence on the results. Here, clustering quality is not solely a function of the individual objects."
file1_topic_42,"categorical, attributes, guha, shim, rastogi","<task:clean> <sos>
 Abilit y to deal with di eren t t yp es of attributes Man y algorithms are designed to cluster in terv albased ( n umerical ) data
 R OCK is an alternativ e agglomerativ e hierarc hical clustering algorithm that unlik e CURE is suited for clus tering categorical attributes
 T ypical studies in this direction include the BIR CH algorithm b y Zhang Ramakrishnan and Livn y CURE b y Guha Rastogi and Shim R OCK ( for clustering categorical attributes ) b y Guha Rastogi and Shim and CHAMELEON b y Karypis Han and Kumar
 Ro c k A robust clustering algorithm for categorical attributes
 Extensions to the kmeans algorithm for clustering large data sets with categorical v alues
 <eos>","Ability to deal with different types of attributes; many algorithms are designed to cluster interval-based (numerical) data.
 ROCK is an alternative agglomerative hierarchical clustering algorithm that, unlike CURE, is suited for clustering categorical attributes.
 Typical studies in this direction include the BIRCH algorithm by Zhang, Ramakrishnan, and Livny; CURE by Guha, Rastogi, and Shim; ROCK (for clustering categorical attributes) by Guha, Rastogi, and Shim; and CHAMELEON by Karypis, Han, and Kumar.
 ROCK: A robust clustering algorithm for categorical attributes.
 Extensions to the k-means algorithm for clustering large data sets with categorical values."
file1_topic_43,"users, accurately, burdens, terpretations, ultaneously","<task:clean> <sos>
 This not only burdens users but also mak es the qualit y of clustering dicult to con trol
 In terpretabi l it y and usabilit y Users exp ect clustering results to b e in terpretable comprehensible and usable
 That is clustering ma y need to b e tied up with sp eci c seman tic in terpretations and applications
 Ho w ev er its pro cessing is more costly than the k means metho d Both metho ds require the user to sp ecify k the n um b er of clusters
 Actually this is a problem asso ciated with man y other clustering algorithms
 There do es not ev en exist a global parameter setting for whic h the result of a clustering algorithm ma y accurately describ e the in trinsic clustering structure
 T o construct the di eren t clusterings sim ultaneously the ob jects should b e pro cessed in a sp eci c order
 <eos>","This not only burdens users but also makes the quality of clustering difficult to control. Interpretability and usability. Users expect clustering results to be interpretable, comprehensible, and usable. That is, clustering may need to be tied up with specific semantic interpretations and applications. However, its processing is more costly than the k-means method. Both methods require the user to specify k, the number of clusters. Actually, this is a problem associated with many other clustering algorithms. There does not even exist a global parameter setting for which the result of a clustering algorithm may accurately describe the intrinsic clustering structure. To construct the different clusterings simultaneously, the objects should be processed in a specific order."
file1_topic_44,"order, ordering, ybased, graphically, orderings","<task:clean> <sos>
 Insensitivi t y to the order of input records Some clustering algorithms are sensitiv e to the order of input data eg the same set of data when presen ted with di eren t orderings to suc h an algorithm ma y generate dramatically di eren t clusters
 This ordering represen ts the densit ybased clustering structure of the data
 It con tains information whic h is equiv alen t to densit ybased clustering obtained from a wide range of parameter settings
 Therefore in order to pro duce a set or ordering of densit ybased clusters w e pro vide a set of distance parameter v alues
 Suc h information is sucien t for the extraction of all densit ybased clusterings with resp ect to an y distance that is smaller than the distance used in generating the order
 The cluster ordering of a data set can b e represen ted graphically whic h helps in its understanding
 <eos>","Insensitivity to the order of input records: Some clustering algorithms are sensitive to the order of input data; e.g., the same set of data, when presented with different orderings to such an algorithm, may generate dramatically different clusters. This ordering represents the density-based clustering structure of the data. It contains information which is equivalent to density-based clustering obtained from a wide range of parameter settings. Therefore, in order to produce a set or ordering of density-based clusters, we provide a set of distance parameter values. Such information is sufficient for the extraction of all density-based clusterings with respect to any distance that is smaller than the distance used in generating the order. The cluster ordering of a data set can be represented graphically, which helps in its understanding."
file1_topic_45,"input, units, assume, excitatory, receiv","<task:clean> <sos>
 It is imp ortan t to dev elop algorithms whic h are insensitiv e to the order of input
 The t w o op erators men tioned ab o v e are highly sensitiv e to the input order of the ob ject
 Connections b et w een la y ers are excitatory a unit in a giv en la y er can receiv e inputs from all of the units in the next lo w er lev el
 The con guration of activ e units in a la y er represen ts the input pattern to the next higher la y er
 SOMs assume that there is some top ology or ordering among the input ob jects and that the units will ev en tually tak e on this structure in space
 <eos>","<sos>
 It is important to develop algorithms which are insensitive to the order of input. The two operators mentioned above are highly sensitive to the input order of the object. Connections between layers are excitatory. A unit in a given layer can receive inputs from all of the units in the next lower level. The configuration of active units in a layer represents the input pattern to the next higher layer. SOMs assume that there is some topology or ordering among the input objects and that the units will eventually take on this structure in space.
 <eos>"
file1_topic_46_0,"high, dimensions, useful, large, extremely","<task:clean> <sos>
 High dimensional i t y A database or a data w arehouse ma y con tain sev eral dimensions or attributes
 Supp ose that y our job is to c ho ose the lo cations for a giv en n um b er of new automatic cash stations ( A TMs ) in a cit y
 This rigidit y is useful in that it leads to smaller computation costs b y not w orrying ab out a com binatorial n um b er of di eren t c hoices
 F or large v alues of n and k suc h computation b ecomes v ery costly
 It registers crucial measuremen ts for computing clusters and utilizes storage ecien tly since it summarizes the information ab out the sub clusters of ob jects instead of storing all ob jects
 It consists of t w o phases Phase BIR CH scans the database to build an initial inmemory CF tree whic h can b e view ed as a m ultilev el compression of the data that tries to preserv e the inheren t clustering structure of the data
 It scales w ell for large databases without sacri cing clustering qualit y
 Ho w ev er the pro cessing cost for highdimensional data ma y require O ( n ) time for n ob jects in the w orst case
 It manages these cells in a treebased access structure and th us is signi can tly faster than some in uen tial algorithms suc h as DBSCAN ( b y a factor of up to )
 It can b e used in a topdo wn gridbased metho d as follo ws
 It is useful for clustering high dimensional data in large databases
 It scales linearly with the size of input and has go o d scalabilit y as the n um b er of dimensions in the data is increased
 <eos>","High dimensionality: A database or a data warehouse may contain several dimensions or attributes. Suppose that your job is to choose the locations for a given number of new automatic cash stations (ATMs) in a city. This rigidity is useful in that it leads to smaller computation costs by not worrying about a combinatorial number of different choices. For large values of n and k, such computation becomes very costly. It registers crucial measurements for computing clusters and utilizes storage efficiently since it summarizes the information about the subclusters of objects instead of storing all objects. It consists of two phases: Phase BIRCH scans the database to build an initial in-memory CF tree, which can be viewed as a multilevel compression of the data that tries to preserve the inherent clustering structure of the data. It scales well for large databases without sacrificing clustering quality. However, the processing cost for high-dimensional data may require O(n) time for n objects in the worst case. It manages these cells in a tree-based access structure and thus is significantly faster than some influential algorithms such as DBSCAN (by a factor of up to ). It can be used in a top-down, grid-based method as follows: It is useful for clustering high-dimensional data in large databases. It scales linearly with the size of input and has good scalability as the number of dimensions in the data is increased."
file1_topic_46_1,"high, dimensions, useful, large, extremely","<task:clean> <sos>
 It stores a con tin uous normal distribution ( ie mean and standard deviation ) for eac h individual attribute in eac h no de and uses a mo di ed category utilit y measure whic h is an in tegral o v er con tin uous attributes instead of a sum o v er discrete attributes as in COBWEB
 F urther researc h is required in making it readily applicable to large databases due to long pro cessing times and the in tricacies of complex data
 As men tioned ab o v e it can b e used in fraud detection eg b y detecting un usual usage of credit cards or telecomm unication services
 In addition it is useful in customized mark eting for iden tifying the sp ending b eha vior of customers with extremely lo w or extremely high incomes or in medical analysis for nding un usual resp onses to v arious medical treatmen ts
 It can b e used for large diskresiden t data sets y et do es not scale w ell for high dimensions
 Supp ose that y ou are to allo cate a n um b er of Automatic T eller Mac hines ( A TMs ) in a giv en region so as to satisfy a n um b er of constrain ts
 In R S Mic halski J G Carb onell and T M Mitc hell editors Machine L e arning A n arti cial intel ligenc e appr o ach ( V ol
 <eos>","It stores a continuous normal distribution (i.e., mean and standard deviation) for each individual attribute in each node and uses a modified category utility measure which is an integral over continuous attributes instead of a sum over discrete attributes as in COBWEB. Further research is required in making it readily applicable to large databases due to long processing times and the intricacies of complex data. As mentioned above, it can be used in fraud detection, e.g., by detecting unusual usage of credit cards or telecommunication services. In addition, it is useful in customized marketing for identifying the spending behavior of customers with extremely low or extremely high incomes or in medical analysis for finding unusual responses to various medical treatments. It can be used for large disk-resident data sets, yet does not scale well for high dimensions. Suppose that you are to allocate a number of Automatic Teller Machines (ATMs) in a given region so as to satisfy a number of constraints. In R. S. Michalski, J. G. Carbonell, and T. M. Mitchell, editors, Machine Learning: An Artificial Intelligence Approach (Vol."
file1_topic_47,"metho, visualize, judge, sized, threedimensional","<task:clean> <sos>
 W e then study eac h clustering metho d in detail including partitioning metho ds hierarc hical metho ds densit ybased metho ds gridbased metho ds and mo delbased metho ds
 These heuristic clustering metho ds w ork w ell for nding sphericalshap ed clusters in small to medium sized databases
 Metho ds ha v e also b een dev elop ed for viewing clustering structures of high dimensional data
 Can y ou design a data visualization metho d whic h ma y help h umans visualize data clusters and judge the clustering qualit y for threedimensional data
 <eos>","We then study each clustering method in detail, including partitioning methods, hierarchical methods, density-based methods, grid-based methods, and model-based methods. These heuristic clustering methods work well for finding spherical-shaped clusters in small to medium-sized databases. Methods have also been developed for viewing clustering structures of high-dimensional data. Can you design a data visualization method which may help humans visualize data clusters and judge the clustering quality for three-dimensional data?"
file1_topic_48,"teger, elo","<task:clean> <sos>
 x x x f p ( ) x x x i if ip x x x n nf np
 It is often represen ted b y an nb yn table as sho wn b elo w d ( ) d ( ) d ( ) ( )
 Since d ( i j ) d ( j i ) and d ( i i ) w e ha v e the matrix in ( )
 x f nf f f f f nf n
 It is de ned as q q q q d ( i j ) ( jx jx jx ) ( ) x x x j j j i j i j ip j p where q is a p ositiv e in teger
 r s d ( i j ) ( )
 if j f ij ij ( f ) jx x
 if j f j ij max x min x h hf h hf r
 <eos>","f p() i if ip n nf np
 It is often represented by an n by n table as shown below d() d() d() ()
 Since d(i,j), d(j,i), and d(i,i), we have the matrix in ().
 f nf f f f f nf n
 It is defined as q q q q d(i,j) (jx jx jx) () j j j i j i j ip j p where q is a positive integer.
 r s d(i,j) ()
 if j f ij ij (f) jx x
 if j f j ij max x min x h hf h hf r"
file1_topic_49,"matrix, dissimilarit, single, com, eren","<task:clean> <sos>
 Dissimil ari t y matrix ( or obje ctbyobje ct structur e ) This stores a collection of pro ximities that are a v ailable for all pairs of n ob jects
 The data matrix is often called a t w omo de matrix whereas the dissimilarit y matrix is called a onemo de matrix since the ro ws and columns of the former represen t di eren t en tities while those of the latter represen t the same en tit y
 One approac h in v olv es computing a dissimilarit y matrix from the giv en binary data
 One suc h tec hnique com bines the di eren t v ariables in to a single dissimilarit y matrix bringing all of the meaningful v ariables on to a common scale of the in terv al
 Metho ds for com bining v ariables of di eren t t yp es in to a single dissimilarit y matrix w ere prop osed b y Duc k er et al
 <eos>","A dissimilarity matrix (or object-by-object structure) stores a collection of proximities that are available for all pairs of n objects. The data matrix is often called a two-mode matrix, whereas the dissimilarity matrix is called a one-mode matrix, since the rows and columns of the former represent different entities while those of the latter represent the same entity. One approach involves computing a dissimilarity matrix from the given binary data. One such technique combines the different variables into a single dissimilarity matrix, bringing all of the meaningful variables onto a common scale of the interval. Methods for combining variables of different types into a single dissimilarity matrix were proposed by Ducker et al."
file1_topic_50,"nonnegativ, states, near, distance, erence","<task:clean> <sos>
 d ( n ) d ( n ) where d ( i j ) is the measured di erence or dissimil ari t y b et w een ob jects i and j
 In general d ( i j ) is a nonnegativ e n um b er that is close to when ob jects i and j are highly similar or near eac h other and b ecomes larger the more they di er
 d ( i j ) This states that distance is a nonnegativ e n um b er
 d ( i i ) This states that the distance of an ob ject to itself is
 d ( i j ) d ( j i ) This states that distance is a symmetric function and
 <eos>","d(n) d(n) represents where d(i j) is the measured difference or dissimilarity between objects i and j. In general, d(i j) is a nonnegative number that is close to zero when objects i and j are highly similar or near each other and becomes larger the more they differ. d(i j): This states that distance is a nonnegative number. d(i i): This states that the distance of an object to itself is zero. d(i j) = d(j i): This states that distance is a symmetric function."
file1_topic_51,"matrix, efore, shared, dissimilarit, constructs","<task:clean> <sos>
 Man y clustering algorithms op erate on a dissimilarit y matrix
 If the data are presen ted in the form of a data matrix it can rst b e transformed in to a dissimilarit y matrix b efore applying suc h clustering algorithms
 The dissimilarit y data can later b e used to compute clusters of ob jects
 R OCK rst constructs a sparse graph from a giv en data similarit y matrix using a similarit y threshold and the concept of shared neigh b ors
 <eos>","Many clustering algorithms operate on a dissimilarity matrix. If the data are presented in the form of a data matrix, it can first be transformed into a dissimilarity matrix before applying such clustering algorithms. The dissimilarity data can later be used to compute clusters of objects. ROCK first constructs a sparse graph from a given data similarity matrix using a similarity threshold and the concept of shared neighbors."
file1_topic_52,"manhattan, distance, euclidean, distanc, minkowski","<task:clean> <sos>
 These measures include the Euclide an Manhattan and Minkowski distanc es
 The most p opular distance measure is Euclidean distance whic h is de ned as q ( jx jx jx ( ) d ( i j ) x x x j j j i j i j ip j p where i ( x ) and j ( x ) are t w o pdimensional data ob jects
 x x x x i i ip j j j p Another w ellkno wn metric is Manhattan ( or cit y blo c k ) distance de ned as d ( i j ) jx j jx j jx j ( ) x x x i j i j ip j p Both the Euclidean distance and Manhattan distance satisfy the follo wing mathematic requiremen ts of a distance function
 d ( i j ) d ( i h ) d ( h j ) This is a triangular ine quality whic h states that going directly from ob ject i to ob ject j in space is no more than making a detour o v er an y other ob ject h Mink o wski distance is a generalization of b oth Euclidean distance and Manhattan distance
 It represen ts the Manhattan distance when q and Euclidean distance when q
 q d ( i j ) w w ( ) w jx x jx x jx x j j j i j i j p ip j p W eigh ting can also b e applied to the Manhattan and Mink o wski distances
 ( b ) Compute the Manhattan distanc e b et w een the t w o ob jects
 ( c ) Compute the Minkowski distanc e b et w een the t w o ob jects using q
 ( ) A ( ) A ( ) B ( ) B ( ) B ( ) C ( ) C ( ) A The distance function is Euclidean distance
 <eos>","These measures include the Euclidean, Manhattan, and Minkowski distances. The most popular distance measure is Euclidean distance, which is defined as d(i,j) = sqrt(sum_{k=1 to p} (x_ik - x_jk)^2), where i(x) and j(x) are two p-dimensional data objects. Another well-known metric is Manhattan (or city block) distance, defined as d(i,j) = sum_{k=1 to p} |x_ik - x_jk|. Both the Euclidean distance and Manhattan distance satisfy the following mathematical requirements of a distance function: d(i,j) <= d(i,h) + d(h,j). This is a triangular inequality, which states that going directly from object i to object j in space is no more than making a detour over any other object h. Minkowski distance is a generalization of both Euclidean distance and Manhattan distance. It represents the Manhattan distance when q=1 and Euclidean distance when q=2: d(i,j) = (sum_{k=1 to p} |x_ik - x_jk|^q)^(1/q). Weighting can also be applied to the Manhattan and Minkowski distances.
 (b) Compute the Manhattan distance between the two objects.
 (c) Compute the Minkowski distance between the two objects using q.
 (A) The distance function is Euclidean distance."
file1_topic_53,"measuremen, hoice, standardization, useful, nonmissing","<task:clean> <sos>
 In terv alscaled v ariables are con tin uous measuremen ts of a roughly linear scale
 T o help a v oid dep endence on the c hoice of measuremen t units the data should b e standardized
 Standardizing measuremen ts attempts to giv e all v ariables an equal w eigh t This is particularly useful when giv en no prior kno wledge of the data
 T o standardize measuremen ts one c hoice is to con v ert the original measuremen ts to unitless v ariables
 Giv en measuremen ts for a v ariable f this can b e p erformed as follo ws
 Standardization ma y or ma y not b e useful in a particular application
 Th us the c hoice of whether and ho w to p erform standardization should b e left to the user
 If f is in terv albased d where h runs o v er all nonmissing ob jects for v ariable f
 Therefore new means are computed based on w eigh ted measures
 <eos>","Interval-scaled variables are continuous measurements on a roughly linear scale. To help avoid dependence on the choice of measurement units, the data should be standardized. Standardizing measurements attempts to give all variables an equal weight. This is particularly useful when given no prior knowledge of the data. To standardize measurements, one choice is to convert the original measurements to unitless variables. Given measurements for a variable f, this can be performed as follows: Standardization may or may not be useful in a particular application. Thus, the choice of whether and how to perform standardization should be left to the user. If f is interval-based, where h runs over all non-missing objects for variable f. Therefore, new means are computed based on weighted measures."
file1_topic_54,"deviation, absolute, outliers, mean, deviations","<task:clean> <sos>
 Calculate the standardized measuremen t or zscore as follo ws x m if f ( ) z if s f The mean absolute deviation s is more robust to outliers than the standard deviation
 When computing f f the mean absolute deviation the deviations from the mean ( ie jx j ) are not squared hence the e ect m if f of outliers is somewhat reduced
 There are more robust measures of disp ersion suc h as the me dian absolute deviation
 Ho w ev er the adv an tage of using the mean absolute deviation is that the zscores of outliers do not b ecome to o small hence the outliers remain detectable
 Suc h data ob jects whic h are grossly di eren t from or inconsisten t with the remaining set of data are called outliers
 In this section w e instead examine computerbased metho ds for outlier detection
 Statistical metho ds do not guaran tee that all outliers will b e found for the cases where no sp eci c test w as dev elop ed or the observ ed distribution can not b e adequately mo deled with an y standard distribution
 Hence in this approac h the term deviations is t ypically used to refer to outliers
 <eos>","Calculate the standardized measurement or z-score as follows. The mean absolute deviation (s) is more robust to outliers than the standard deviation. When computing the mean absolute deviation, the deviations from the mean (i.e., |x|) are not squared; hence, the effect of outliers is somewhat reduced. There are more robust measures of dispersion, such as the median absolute deviation. However, the advantage of using the mean absolute deviation is that the z-scores of outliers do not become too small; hence, the outliers remain detectable. Such data objects, which are grossly different from or inconsistent with the remaining set of data, are called outliers. In this section, we instead examine computer-based methods for outlier detection. Statistical methods do not guarantee that all outliers will be found for cases where no specific test was developed or the observed distribution cannot be adequately modeled with any standard distribution. Hence, in this approach, the term ""deviations"" is typically used to refer to outliers."
file1_topic_55_0,"asymmetric, binary, symmetric, equally, outcomes","<task:clean> <sos>
 Binary v ariables This section describ es ho w to compute the dissimilarit y b et w een ob jects describ ed b y either symmetric or asymmetric binary variables
 What is the di er enc e b etwe en symmetric and asymmetric binary variables
 A binary v ariable is symmetric if b oth of its states are equally v aluable and carry the same w eigh t that is there is no preference on whic h outcome should b e co ded as or
 Similarit y that is based on symmetric binary v ariables is called in v arian t similarit y in that the result do es not c hange when some or all of the binary v ariables are co ded di eren tly
 q r s t A binary v ariable is asymmetric if the outcomes of the states are not equally imp ortan t suc h as the p ositive and ne gative outcomes of a disease test
 Giv en t w o asymmetric binary v ariables the agreemen t of t w o s ( a p ositiv e matc h ) is then considered more signi can t than that of t w o zeros ( a negativ e matc h )
 r s d ( i j ) ( ) q r s When b oth symmetric and asymmetric binary v ariables o ccur in the same data set the mixed v ariables approac h describ ed in Section can b e applied
 F or asymmetric attribute v alues let the v alues Y and P b e set to and the v alue N b e set to
 <eos>","Binary variables: This section describes how to compute the dissimilarity between objects described by either symmetric or asymmetric binary variables. What is the difference between symmetric and asymmetric binary variables? A binary variable is symmetric if both of its states are equally valuable and carry the same weight; that is, there is no preference on which outcome should be coded as 0 or 1. Similarity that is based on symmetric binary variables is called invariant similarity, in that the result does not change when some or all of the binary variables are coded differently. A binary variable is asymmetric if the outcomes of the states are not equally important, such as the positive and negative outcomes of a disease test. Given two asymmetric binary variables, the agreement of two ones (a positive match) is then considered more significant than that of two zeros (a negative match). When both symmetric and asymmetric binary variables occur in the same data set, the mixed variables approach described in Section can be applied. For asymmetric attribute values, let the values Y and P be set to 1 and the value N be set to 0."
file1_topic_55_1,"asymmetric, binary, symmetric, equally, outcomes","<task:clean> <sos>
 Supp ose that the data set con tains p v ariables of mixed t yp e The dissimilarit y d ( i j ) b et w een ob jects i and j is de ned as ( f ) ( f ) p d ij ij f d ( i j ) ( ) ( f ) p ij f ( f ) where the indicator if either ( ) x or x is missing ( ie there is no measuremen t of v ariable f for ob ject if j f ij ( f ) i or ob ject j ) or ( ) x x and v ariable f is asymmetric binary otherwise
 <eos>","Suppose that the dataset contains p variables of mixed type. The dissimilarity `d(i,j)` between objects `i` and `j` is defined as the ratio of two sums for `f` from 1 to `p`: the sum of `delta_ij^(f)` times `d^(f)(i,j)` in the numerator, and the sum of `delta_ij^(f)` in the denominator. The indicator `delta_ij^(f)` is set to 0 if either `x_if` or `x_jf` is missing (i.e., there is no measurement of variable `f` for object `i` or object `j`), or if `x_if = 0` and `x_jf = 0` and variable `f` is asymmetric binary. Otherwise, `delta_ij^(f)` is set to 1."
file1_topic_56,"pair, jac, mary, ould, jim","<task:clean> <sos>
 By con v en tion w e shall co de the most imp ortan t outcome whic h is usually the rarest one b y ( eg HIV p ositive ) and the other b y ( eg HIV ne gative )
 According to the Jaccard co ecien t form ula ( ) the distance b et w een eac h pair of the three patien ts Jac k Mary and Jim should b e d ( j ack mar y ) ( ) d ( j ack j im ) ( ) ( ) d ( j im mar y ) These measuremen ts suggest that Jim and Mary are unlik ely to ha v e a similar disease they ha v e the highest dis similarit y v alue among the three pairs
 Of the three patien ts Jac k and Mary are the most lik ely to ha v e a similar disease
 Giv en t w o ob jects represen ted b y the follo wing tuples ( ) and ( ) ( a ) Compute the Euclide an distanc e b et w een the t w o ob jects
 ( a ) Sho w the c ontingency matrix for eac h pair giv en Kev an Caroline and Erik
 ( b ) Compute the simple matching c o ecient for eac h pair
 ( c ) Compute the Jac c ar d c o ecient for eac h pair
 ( d ) Who do y ou suggest w ould mak e the b est pair of p enpals
 Whic h pair of individuals w ould b e the least compatible
 Based on the Jaccard co ecien t who w ould b e the most compatible pair and wh y
 <eos>","By convention, we shall code the most important outcome, which is usually the rarest one, as (e.g., HIV positive) and the other as (e.g., HIV negative). According to the Jaccard coefficient formula (), the distance between each pair of the three patients Jack, Mary, and Jim should be d(Jack, Mary) (), d(Jack, Jim) (), d(Jim, Mary) (). These measurements suggest that Jim and Mary are unlikely to have a similar disease; they have the highest dissimilarity value among the three pairs. Of the three patients, Jack and Mary are the most likely to have a similar disease. Given two objects represented by the following tuples (), and (). (a) Compute the Euclidean distance between the two objects. (a) Show the contingency matrix for each pair given Kevan, Caroline, and Erik. (b) Compute the simple matching coefficient for each pair. (c) Compute the Jaccard coefficient for each pair. (d) Who do you suggest would make the best pair of penpals? Which pair of individuals would be the least compatible? Based on the Jaccard coefficient, who would be the most compatible pair and why?"
file1_topic_57,"adings, carefully, cide, half, wher","<task:clean> <sos>
 Notice that suc h in tegers are used just for data handling and do not represen t an y sp eci c ordering
 Given a new obje ct y ou w onder how do es COBWEB de cide wher e to inc orp or ate it into the classi c ation tr e e
 By carefully c ho osing the order in whic h blo c ks are loaded in to eac h half IO eciency can b e ac hiev ed
 Dietteric h R e adings in Machine L e arning
 <eos>","Notice that such integers are used just for data handling and do not represent any specific ordering.
 Given a new object, you wonder how COBWEB decides where to incorporate it into the classification tree.
 By carefully choosing the order in which blocks are loaded into each half, IO efficiency can be achieved.
 Dietterich, Readings in Machine Learning."
file1_topic_58,"ratioscaled, scale, ula, apply, ositiv","<task:clean> <sos>
 if Ratioscaled v ariables A ratioscaled v ariable mak es a p ositiv e measuremen t on a nonlinear scale suc h as an exp onen tial scale appro x imately follo wing the form ula B t B t ( ) Ae or Ae where A and B are p ositiv e constan ts
 T reat ratioscaled v ariables lik e in terv alscaled v ariables
 This ho w ev er is not usually a go o d c hoice since it is lik ely that the scale ma y b e distorted
 Apply logarithmi c transformation to a ratioscaled v ariable f ha ving v alue x for ob ject i b y using the if form ula y log ( x )
 Notice if if if that for some ratioscaled v ariables one ma y also apply loglog transformation or other transformations dep ending on the de nition and application
 <eos>","A ratio-scaled variable makes a positive measurement on a nonlinear scale, such as an exponential scale, approximately following the formula Ae^(Bt) or Ae^(-Bt), where A and B are positive constants. Treat ratio-scaled variables like interval-scaled variables. This, however, is not usually a good choice, since it is likely that the scale may be distorted. Apply logarithmic transformation to a ratio-scaled variable f having value x for object i by using the formula y = log(x). Notice that for some ratio-scaled variables one may also apply log-log transformation or other transformations depending on the definition and application."
file1_topic_59,"utilit, category, ected, umerator, term","<task:clean> <sos>
 The y v alues can b e treated as in terv alv alued as describ ed in Section
 W e in tuitiv ely presen t these de nitions and then follo w up with an example
 In particular the Apriori prop ert y is describ ed in Section
 Examples of eac h approac h are describ ed in this section
 Category utilit y ( CU ) is de ned as n P ( C ) P ( A V ) P ( A V jC k i j i ij k i j i ij k ( ) n It is incremen tal in that it tak es one ob ject at a time as input rather than all ob jects at once
 In other w ords category utilit y is the increase in the exp ected n um b er of attribute v alues that can b e correctly guessed giv en a partition ( where this exp ected n um b er is represen ted b y the rst term of the n umerator in Equation ) o v er the exp ected n um b er of correct guesses with no suc h kno wledge ( where this n um b er is the second term of the n umerator )
 The placemen t whic h results in the highest category utilit y should b e a go o d host for the ob ject
 These decisions are based on category utilit y
 Giv e examples in eac h case
 <eos>","The y values can be treated as interval-valued, as described in Section. We intuitively present these definitions and then follow up with an example. In particular, the Apriori property is described in Section. Examples of each approach are described in this section. Category utility (CU) is defined as n P(C) P(AV) P(AV jC k i j i ij k i j i ij k ()n. It is incremental in that it takes one object at a time as input, rather than all objects at once. In other words, category utility is the increase in the expected number of attribute values that can be correctly guessed given a partition (where this expected number is represented by the first term of the numerator in Equation) over the expected number of correct guesses with no such knowledge (where this number is the second term of the numerator). The placement which results in the highest category utility should be a good host for the object. These decisions are based on category utility. Give examples in each case."
file1_topic_60_0,"hierarc, hical, iterativ, relo, agglomeration","<task:clean> <sos>
 A hierarc hical metho d creates a hierarc hical decomp osition of the giv en set of data ob jects
 A hierarc hical metho d can b e classi ed as b eing either agglomer ative or divisive based on ho w the hierarc hical decomp osition is formed
 The agglomer ative appr o ach also called the b ottomup approac h starts with eac h ob ject forming a separate group
 It can b e adv an tageous to com bine iterativ e relo cation and hierarc hical agglomeration b y rst using a hierar c hical agglomerativ e algorithm and then re ning the result using iterativ e relo cation
 An in teresting strategy whic h often yields go o d results is to rst apply a hierarc hical agglomeration algorithm to determine the n um b er of clusters and to nd an initial classi cation and then use iterativ e relo cation to impro v e the classi cation
 Recen t studies ha v e emphasized the in tegration of hierarc hical agglomeration with iterativ e relo cation metho ds
 Agglomerativ e hierarc hical clustering This b ottomup strategy starts b y placing eac h ob ject in its o wn cluster and then merges these atomic clusters in to larger and larger clusters un til all of the ob jects are in a single cluster or un til certain termination conditions are satis ed
 BIR CH Balanced Iterativ e Reducing and Clustering using Hierarc hies BIR CH ( Balanced Iterativ e Reducing and Clustering using Hierarc hies ) is an in tegrated hierarc hical clustering metho d It in tro duces t w o concepts that of clusterin g feature and clustering feature tree ( CF tree ) whic h are used to summarize cluster represen tations
 First a la y er within the hierarc hical structure is determined from whic h the queryansw ering pro cess is to start
 A hierarc hi cal metho d creates a hierarc hical decomp osition of the giv en set of data ob jects
 <eos>","A hierarchical method creates a hierarchical decomposition of the given set of data objects. A hierarchical method can be classified as being either agglomerative or divisive based on how the hierarchical decomposition is formed. The agglomerative approach, also called the bottom-up approach, starts with each object forming a separate group. It can be advantageous to combine iterative relocation and hierarchical agglomeration by first using a hierarchical agglomerative algorithm and then refining the result using iterative relocation. An interesting strategy which often yields good results is to first apply a hierarchical agglomeration algorithm to determine the number of clusters and to find an initial classification, and then use iterative relocation to improve the classification. Recent studies have emphasized the integration of hierarchical agglomeration with iterative relocation methods. Agglomerative hierarchical clustering: This bottom-up strategy starts by placing each object in its own cluster and then merges these atomic clusters into larger and larger clusters until all of the objects are in a single cluster or until certain termination conditions are satisfied. BIRCH (Balanced Iterative Reducing and Clustering using Hierarchies) is an integrated hierarchical clustering method. It introduces two concepts: clustering feature and clustering feature tree (CF tree), which are used to summarize cluster representations. First, a layer within the hierarchical structure is determined from which the query-answering process is to start. A hierarchical method creates a hierarchical decomposition of the given set of data objects."
file1_topic_60_1,"hierarc, hical, iterativ, relo, agglomeration","<task:clean> <sos>
 The metho d can b e classi ed as b eing either agglomer ative ( b ottomup ) or divisive ( topdown ) based on ho w the hierarc hical decomp osition is formed
 T o comp ensate the rigidit y of merge or split hierarc hical agglomeration often in te grates other clustering tec hniques suc h as iterativ e relo cation
 <eos>","The method can be classified as either agglomerative (bottom-up) or divisive (top-down) based on how the hierarchical decomposition is formed. To compensate for the rigidity of merge or split, hierarchical agglomeration often integrates other clustering techniques, such as iterative relocation."
file1_topic_61,"tually, terminates, til, cluster, cess","<task:clean> <sos>
 The divisive appr o ach also called the topdown approac h starts with all the ob jects in the same cluster
 In eac h successiv e iteration a cluster is split up in to smaller clusters un til ev en tually eac h ob ject is in one cluster or un til a termination condition holds
 Ev en tually no redistribution of the ob jects in an y cluster o ccurs and so the pro cess terminates
 An ob ject is disc ar dable if its mem b ership in a cluster is ascertained
 The cluster splitting pro cess rep eats un til ev en tually eac h new cluster con tains only a single ob ject
 It will neither undo what w as done previously nor p erform ob ject sw apping b et w een clusters
 If a cluster gro ws to o slo wly remo v e it
 If the neigh b orho o d of a p oin t p con tains more than M inP ts a new cluster with p as a core ob ject is created
 The pro cess terminates when no new p oin t can b e added to an y cluster
 <eos>","The divisive approach, also called the top-down approach, starts with all the objects in the same cluster. In each successive iteration, a cluster is split up into smaller clusters until eventually each object is in one cluster or until a termination condition holds. Eventually, no redistribution of the objects in any cluster occurs, and so the process terminates. An object is discardable if its membership in a cluster is ascertained. The cluster splitting process repeats until eventually each new cluster contains only a single object. It will neither undo what was done previously nor perform object swapping between clusters. If a cluster grows too slowly, remove it. If the neighborhood of a point p contains more than MinPts, a new cluster with p as a core object is created. The process terminates when no new point can be added to any cluster."
file1_topic_62,"ersons, age, noticing, loss, inconsistencies","<task:clean> <sos>
 Ho w ev er a ma jor problem of suc h tec hniques is that they can not correct erroneous decisions
 V ery often there exist data ob jects that do not comply with the general b eha vior or mo del of the data
 F or example the displa y of a p ersons age as could b e caused b y a program default setting of an unrecorded age
 This ho w ev er could result in the loss of imp ortan t hidden information since one p ersons noise could b e another p ersons signal
 This ma y seem to b e an ob vious c hoice since h uman ey es are v ery fast and e ectiv e at noticing data inconsistencies
 <eos>","However, a major problem of such techniques is that they cannot correct erroneous decisions. Very often, there exist data objects that do not comply with the general behavior or model of the data. For example, the display of a person's age could be caused by a program's default setting for an unrecorded age. This, however, could result in the loss of important hidden information since one person's noise could be another person's signal. This may seem to be an obvious choice since human eyes are very fast and effective at noticing data inconsistencies."
file1_topic_63,"shap, oundary, spherical, diagonal, geometry","<task:clean> <sos>
 Suc h metho ds can nd only sphericalshap ed clusters and encoun ter dicult y at disco v ering clusters of arbitrary shap es
 Moreo v er if the clusters are not spherical in shap e BIR CH do es not p erform w ell b ecause it uses the notion of radius or diameter to con trol the b oundary of a cluster
 Ha ving more than one represen tativ e p oin t p er cluster allo ws CURE to adjust w ell to the geometry of non spherical shap es
 d ) The nal clusters are of nonspherical shap e
 These p oin ts then represen t and capture the shap e of the cluster
 As a result the shap es of the resulting clusters are isothetic that is all of the cluster b oundaries are either horizon tal or v ertical and no diagonal b oundary is detected
 <eos>","Such methods can find only spherical-shaped clusters and encounter difficulty in discovering clusters of arbitrary shapes. Moreover, if the clusters are not spherical in shape, BIRCH does not perform well because it uses the notion of radius or diameter to control the boundary of a cluster. Having more than one representative point per cluster allows CURE to adjust well to the geometry of non-spherical shapes. d) The final clusters are of non-spherical shape. These points then represent and capture the shape of the cluster. As a result, the shapes of the resulting clusters are isothetic; that is, all of the cluster boundaries are either horizontal or vertical, and no diagonal boundary is detected."
file1_topic_64_0,"cells, quan, nite, rectangular, grid","<task:clean> <sos>
 Gridbased metho ds quan tize the ob ject space in to a nite n um b er of cells whic h form a grid structure
 The main adv an tage of this approac h is its fast pro cessing time whic h is t ypically indep enden t of the n um b er of data ob jects and dep enden t only on the n um b er of cells in eac h dimension in the quan tized space
 Example Imagine that there are a set of p oin ts ( or ob jects ) lo cated in a rectangular region
 It quan tizes the space in to a nite n um b er of cells whic h form a grid structure on whic h all of the op erations for clustering are p erformed
 The main adv an tage of the approac h is its fast pro cessing time whic h is t ypically indep enden t of the n um b er of data ob jects y et dep enden t on only the n um b er of cells in eac h dimension in the quan tized space
 is divided in to rectangular cells
 There are usually sev eral lev els of suc h rectangular cells corresp onding to di eren t lev els of resolution and these cells form a hierarc hical structure eac h cell at a high lev el is partitioned to form a n um b er of cells at the next lo w er lev el
 In this approac h eac h grid cell summarizes the information of a group of p oin ts whic h map in to the cell
 Cellbased algorithm T o a v oid O ( n ) computational complexit y a cellbased algorithm w as dev elop ed for k memoryresiden t data sets
 In this metho d the data space is partitioned in to cells with a side length d equal to
 <eos>","Grid-based methods quantize the object space into a finite number of cells, which form a grid structure. The main advantage of this approach is its fast processing time, which is typically independent of the number of data objects and dependent only on the number of cells in each dimension in the quantized space. Example: Imagine that there are a set of points (or objects) located in a rectangular region. It quantizes the space into a finite number of cells, which form a grid structure on which all of the operations for clustering are performed. The main advantage of the approach is its fast processing time, which is typically independent of the number of data objects yet dependent only on the number of cells in each dimension in the quantized space. is divided into rectangular cells. There are usually several levels of such rectangular cells, corresponding to different levels of resolution, and these cells form a hierarchical structure: each cell at a high level is partitioned to form a number of cells at the next lower level. In this approach, each grid cell summarizes the information of a group of points which map into the cell. Cell-based algorithm. To avoid O(n) computational complexity, a cell-based algorithm was developed for k memory-resident data sets. In this method, the data space is partitioned into cells with a side length d equal to."
file1_topic_64_1,"cells, quan, nite, rectangular, grid","<task:clean> <sos>
 A gridbased metho d rst quan tizes the ob ject space in to a nite n um b er of cells whic h form a grid structure and then p erforms clustering on the grid structure
 <eos>",A grid-based method first quantizes the object space into a finite number of cells which form a grid structure and then performs clustering on the grid structure.
file1_topic_65_0,"regions, feature, wavelet, domain, space","<task:clean> <sos>
 It also leads to a w a y of automatically determining the n um b er of clusters based on standard statistics taking noise or outliers in to accoun t and th us yielding robust clustering metho ds
 This tends to result in more natural clusters in comparison with densit ybased metho ds suc h as DBSCAN ( describ ed in Section ) whic h instead uses a global neigh b orho o d Moreo v er the densit y of the region is recorded as the w eigh t of the edges
 These t ypically regard clusters as dense regions of ob jects in the data space whic h are separated b y regions of lo w densit y ( represen ting noise )
 It then uses a wavelet tr ansformation to transform the original feature space nding dense regions in the transformed space
 But what is a wavelet tr ansform
 In applying a w a v elet transform data are con v erted from the spatial domain ( where data are p oin ts in a feature or attribute space ) in to the fr e quency domain ( sho wing the data at di eren t scales or resolutions ) so that the natural clusters in the data b ecome more distinguishable
 Clusters can then b e iden ti ed b y searc hing for dense regions in the new domain
 Why is wavelet tr ansformation useful for clustering
 It uses hatshap e lters whic h emphasize regions where the p oin ts cluster while at the same time suppressing w eak er information outside of the cluster b oundaries
 Th us dense regions in the original feature space act as attractors for nearb y p oin ts and as inhibitors for p oin ts that are further a w a y
 This means that the clusters in the data automatically stand out and clear the regions around them
 <eos>","<task:clean> <sos>
 It also leads to a way of automatically determining the number of clusters based on standard statistics, taking noise or outliers into account and thus yielding robust clustering methods. This tends to result in more natural clusters in comparison with density-based methods such as DBSCAN (described in Section), which instead uses a global neighborhood. Moreover, the density of the region is recorded as the weight of the edges. These typically regard clusters as dense regions of objects in the data space, which are separated by regions of low density (representing noise). It then uses a wavelet transformation to transform the original feature space, finding dense regions in the transformed space. But what is a wavelet transform? In applying a wavelet transform, data are converted from the spatial domain (where data are points in a feature or attribute space) into the frequency domain (showing the data at different scales or resolutions) so that the natural clusters in the data become more distinguishable. Clusters can then be identified by searching for dense regions in the new domain. Why is wavelet transformation useful for clustering? It uses hat-shape filters which emphasize regions where the points cluster while at the same time suppressing weaker information outside of the cluster boundaries. Thus, dense regions in the original feature space act as attractors for nearby points and as inhibitors for points that are further away. This means that the clusters in the data automatically stand out and clear the regions around them.
 <eos>"
file1_topic_65_1,"regions, feature, wavelet, domain, space","<task:clean> <sos>
 A t the end of the clustering ( or an y clustering in general ) eac h cluster can b e though t of as a new feature that detects some regularit y in the ob jects
 Th us the resulting clusters can b e view ed as a mapping of lo wlev el features to higherlev el features
 is a m ultiresolution clustering approac h whic h transforms the original feature space b y w a v elet transform
 <eos>","At the end of the clustering (or any clustering in general), each cluster can be thought of as a new feature that detects some regularity in the objects. Thus, the resulting clusters can be viewed as a mapping of low-level features to higher-level features, which is a multiresolution clustering approach that transforms the original feature space by wavelet transform."
file1_topic_66,"input, taining, ensiv, clusters, database","<task:clean> <sos>
 Input The n um b er of clusters k and a database con taining n ob jects
 Let k that is the user w ould lik e to cluster the ob jects in to three clusters
 Mark the data with the corresp onding cluster lab els
 Moreo v er the probabilit y distribution represen tation of clusters mak es it quite exp ensiv e to up date and store the clusters
 The n um b er of clusters and of units p er cluster are input parameters
 <eos>","The number of clusters (k) and a database containing n objects are input. Let k be 3; that is, the user would like to cluster the objects into three clusters. Mark the data with the corresponding cluster labels. Moreover, the probability distribution representation of clusters makes it quite expensive to update and store the clusters. The number of clusters and of units per cluster are input parameters."
file1_topic_67,"wing, follo, tro, tages, subsections","<task:clean> <sos>
 In the follo wing sections w e examine eac h of the ab o v e v e clustering metho ds in detail
 A few suc h metho ds are in tro duced in the follo wing subsections
 It o ers the follo wing adv an tages
 These are outlined as follo ws
 The tec hnique in tro duces the follo wing k ey terms
 Giv en are the follo wing measuremen ts for the v ariable age
 <eos>","In the following sections, we examine each of the above clustering methods in detail. A few such methods are introduced in the following subsections. It offers the following advantages. These are outlined as follows. The technique introduces the following key terms. Given are the following measurements for the variable age."
file1_topic_68,"work, ans, round, tres, bir","<task:clean> <sos>
 How do es the k me ans algorithm work
 How do es the BIR CH algorithm work
 How e e ctive is BIR CH
 How do es this te chnique work
 Use the k me ans algorithm to sho w only ( a ) the three cluster cen tres after the rst round execution and ( b ) the nal three clusters
 <eos>","How does the k-means algorithm work? How does the BIRCH algorithm work? How effective is BIRCH? How does this technique work? Use the k-means algorithm to show only (a) the three cluster centres after the first round execution, and (b) the final three clusters."
file1_topic_69,"ernetics, biolo, cyb, gic, scienc","<task:clean> <sos>
 It pro ceeds as follo ws
 This pro cess is rep eated un til the b ottom la y er is reac hed
 Biolo gic al Cyb ernetics
 Co gnitive Scienc e
 <eos>",It proceeds as follows. This process is repeated until the bottom layer is reached. Biological Cybernetics. Cognitive Science.
file1_topic_70,"exemplar, assigned, closest, acts, singleli","<task:clean> <sos>
 F or eac h of the remaining ob jects an ob ject is assigned to the cluster to whic h it is the most similar based on the distance b et w een the ob ject and the cluster mean
 This is a singleli nk approac h in that eac h cluster is represen ted b y all of the ob jects in the cluster and the similarit y b et w een t w o clusters is measured b y the similarit y of the closest pair of data p oin ts b elonging to di eren t clusters
 An exemplar acts as a protot yp e of the cluster and do es not necessarily ha v e to corresp ond to a particular data example or ob ject
 New ob jects can b e distributed to the cluster whose exemplar is the most similar based on some distance measure
 If w e view the w eigh ts as de ning an exemplar then new ob jects are assigned to the cluster with the closest exemplar
 <eos>","Each of the remaining objects is assigned to the cluster to which it is most similar, based on the distance between the object and the cluster mean. This is a single-link approach, in that each cluster is represented by all of the objects in the cluster, and the similarity between two clusters is measured by the similarity of the closest pair of data points belonging to different clusters. An exemplar acts as a prototype of the cluster and does not necessarily have to correspond to a particular data example or object. New objects can be distributed to the cluster whose exemplar is the most similar, based on some distance measure. If we view the weights as defining an exemplar, then new objects are assigned to the cluster with the closest exemplar."
file1_topic_71,"cluster, eac, initially, iteration, tativ","<task:clean> <sos>
 It then computes the new mean for eac h cluster
 That is the mean v alue of eac h cluster is recalculated based on the ob jects in the cluster
 In other w ords there are no strict b oundaries b et w een clusters
 The set of j b est ob jects for eac h cluster in one iteration form the medoids for the next iteration
 Initially A GNES places eac h ob ject in to a cluster of its o wn
 In DIANA all of the ob jects are used to form one initial cluster
 BIR CH tries to pro duce the b est clusters with the a v ailable resources
 Represen tativ e p oin ts for eac h cluster are mark ed b y a
 Eac h cluster represen tativ e is mark ed b y a
 The represen tativ e p oin ts capture the shap e of eac h cluster
 Based on these notions b oth c enterde ne d cluster and arbitr aryshap e cluster can b e formally de ned
 CLIQUE generates a minim al description for eac h cluster as follo ws
 It then determines a minim al co v er for eac h cluster
 The indexbased al gorithm scales w ell as k increases
 Supp ose initially w e assign A B and C as the cen tre of eac h cluster resp ectiv ely
 <eos>","It then computes the new mean for each cluster. That is, the mean value of each cluster is recalculated based on the objects in the cluster. In other words, there are no strict boundaries between clusters. The set of j best objects for each cluster in one iteration forms the medoids for the next iteration. Initially, AGNES places each object into a cluster of its own. In DIANA, all of the objects are used to form one initial cluster. BIRCH tries to produce the best clusters with the available resources. Representative points for each cluster are marked by 'a'. Each cluster representative is marked by 'a'. The representative points capture the shape of each cluster. Based on these notions, both centre-defined and arbitrary-shape clusters can be formally defined. CLIQUE generates a minimal description for each cluster as follows: It then determines a minimal cover for each cluster. The index-based algorithm scales well as k increases. Suppose, initially, we assign A, B, and C as the centre of each cluster, respectively."
file1_topic_72,"subset, sequence, subsets, othing, smo","<task:clean> <sos>
 This pro cess iterates un til the criterion function con v erges
 Giv en a set S of n ob jects it builds a sequence of subsets fS g of these ob jects with m n suc h that S S m where S S
 S S j j j Dissimilarities are assessed b et w een subsets in the sequence
 It is de ned as the smallest subset of ob jects whose remo v al results in the greatest reduction of dissimilarit y in the residual set
 The dissimilarit y of a subset is incremen tally computed based on the subset prior to it in the sequence
 Smo othing factor This is a function that is computed for eac h subset in the sequence
 It assess ho w m uc h the dissimilarit y can b e reduced b y remo ving the subset from the original set of ob jects
 The subset whose smo othing factor v alue is the largest is the exception set
 Instead of assessing the dissimilarit y of the curren t subset with resp ect to its complemen tary set the algorithm selects a sequence of subsets from the set for analysis
 F or ev ery subset it determines the dissimilarit y di erence of the subset with resp ect to the pr e c e ding subset in the sequence
 Can t the or der of the subsets in the se quenc e a e ct the r esults
 The subset with the largest smo othing factor v alue among all of the iterations b ecomes the exception set
 The task of de ning this function is complicated b y the fact that the nature of the exceptions is not kno wn in adv ance
 That is the dissimilarit y of a giv en subset in a sequence can b e computed from that of the previous subset
 <eos>","<task:clean> <sos>
 This process iterates until the criterion function converges.
 Given a set S of n objects, it builds a sequence of subsets S_j of these objects, with m (where m <= n), such that S_j are subsets of S, and S_m is the final subset.
 Dissimilarities are assessed between subsets in the sequence.
 It is defined as the smallest subset of objects whose removal results in the greatest reduction of dissimilarity in the residual set.
 The dissimilarity of a subset is incrementally computed based on the subset prior to it in the sequence.
 Smoothing factor: This is a function that is computed for each subset in the sequence.
 It assesses how much the dissimilarity can be reduced by removing the subset from the original set of objects.
 The subset whose smoothing factor value is the largest is the exception set.
 Instead of assessing the dissimilarity of the current subset with respect to its complementary set, the algorithm selects a sequence of subsets from the set for analysis.
 For every subset, it determines the dissimilarity difference of the subset with respect to the preceding subset in the sequence.
 Can't the order of the subsets in the sequence affect the results?
 The subset with the largest smoothing factor value among all of the iterations becomes the exception set.
 The task of defining this function is complicated by the fact that the nature of the exceptions is not known in advance.
 That is, the dissimilarity of a given subset in a sequence can be computed from that of the previous subset.
 <eos>"
file1_topic_73,"ertices, jjc, compact, erage, edges","<task:clean> <sos>
 This criterion tries to mak e the i i i resulting k clusters as compact and as separate as p ossible
 It w orks w ell when the clusters are compact clouds that are rather w ell separated from one another
 It can b e used to nd the most natural n um b er of clusters using a silhouette c o ecient a prop ert y of an ob ject that sp eci es ho w m uc h the ob ject truly b elongs to the cluster
 It sub divides the cluster in to smaller and smaller pieces un til eac h ob ject forms a cluster on its o wn or un til it satis es certain termination conditions suc h as a desired n um b er of clusters is obtained or the distance b et w een the t w o closest clusters is ab o v e a certain threshold distance
 The cluster is split according to some principle suc h as the maxim um Euclidean distance b et w een the closest neigh b oring ob jects in the cluster
 It is de ned as j i j S E C fC g C RC ( C ) ( ) i j C i j jC jC S S j i j j E C E C jC jjC jC jjC C C i j i j i j j j where S is the a v erage w eigh t of the edges that connect v ertices in C to v ertices in C and S ( or E C i j E C fC g C C i i j ) is the a v erage w eigh t of the edges that b elong to the mincut bisector of cluster C ( or C )
 <eos>","This criterion tries to make the resulting k clusters as compact and as separate as possible.
 It works well when the clusters are compact clouds that are rather well separated from one another.
 It can be used to find the most natural number of clusters using a silhouette coefficient, a property of an object that specifies how much the object truly belongs to the cluster.
 It subdivides the cluster into smaller and smaller pieces until each object forms a cluster on its own, or until it satisfies certain termination conditions, such as a desired number of clusters is obtained or the distance between the two closest clusters is above a certain threshold distance.
 The cluster is split according to some principle, such as the maximum Euclidean distance between the closest neighboring objects in the cluster.
 It is defined as j i j S E C fC g C RC ( C ) ( ) i j C i j jC jC S S j i j j E C E C jC jjC jC jjC C C i j i j i j j j where S is the average weight of the edges that connect vertices in C to vertices in C and S ( or E C i j E C fC g C C i i j ) is the average weight of the edges that belong to the min-cut bisector of cluster C ( or C )."
file1_topic_74,"attributes, correlation, complexities, true, time","<task:clean> <sos>
 This ma y not b e the case in some applications suc h as when data with categorical attributes are in v olv ed
 This assumption is ho w ev er not alw a ys true since correlation b et w een attributes often exists
 This is esp ecially so when the attributes ha v e a large n um b er of v alues since their time and space complexities dep end not only on the n um b er of attributes but also on the n um b er of v alues for eac h attribute
 This ma y seem lik e an exception in the time dimension
 <eos>","<sos> This may not be the case in some applications, such as when data with categorical attributes are involved. However, this assumption is not always true, since correlation between attributes often exists. This is especially so when the attributes have a large number of values, since their time and space complexities depend not only on the number of attributes but also on the number of values for each attribute. This may seem like an exception in the time dimension. <eos>"
file1_topic_75,"algorithm, osed, alable, graphical, make","<task:clean> <sos>
 How c an we make the k me ans algorithm mor e sc alable
 This is compared to the ab o v e computation based on the existing no des
 The k mo des algorithm w as prop osed b y Huang while the EM ( Exp ectation Maximization ) algorithm w as in tro duced b y Lauritzen
 The CLARANS algorithm w as prop osed b y Ng and Han
 The EM algorithm for graphical asso ciation mo dels with missing data
 <eos>","How can we make the k-means algorithm more scalable?
 This is compared to the above computation based on the existing nodes.
 The k-modes algorithm was proposed by Huang, while the EM (Expectation Maximization) algorithm was introduced by Lauritzen.
 The CLARANS algorithm was proposed by Ng and Han.
 The EM algorithm for graphical association models with missing data."
file1_topic_76,"partition, memory, utilit, category, created","<task:clean> <sos>
 If an ob ject is neither discardable nor compressible then it should b e r etaine d in main memory
 With a limited amoun t of main memory an imp ortan t consideration is to minimi ze the time required for IO
 These ob jects are then distributed in to t w o partitions eac h con taining p oin ts
 This decision is based on temp orarily placing the ob ject in eac h no de and computing the category utilit y of the resulting partition
 That is a go o d p oin t In fact COBWEB also computes the category utilit y of the partition that w ould result if a new no de w ere to b e created for the ob ject
 The ob ject is then placed in an existing class or a new class is created for it based on the partition with the highest category utilit y v alue
 Notice that COBWEB has the abilit y to automatically adjust the n um b er of classes in a partition
 It divides the memory bu er space in to t w o halv es and the data set in to sev eral logical blo c ks
 <eos>","If an object is neither discardable nor compressible, then it should be retained in main memory. With a limited amount of main memory, an important consideration is to minimize the time required for I/O. These objects are then distributed into two partitions, each containing points. This decision is based on temporarily placing the object in each node and computing the category utility of the resulting partition. That is a good point. In fact, COBWEB also computes the category utility of the partition that would result if a new node were to be created for the object. The object is then placed in an existing class, or a new class is created for it, based on the partition with the highest category utility value. Notice that COBWEB has the ability to automatically adjust the number of classes in a partition. It divides the memory buffer space into two halves and the data set into several logical blocks."
file1_topic_77,"complexit, algorithm, index, linear, nestedlo","<task:clean> <sos>
 How might the algorithm b e mo di e d to diminish such sensitivity
 Ho w ev er the computational complexit y of CLARANS is ab out O ( n ) where n is the n um b er of ob jects
 The computation complexit y of the algorithm is O ( n ) where n is the n um b er of ob jects to b e clustered
 The algorithm requires one scan of the en tire database
 The algorithm is sensitiv e to the userde ned parameters
 The algorithm implemen tatio n can b e made parallel
 This algorithm has a w orst case complexit y of O ( k n ) where k is the dimensionalit y and n is the n um b er of ob jects in the data set
 Ho w ev er this complexit y ev aluation tak es only the searc h time in to accoun t ev en though the task of building an index in itself can b e computationally in tensiv e Nestedlo op algorithm The nestedlo op algorithm has the same computational complexit y as the index based algorithm but a v oids index structure construction and tries to minimi ze the n um b er of IOs
 A v ariation to the algorithm is linear with resp ect to n and guaran tees that no more than three passes o v er the data set are required
 A sequen tial approac h is computa tionally feasible and can b e implemen ted using a linear algorithm
 The algorithm has linear complexit y of O ( n ) where n is the n um b er of ob jects in the input pro vided that the n um b er of iterations is not v ery big
 <eos>","How might the algorithm be modified to diminish such sensitivity? However, the computational complexity of CLARANS is about O(n) where n is the number of objects. The computational complexity of the algorithm is O(n), where n is the number of objects to be clustered. The algorithm requires one scan of the entire database. The algorithm is sensitive to the user-defined parameters. The algorithm implementation can be made parallel. This algorithm has a worst-case complexity of O(kn) where k is the dimensionality and n is the number of objects in the data set. However, this complexity evaluation takes only the search time into account, even though the task of building an index in itself can be computationally intensive. The nested-loop algorithm has the same computational complexity as the index-based algorithm but avoids index structure construction and tries to minimize the number of IOs. A variation of the algorithm is linear with respect to n and guarantees that no more than three passes over the data set are required. A sequential approach is computationally feasible and can be implemented using a linear algorithm. The algorithm has linear complexity of O(n) where n is the number of objects in the input, provided that the number of iterations is not very big."
file1_topic_78,"medoids, est, clara, searc, medoid","<task:clean> <sos>
 Instead of taking the mean v alue of the ob jects in a cluster as a reference p oin t the medoid can b e used whic h is the most cen trally lo cated ob ject in a cluster
 The strategy then iterativ ely replaces one of the medoids b y one of the nonmedoids as long as the qualit y of the resulting clustering is impro v ed
 CLARA can not nd the b est clustering if an y sampled medoid is not among the b est k medoids
 F or example if an ob ject o is one of the medoids in the b est k medoids but it is not selected during sampling CLARA will nev er i nd the b est clustering
 While CLARA has a xed sample at eac h stage of the searc h CLARANS dra ws a sample with some randomness in eac h step of the searc h The clustering pro cess can b e presen ted as searc hing a graph where ev ery no de is a p oten tial solution ie a set of k medoids
 The clustering obtained after replacing a single medoid is called the neighb or of the curren t clustering
 <eos>","Instead of taking the mean value of the objects in a cluster as a reference point, the medoid can be used, which is the most centrally located object in a cluster. The strategy then iteratively replaces one of the medoids by one of the non-medoids as long as the quality of the resulting clustering is improved. CLARA cannot find the best clustering if any sampled medoid is not among the best k medoids. For example, if an object 'o' is one of the medoids in the best k medoids but it is not selected during sampling, CLARA will never find the best clustering. While CLARA has a fixed sample at each stage of the search, CLARANS draws a sample with some randomness in each step of the search. The clustering process can be presented as searching a graph where every node is a potential solution, i.e., a set of k medoids. The clustering obtained after replacing a single medoid is called the neighbor of the current clustering."
file1_topic_79,"andom, medoid, replaced, reassigned, closest","<task:clean> <sos>
 Eac h remaining ob ject is clustered with the medoid to whic h it is the most similar
 T o determine whether a nonmedoid ob ject o r andom is a go o d replacemen t for a curren t medoid o the follo wing four cases are examined for eac h of the j nonmedoid ob jects p Case p curren tly b elongs to medoid o
 If o is replaced b y o as a medoid and p is closest to one of j j r andom i j then p is reassigned to o
 If o is replaced b y o as a medoid and p is closest to o j j r andom r andom then p is reassigned to o
 If o is replaced b y o as a medoid and and p is still i j r andom closest to o then the assignmen t do es not c hange
 If o is replaced b y o as a medoid and p is closest to i j r andom then p is reassigned to o
 All of the p ossible pairs of ob jects are analyzed where one ob ject in eac h pair is considered a medoid and the other is not
 Medoids are then c hosen from this sample using P AM
 neigh b ors b et w een t w o p oin ts p and p
 Similarly R and S are densit yreac hable from O
 O R and S are all densit yconnected
 The n um b er of la y ers can b e arbitrary
 <eos>","Each remaining object is clustered with the medoid to which it is the most similar. To determine whether a non-medoid object O_random is a good replacement for a current medoid O_i, the following four cases are examined for each of the j non-medoid objects P_j, where P_j currently belongs to medoid O_i: If O_i is replaced by O_random as a medoid and P_j is closest to one of j_j_random_i_j, then P_j is reassigned to O_random. If O_i is replaced by O_random as a medoid and P_j is closest to o_j_j_random_random, then P_j is reassigned to O_random. If O_i is replaced by O_random as a medoid and P_j is still i_j_random closest to O_random, then the assignment does not change. If O_i is replaced by O_random as a medoid and P_j is closest to i_j_random, then P_j is reassigned to O_random. All possible pairs of objects are analyzed where one object in each pair is considered a medoid and the other is not. Medoids are then chosen from this sample using PAM. Neighbors between two points p and p. Similarly, R and S are density-reachable from O. O, R, and S are all density-connected. The number of layers can be arbitrary."
file1_topic_80,"elongs, case, curren, tly, medoid","<task:clean> <sos>
 o i i Case p curren tly b elongs to medoid o
 r andom Case p curren tly b elongs to medoid o i j
 i Case p curren tly b elongs to medoid o i j
 This is therefore a tradeo for eciency
 <eos>","Oii Case P currently belongs to medoid Or, or a random Case P currently belongs to medoid Oij. Case P currently belongs to medoid Oij. Case P currently belongs to medoid Oij. This is therefore a trade-off for efficiency."
file1_topic_81,"cost, squareerror, replaced, total, nonmedoid","<task:clean> <sos>
 Eac h time a reassignmen t o ccurs a di erence in squareerror E is con tributed to the cost function
 Therefore the cost function calculates the di er enc e in squareerror v alue if a curren t medoid is replaced b y a nonmedoid ob ject
 The total cost of sw apping is the sum of costs incurred b y all nonmedoid ob jects
 If the total cost is negativ e then o is replaced or sw app ed with o since the actual squareerror E w ould b e j r andom reduced
 If the total cost is p ositiv e the curren t medoid o is considered acceptable and nothing is c hanged in the j iteration
 An ob ject o is replaced with the ob ject causing the greatest reduction in squareerror
 <eos>","Each time a re-assignment occurs, a difference in square error E is contributed to the cost function. Therefore, the cost function calculates the difference in square error if a current medoid is replaced by a non-medoid object. The total cost of swapping is the sum of costs incurred by all non-medoid objects. If the total cost is negative, then o is replaced or swapped with o, since the actual square error E would be further reduced. If the total cost is positive, the current medoid o is considered acceptable, and nothing is changed in the j-th iteration. An object o is replaced with the object causing the greatest reduction in square error."
file1_topic_82,"hosen, gor, closely, manner, implicit","<task:clean> <sos>
 The idea b ehind CLARA is as follo ws Instead of taking the whole set of data in to consideration a small p ortion of the actual data is c hosen as a represen tativ e of the data
 If the sample is selected in a fairly random manner it should closely represen t the original data set
 The represen tativ e ob jects ( medoids ) c hosen will lik ely b e similar to those that w ould ha v e b een c hosen from the whole data set
 It uses implicit redundancy of the data
 F or in terested readers this is equiv alen t to the greatest reduction in Kolmo gor ov c omplexity for the amoun t of data discarded
 <eos>","The idea behind CLARA is as follows: Instead of taking the whole set of data into consideration, a small portion of the actual data is chosen as a representative of the data. If the sample is selected in a fairly random manner, it should closely represent the original data set. The representative objects (medoids) chosen will likely be similar to those that would have been chosen from the whole data set. It uses implicit redundancy of the data. For interested readers, this is equivalent to the greatest reduction in Kolmogorov complexity for the amount of data discarded."
file1_topic_83,"clara, clarans, sample, hniques, hes","<task:clean> <sos>
 As exp ected CLARA can deal with larger data sets than P AM
 The e ectiv eness of CLARA dep ends on the sample size
 Notice that P AM searc hes for the b est k medoids among a giv en data set whereas CLARA searc hes for the b est k medoids among the sele cte d sample of the data set
 How might we impr ove the quality and sc alability of CLARA
 Ho w ev er unlik e CLARA CLARANS do es not con ne itself to an y sample at an y giv en time
 CLARANS has b een exp erimen tally sho wn to b e more e ectiv e than b oth P AM and CLARA
 Ester Kriegel and Xu prop osed tec hniques for further impro v emen t of the p erformance of CLARANS using ecien t spatial access metho ds suc h as Rtree and fo cusing tec hniques
 <eos>","As expected, CLARA can deal with larger data sets than PAM. The effectiveness of CLARA depends on the sample size. Notice that PAM searches for the best k medoids among a given data set, whereas CLARA searches for the best k medoids among the selected sample of the data set. How might we improve the quality and scalability of CLARA? However, unlike CLARA, CLARANS does not confine itself to any sample at any given time. CLARANS has been experimentally shown to be more effective than both PAM and CLARA. Ester Kriegel and Xu proposed techniques for further improvement of the performance of CLARANS using efficient spatial access methods such as R-tree and focusing techniques."
file1_topic_84,"tativ, fraction, cen, ter, shrink","<task:clean> <sos>
 The second called CURE represen ts eac h cluster b y a certain xed n um b er of represen tativ e ob jects and then shrinks them to w ard the cen ter of the cluster b y a sp eci ed fraction
 Instead of using a single cen troid or ob ject to represen t a cluster a xed n um b er of represen tativ e p oin ts in space are c hosen
 The represen tativ e p oin ts of a cluster are generated b y rst selecting w ellscattered ob jects for the cluster and then shrinking or mo ving them to w ard the cluster cen ter b y a sp eci ed fraction or shrinking factor
 F or eac h new cluster the represen tativ e p oin ts are shrink ed or mo v ed to w ards the cluster cen ter
 The represen tativ e p oin ts falling in eac h newlyformed cluster are shrink ed or mo v ed to w ards the cluster cen ter b y a usersp eci ed fraction or shrinking factor
 Eac h new cluster is shrink ed or condensed b y mo ving its represen tativ e p oin ts to w ards the cluster cen ter b y a fraction
 <eos>","The second, called CURE, represents each cluster by a certain fixed number of representative objects and then shrinks them towards the center of the cluster by a specified fraction. Instead of using a single centroid or object to represent a cluster, a fixed number of representative points in space are chosen. The representative points of a cluster are generated by first selecting well-scattered objects for the cluster and then shrinking or moving them towards the cluster center by a specified fraction or shrinking factor. For each new cluster, the representative points are shrunk or moved towards the cluster center. The representative points falling in each newly formed cluster are shrunk or moved towards the cluster center by a user-specified fraction or shrinking factor. Each new cluster is shrunk or condensed by moving its representative points towards the cluster center by a fraction."
file1_topic_85,"pruned, uine, ultiphase, ortions, optionally","<task:clean> <sos>
 BIR CH is also e ectiv e for incremen tal and dynamic clustering of incoming ob jects
 BIR CH applies a m ultiphase clustering tec hnique A single scan of data set yields a basic go o d clustering and one or more additional scans can ( optionally ) b e used to further impro v e the qualit y
 Supp ose that y ou w ould lik e to cluster the ob jects in to t w o clusters therefore p
 It then uses an agglomerativ e hierarc hical clustering algorithm to nd the gen uine clusters b y rep eatedly com bining these clusters
 In general the prop ert y emplo ys prior kno wledge of items in the searc h space so that p ortions of the space can b e pruned
 <eos>","BIRCH is also effective for incremental and dynamic clustering of incoming objects. BIRCH applies a multiphase clustering technique; a single scan of the dataset yields a basic, good clustering, and one or more additional scans can (optionally) be used to further improve the quality. Suppose that you would like to cluster the objects into two clusters. It then uses an agglomerative hierarchical clustering algorithm to find the genuine clusters by repeatedly combining these clusters. In general, the property employs prior knowledge of items in the search space so that portions of the space can be pruned."
file1_topic_86,"tree, size, memory, factor, threshold","<task:clean> <sos>
 A CF tree has t w o parameters br anching factor B and thr eshold T
 The branc hing factor sp eci es the maxim um n um b er of c hildren p er nonleaf no de
 F or Phase the CF tree is built dynamically as ob jects are inserted
 The size of the CF tree can b e c hanged b y mo difying the threshold
 If the size of the memory that is needed for storing the CF tree is larger than the size of the main memory then a smaller threshold v alue can b e sp eci ed and the CF tree is rebuilt
 <eos>","A CF tree has two parameters: branching factor B and threshold T. The branching factor specifies the maximum number of children per non-leaf node. For Phase, the CF tree is built dynamically as objects are inserted. The size of the CF tree can be changed by modifying the threshold. If the size of the memory needed for storing the CF tree is larger than the size of the main memory, then a smaller threshold value can be specified, and the CF tree is rebuilt."
file1_topic_87,"tree, building, old, necessit, passed","<task:clean> <sos>
 These t w o parameters in uence the size of the resulting tree
 After the insertion of the new ob ject information ab out it is passed to w ards the ro ot of the tree
 The rebuild pro cess is p erformed b y building a new tree from the leaf no des of the old tree
 Th us the pro cess of rebuilding the tree is done without the necessit y of rereading all of the ob jects or p oin ts
 Therefore for building the tree data has to b e read just once
 <eos>","These two parameters influence the size of the resulting tree.
 After the insertion of the new object, information about it is passed towards the root of the tree.
 The rebuild process is performed by building a new tree from the leaf nodes of the old tree.
 Thus, the process of rebuilding the tree is done without the necessity of rereading all of the objects or points.
 Therefore, for building the tree, data has to be read just once."
file1_topic_88,"cure, chameleon, lets, shrinking, size","<task:clean> <sos>
 The shrinking or condensing of clusters helps damp en the e ects of outliers
 Therefore CURE is more robust to outliers and iden ti es clusters ha ving nonspherical shap es and wide v ariance in size
 The ma jor steps of the CURE algorithm are brie y outlined as follo ws
 Lets lo ok at an example of ho w CURE w orks
 CURE pro duces high qualit y clusters in the existence of outliers allo wing clusters of complex shap es and di eren t sizes
 Giv en n ob jects the complexit y of CURE is of O ( n )
 How sensitive is CURE to its usersp e ci e d p ar ameters such as the sample size numb er of desir e d clusters and shrinking fr action
 How do es CHAMELEON work
 Lets lo ok at CHAMELEON in closer detail
 S E C i j C j It has b een sho wn that CHAMELEON has more p o w er at disco v ering arbitrarilyshap ed clusters of high qualit y than CURE and DBSCAN
 T ypical suc h metho ds include BIR CH CURE and Chameleon
 <eos>","<sos>
 The shrinking or condensing of clusters helps dampen the effects of outliers. Therefore, CURE is more robust to outliers and identifies clusters having non-spherical shapes and wide variance in size. The major steps of the CURE algorithm are briefly outlined as follows. Let's look at an example of how CURE works. CURE produces high-quality clusters in the existence of outliers, allowing clusters of complex shapes and different sizes. Given n objects, the complexity of CURE is O(n). How sensitive is CURE to its user-specified parameters, such as the sample size, number of desired clusters, and shrinking fraction? How does CHAMELEON work? Let's look at CHAMELEON in closer detail. S E C i j C j. It has been shown that CHAMELEON has more power at discovering arbitrarily-shaped clusters of high quality than CURE and DBSCAN. Typical such methods include BIRCH, CURE, and Chameleon.
 <eos>"
file1_topic_89,"cedures, cedure, extreme, outliers, pro","<task:clean> <sos>
 Eliminate outliers b y random sampling
 Outlier analysis What is an outlier
 There are t w o basic t yp es of pro cedures for detecting outliers Blo c k pro cedures In this case either all of the susp ect ob jects are treated as outliers or all of them are accepted as consisten t Consecutiv e ( or sequen tial ) pro cedures An example of suc h a pro cedure is the insideout pro cedure
 If it is found to b e an outlier then all of the more extreme v alues are also considered outliers otherwise the next most extreme ob ject is tested and so on
 Outliers in Statistic al Data
 <eos>","Eliminate outliers by random sampling. Outlier analysis: What is an outlier? There are two basic types of procedures for detecting outliers: Block procedures, in which case either all of the suspect objects are treated as outliers or all of them are accepted as consistent; and Consecutive (or sequential) procedures, an example of which is the inside-out procedure. If it is found to be an outlier, then all of the more extreme values are also considered outliers; otherwise, the next most extreme object is tested, and so on. Outliers in Statistical Data."
file1_topic_90,"core, ject, reac, habl, yre","<task:clean> <sos>
 If the neigh b orho o d of an ob ject con tains at least a minim um n um b er M inP ts of ob jects then the ob ject is called a core ob ject
 Giv en a set of ob jects D w e sa y that an ob ject p is directly densit yre ac habl e from ob ject q if p is within the neigh b orho o d of q and q is a core ob ject
 Only core ob jects are m utually densit y reac hable
 If p is not a core ob ject the reac habilit ydistance b et w een p and q is unde ned
 <eos>","If the neighborhood of an object contains at least a minimum number MinPts of objects, then the object is called a core object. Given a set of objects D, we say that an object p is directly density-reachable from object q if p is within the neighborhood of q and q is a core object. Only core objects are mutually density-reachable. If p is not a core object, the reachability distance between p and q is undefined."
file1_topic_91,"yreac, hable, inp, directly, densit","<task:clean> <sos>
 An ob ject p is densit yreac hab le from ob ject q with resp ect to and M inP ts in a set of ob jects D if there is a c hain of ob jects p
 p p q and p p suc h that p is directly densit yreac hable from p with n n i i resp ect to and M inP ts for i n p D
 An ob ject p is densit yconne cted to ob ject q with resp ect to and M inP ts in a set of ob jects D if there is an ob ject o D suc h that b oth p and q are densit yreac hable from o with resp ect to and M inP ts
 M is directly densit yreac hable from P and Q is directly densit yreac hable from M
 Based on the previous observ ation Q is ( indirectly ) densit yreac hable from P
 Ho w ev er P is not densit y reac hable from Q
 <eos>","An object `p` is density-reachable from object `q` with respect to and `MinPts` in a set of objects `D` if there is a chain of objects, starting with `q` and ending with `p`, such that each object in the chain (except the first) is directly density-reachable from the immediately preceding object with respect to and `MinPts`, and all objects in the chain are in `D`. An object `p` is density-connected to object `q` with respect to and `MinPts` in a set of objects `D` if there is an object `o` in `D` such that both `p` and `q` are density-reachable from `o` with respect to and `MinPts`. `M` is directly density-reachable from `P`, and `Q` is directly density-reachable from `M`. Based on the previous observation, `Q` is (indirectly) density-reachable from `P`. However, `P` is not density-reachable from `Q`."
file1_topic_92,"dbscan, yreac, hable, alternativ, collects","<task:clean> <sos>
 How do es DBSCAN nd clusters
 DBSCAN c hec ks the neigh b orho o d of eac h p oin t in the database
 DBSCAN then iterativ ely collects directly densit yreac hable ob jects from these core ob jects whic h ma y in v olv e the merge of a few densit yreac hable clusters
 The computational complexit y of DBSCAN is O ( n l og n ) where n is the n um b er of database ob jects
 DBSCAN is further discussed in the follo wing section whic h compares it to an alternativ e densit ybased clustering metho d called OPTICS
 is an alternativ e to DBSCAN whic h do es not require an y input parameters y et is sligh tly slo w er than DBSCAN
 <eos>","How does DBSCAN find clusters? DBSCAN checks the neighborhood of each point in the database. DBSCAN then iteratively collects directly density-reachable objects from these core objects, which may involve the merge of a few density-reachable clusters. The computational complexity of DBSCAN is O(n log n), where n is the number of database objects. DBSCAN is further discussed in the following section, which compares it to an alternative density-based clustering method called OPTICS. OPTICS is an alternative to DBSCAN which does not require any input parameters, yet is slightly slower than DBSCAN."
file1_topic_93,"coredistance, ject, core, edistanc, achabilitydistanc","<task:clean> <sos>
 Based on this idea t w o v alues need to b e stored for eac h ob ject c or edistanc e and r e achabilitydistanc e The coredistance of an ob ject p is the smallest v alue that mak es p a core ob ject
 If p is not a core ob ject the coredistance of p is unde ned
 The reac habilit ydi st ance of an ob ject p and another ob ject o is the greater v alue of the coredistance of p and the Euclidean distance b et w een p and q
 The coredistance of p is the distance b et w een p and the fourth closest data ob ject
 <eos>","Based on this idea, two values need to be stored for each object: coredistance and reachabilitydistance. The coredistance of an object p is the smallest value that makes p a core object. If p is not a core object, the coredistance of p is undefined. The reachabilitydistance of an object p and another object o is the greater value of the coredistance of p and the Euclidean distance between p and q. The coredistance of p is the distance between p and the fourth closest data object."
file1_topic_94,"cell, lev, cells, thic, computed","<task:clean> <sos>
 Statistical parameters of higher lev el cells can easily b e computed from the parameters of the lo w er lev el cells
 The t yp e of distribution of a higher lev el cell can b e computed based on the ma jorit y of distribution t yp es of its corresp onding lo w er lev el cells in conjunction with a threshold ltering pro cess
 If the distributions of the lo w er lev el cells disagree with eac h other and fail the threshold test the distribution t yp e of the high lev el cell is set to none
 F or eac h cell in the curren t la y er w e compute the con dence in terv al ( or estimated range of probabilit y ) re ecting the cells relev ancy to the giv en query
 The rst la y er is one cell thic k while the second is p k p k cells thic k rounded up to the closest in teger
 A cell v alue in the cub e is considered an exception if it is signi can tly di eren t from the exp ected v alue based on a statistical mo del
 The exp ected v alue of a cell is considered to b e a function of all of the aggregated computed using the cell v alue
 The metho d uses visual cues suc h as bac kground color to re ect the degree of exception of eac h cell
 The measure v alue of a cell ma y re ect exceptions o ccurring at more detailed or lower levels of the cub e where these exceptions are not visible from the curren t lev el
 <eos>","Statistical parameters of higher-level cells can easily be computed from the parameters of the lower-level cells. The type of distribution of a higher-level cell can be computed based on the majority of distribution types of its corresponding lower-level cells, in conjunction with a threshold filtering process. If the distributions of the lower-level cells disagree with each other and fail the threshold test, the distribution type of the higher-level cell is set to none. For each cell in the current layer, we compute the confidence interval (or estimated range of probability) reflecting the cell's relevancy to the given query. The first layer is one cell thick, while the second is p k p k cells thick, rounded up to the closest integer. A cell value in the cube is considered an exception if it is significantly different from the expected value based on a statistical model. The expected value of a cell is considered to be a function of all of the aggregated computed using the cell value. The method uses visual cues, such as background color, to reflect the degree of exception of each cell. The measure value of a cell may reflect exceptions occurring at more detailed or lower levels of the cube, where these exceptions are not visible from the current level."
file1_topic_95,"othesis, distribution, test, alternativ, discordancy","<task:clean> <sos>
 The v alue of distribution ma y either b e assigned b y the user if the distribution t yp e is kno wn b eforehand or obtained b y h yp othesis tests suc h as the test
 How do es the disc or dancy testing work
 A statistical discordancy test examines t w o h yp otheses a working hyp othesis and an alternative hyp othesis
 A discordancy test v eri es whether an ob ject o is signi can tly large ( or small ) in relation to the distribution F
 Di eren t test statistics i ha v e b een prop osed for use as a discordancy test dep ending on the a v ailable kno wledge of the data
 Assuming that some statistic T has b een c hosen for discordancy testing and the v alue of the statistic for ob ject o is v then i i the distribution of T is constructed
 An alternativ e h yp othesis H i whic h states that o comes from another distribution mo del G is adopted
 i The alternativ e distribution is v ery imp ortan t in determining the p o w er of the test ie
 There are di eren t kinds of alternativ e distributions
 i Inheren t alternativ e distribu ti on In this case the w orking h yp othesis that all of the ob jects come from distribution F is rejected in fa v or of the alternativ e h yp othesis that all of the ob jects arise from another distribution G H o G w her e i n i F and G ma y b e di eren t distributions or di er only in parameters of the same distribution
 <eos>","The value of distribution may either be assigned by the user if the distribution type is known beforehand, or obtained by hypothesis tests such as the test. How does discordancy testing work? A statistical discordancy test examines two hypotheses: a working hypothesis and an alternative hypothesis. A discordancy test verifies whether an object `o` is significantly large (or small) in relation to the distribution `F`. Different test statistics have been proposed for use as a discordancy test depending on the available knowledge of the data. Assuming that some statistic `T` has been chosen for discordancy testing and the value of the statistic for object `o` is `v`, then the distribution of `T` is constructed. An alternative hypothesis `H` which states that `o` comes from another distribution model `G` is adopted. The alternative distribution is very important in determining the power of the test, i.e. There are different kinds of alternative distributions. Inherent alternative distribution: In this case, the working hypothesis that all of the objects come from distribution `F` is rejected in favor of the alternative hypothesis that all of the objects arise from another distribution `G`. `H` vs `G`, where `F` and `G` may be different distributions or differ only in parameters of the same distribution."
file1_topic_96,"cell, ount, layers, hies, coun","<task:clean> <sos>
 This la y er t ypically con tains a small n um b er of cells
 Its complexit y is O ( c n ) where c is a constan t dep ending on the n um b er of cells and k is the dimensionalit y
 Eac h cell has t w o layers surrounding it
 F or a giv en cell it accum ulates three coun ts the n um b er of ob jects in the cell in the cell and the rst la y er together and in the cell and b oth la y ers together
 Lets refer to these coun ts as c el l c ount c el l layer c ount and c el l layers c ount resp ectiv ely
 If the cell in v olv es dimensions for whic h concept hierarc hies ha v e b een de ned then the exp ected v alue of the cell also dep ends on its ancestors in the hierarc hies
 The mo del considers v ariations and patterns in the measure v alue across al l of the dimensions to whic h a cell b elongs
 <eos>","This layer typically contains a small number of cells. Its complexity is O(c n) where c is a constant depending on the number of cells and k is the dimensionality. Each cell has two layers surrounding it. For a given cell, it accumulates three counts: the number of objects in the cell; in the cell and the first layer together; and in the cell and both layers together. Let's refer to these counts as cell count, cell layer count, and cell layers count, respectively. If the cell involves dimensions for which concept hierarchies have been defined, then the expected value of the cell also depends on its ancestors in the hierarchies. The model considers variations and patterns in the measure value across all of the dimensions to which a cell belongs."
file1_topic_97,"relev, query, cells, retriev, fall","<task:clean> <sos>
 The irrelev an t cells are remo v ed from further consideration
 Pro cessing of the next lo w er lev el examines only the remaining relev an t cells
 A t this time if the query sp eci cation is met the regions of relev an t cells that satisfy the query are returned
 Otherwise the data that fall in to the relev an t cells are retriev ed and further pro cessed un til they meet the requiremen ts of the query
 Moreo v er STING do es not consider the spatial relationship b et w een the c hildren and their neigh b oring cells for construction of the paren t cell
 <eos>","The irrelevant cells are removed from further consideration. Processing of the next lower level examines only the remaining relevant cells. At this time, if the query specification is met, the regions of relevant cells that satisfy the query are returned. Otherwise, the data that fall into the relevant cells are retrieved and further processed until they meet the requirements of the query. Moreover, STING does not consider the spatial relationship between the children and their neighboring cells for construction of the parent cell."
file1_topic_98,"emphasizes, quadran, subband, erleft, errigh","<task:clean> <sos>
 A w a v elet transform is a signal pro cessing tec hnique that decomp oses a signal in to di eren t frequency sub bands
 The w a v elet mo del can b e applied to ndimensional signals b y applying a onedimensional w a v elet transform n times
 A t eac h lev el the four subbands in to whic h the original data are decomp osed are sho wn
 The subband sho wn at the upp erleft quadran t emphasizes the a v erage neigh b orho o d around eac h data p oin t
 The subband at the upp errigh t quadran t emphasizes the horizon tal edges of the data
 The subband at the lo w erleft quadran t emphasizes the v ertical edges while the subband at the lo w errigh t quadran t emphasizes the corners
 <eos>","A wavelet transform is a signal processing technique that decomposes a signal into different frequency subbands. The wavelet model can be applied to n-dimensional signals by applying a one-dimensional wavelet transform n times. At each level, the four subbands into which the original data are decomposed are shown. The subband shown at the upper-left quadrant emphasizes the average neighborhood around each data point. The subband at the upper-right quadrant emphasizes the horizontal edges of the data. The subband at the lower-left quadrant emphasizes the vertical edges, while the subband at the lower-right quadrant emphasizes the corners."
file1_topic_99,"class, alue, concept, probabilistic, mem","<task:clean> <sos>
 Probabilistic descriptions are t ypically used to represen t eac h deriv ed concept
 The probabilistic description includes the probabilit y of the concept and conditional probabilities of the form P ( A V ) where A V is an attribute jC i ij k i ij v alue pair and C is the concept class
 The larger this v alue is the few er the ob jects in jA k i ij con trasting classes that share this attributev alue pair and the more predictiv e the pair is of the class
 The larger this v alue is the greater the prop ortion jC i ij k of class mem b ers sharing the v alue and the more predictable the v alue is of class mem b ers Lets ha v e a lo ok at ho w COBWEB w orks
 <eos>","Probabilistic descriptions are typically used to represent each derived concept. The probabilistic description includes the probability of the concept and conditional probabilities of the form P(A, V), where (A, V) is an attribute-value pair and C is the concept class. The larger this value is, the fewer the objects in jA k i ij contrasting classes that share this attribute-value pair, and the more predictive the pair is of the class. The larger this value is, the greater the proportion jC i ij k of class members sharing the value, and the more predictable the value is of class members. Let's have a look at how COBWEB works."
file1_topic_100,"cobweb, incremen, host, tree, tal","<task:clean> <sos>
 COBWEB is a p opular and simple metho d of incremen tal conceptual clustering
 COBWEB creates a hierarc hical clustering in the form of a classi cation tree
 COBWEB uses a heuristic ev aluation measure called c ate gory utility to guide construction of the tree
 COBWEB incremen tally incorp orates ob jects in to a classi cation tree
 COBWEB descends the tree along an appropriate path up dating coun ts along the w a y in searc h of the b est host or no de at whic h to classify the ob ject
 COBWEB has t w o additional op erators whic h help mak e it less sensitiv e to input order
 F urthermore COBWEB considers splitting the c hildren of the b est host among the existing categories
 What ar e the limitations of COBWEB
 CLASSIT is an extension of COBWEB for incremen tal clustering of con tin uous ( or real v alued ) data
 Ho w ev er it su ers similar problems as COBWEB and th us is not suitable for clustering large database data
 <eos>","COBWEB is a popular and simple method of incremental conceptual clustering. COBWEB creates a hierarchical clustering in the form of a classification tree. COBWEB uses a heuristic evaluation measure called category utility to guide construction of the tree. COBWEB incrementally incorporates objects into a classification tree. COBWEB descends the tree along an appropriate path, updating counts along the way, in search of the best host or node at which to classify the object. COBWEB has two additional operators which help make it less sensitive to input order. Furthermore, COBWEB considers splitting the children of the best host among the existing categories. What are the limitations of COBWEB? CLASSIT is an extension of COBWEB for incremental clustering of continuous (or real-valued) data. However, it suffers similar problems as COBWEB and thus is not suitable for clustering large database data."
file1_topic_101,"unit, winning, indicated, connections, ond","<task:clean> <sos>
 The winning unit within a cluster b ecomes active ( indicated b y a lled circle ) while the others are inactive ( indicated b y empt y circles )
 The units within a cluster at a giv en la y er comp ete with one another to resp ond to the pattern that is output from the la y er b elo w Connections within la y ers are inhibitory so that only one unit in an y giv en cluster ma y b e activ e The winning unit adjusts the w eigh ts on its connections b et w een other units in the cluster so that it will resp ond ev en more strongly to future ob jects that are the same or similar to the curren t one
 The unit whose w eigh t v ector is closest to the curren t ob ject b ecomes the winning or activ e unit
 So as to mo v e ev en closer to the input ob ject the w eigh ts of the winning unit are adjusted as w ell as those of its nearest neigh b ors
 <eos>","The winning unit within a cluster becomes active (indicated by a filled circle) while the others are inactive (indicated by empty circles). The units within a cluster at a given layer compete with one another to respond to the pattern that is output from the layer below. Connections within layers are inhibitory so that only one unit in any given cluster may be active. The winning unit adjusts the weights on its connections with other units in the cluster so that it will respond even more strongly to future objects that are the same or similar to the current one. The unit whose weight vector is closest to the current object becomes the winning or active unit. So as to move even closer to the input object, the weights of the winning unit are adjusted as well as those of its nearest neighbors."
file1_topic_102,"compan, ees, deviate, executiv, ered","<task:clean> <sos>
 The salary of the c hief executiv e ocer of a compan y for instance could naturally stand out as an outlier among the salaries of the other emplo y ees in the rm
 In general users m ust c hec k that eac h outlier disco v ered b y these approac hes is indeed a real outlier
 Instead it iden ti es outliers b y examining the main c haracteristics of ob jects in a group
 Ob jects that deviate from this description are considered outliers
 <eos>","The salary of the chief executive officer of a company, for instance, could naturally stand out as an outlier among the salaries of the other employees in the firm. In general, users must check that each outlier discovered by these approaches is indeed a real outlier. Instead, it identifies outliers by examining the main characteristics of objects in a group. Objects that deviate from this description are considered outliers."
file1_topic_103,"mining, inconsisten, outlier, outliers, considerably","<task:clean> <sos>
 Man y data mining algorithms try to minim ize the in uence of outliers or eliminate them all together
 Th us outlier detection and analysis is an in teresting data mining task referred to as outlier mining
 Outlier mining can b e describ ed as follo ws Giv en a set of n data p oin ts or ob jects and k the exp ected n um b er of outliers nd the top k ob jects whic h are considerably dissimilar exceptional or inconsisten t with resp ect to the remaining data
 The outlier mining problem can b e view ed as t w o subproblems ( ) de ne what data can b e considered as inconsisten t in a giv en data set and ( ) nd an ecien t metho d to mine the outliers so de ned
 A ma jor dra wbac k is that most tests are for single attributes y et man y data mining problems require nding outliers in m ultidim ensional space
 <eos>","Many data mining algorithms try to minimize the influence of outliers or eliminate them altogether. Thus, outlier detection and analysis is an interesting data mining task referred to as outlier mining. Outlier mining can be described as follows: Given a set of n data points or objects and k, the expected number of outliers, find the top k objects which are considerably dissimilar, exceptional, or inconsistent with respect to the remaining data. The outlier mining problem can be viewed as two subproblems: (1) define what data can be considered as inconsistent in a given data set, and (2) find an efficient method to mine the outliers so defined. A major drawback is that most tests are for single attributes, yet many data mining problems require finding outliers in multidimensional space."
file1_topic_104,"dneigh, outlier, let, maxim, really","<task:clean> <sos>
 The result is v ery m uc h dep enden t on i whic h F mo del is c hosen since o ma y b e an outlier under one mo del and a p erfectly v alid v alue under another
 the probabilit y that the w orking h yp othesis is rejected when o is really an outlier
 Let M b e the maxim um n um b er of ob jects within the dneigh b orho o d of an outlier
 Therefore once M neigh b ors of ob ject o are found it is clear that o is not an outlier
 Let M b e the maxim um n um b er of outliers that can exist in the dneigh b orho o d of an outlier
 <eos>","The result is very much dependent on which F model is chosen, since o may be an outlier under one model and a perfectly valid value under another. The probability that the working hypothesis is rejected when o is really an outlier. Let M be the maximum number of objects within the d-neighborhood of an outlier. Therefore, once M neighbors of object o are found, it is clear that o is not an outlier. Let M be the maximum number of outliers that can exist in the d-neighborhood of an outlier."
file1_topic_105,"cell, considered, outliers, ount, second","<task:clean> <sos>
 An ob ject o in the curren t cell is considered an outlier only if c el l layer c ount is less than or equal to M
 If this condition do es not hold then all of the ob jects in the cell can b e remo v ed from further in v estigation as they can not b e outliers
 If c el l layers c ount is less than or equal to M then al l of the ob jects in the cell are considered outliers
 Otherwise if this n um b er is more than M then it is p ossible that some of the ob jects in the cell ma y b e outliers
 T o detect these outliers ob jectb yob ject pro cessing is used where for eac h ob ject o in the cell ob jects in the second la y er of o are examined
 F or ob jects in the cell only those ob jects ha ving less than M dneigh b ors in b oth their rst and second la y ers are considered to b e outliers
 <eos>","An object o in the current cell is considered an outlier only if cell layer count is less than or equal to M. If this condition does not hold, then all of the objects in the cell can be removed from further investigation as they cannot be outliers. If cell layers count is less than or equal to M, then all of the objects in the cell are considered outliers. Otherwise, if this number is more than M, then it is possible that some of the objects in the cell may be outliers. To detect these outliers, object-by-object processing is used, where for each object o in the cell, objects in the second layer of o are examined. For objects in the cell, only those objects having less than M d-neighbors in both their first and second layers are considered to be outliers."
file1_topic_106,"olap, cub, exceptions, sequen, erydriv","<task:clean> <sos>
 The rst sequen tially compares ob jects in a set while the second emplo ys an OLAP data cub e approac h Sequen tial exception tec hnique The sequen tial exception tec hnique sim ulates the w a y in whic h h umans can distinguish un usual ob jects from among a series of supp osedlylik e ob jects
 The general task of nding an exception set can b e NPhard ( ie in tractable )
 OLAP data cub e tec hnique An OLAP approac h to deviation detection uses data cub es to iden tify regions of anomalies in large m ultidim ensional data
 The approac h is a form of disc overydriven explor ation where precomputed measures indicating data exceptions are used to guide the user in data analysis at all lev els of aggregation
 The mo del considers exceptions hidden at all aggregated groupb ys of a data cub e Man ual detection of suc h exceptions is dicult since the searc h space is t ypically v ery large particularly when there are man y dimensions in v olving concept hierarc hies with sev eral lev els
 Sara w agi Agra w al and Megiddo in tro duced a disco v erydriv en metho d for iden tifying exceptions in large m ultidim ensional data using OLAP data cub es
 Disco v erydriv en exploration of OLAP data cub es
 <eos>","The first sequentially compares objects in a set, while the second employs an OLAP data cube approach. Sequential Exception Technique: This technique simulates the way in which humans can distinguish unusual objects from among a series of supposedly like objects.
 The general task of finding an exception set can be NP-hard (i.e., intractable).
 OLAP Data Cube Technique: An OLAP approach to deviation detection uses data cubes to identify regions of anomalies in large multidimensional data.
 This approach is a form of discovery-driven exploration, where precomputed measures indicating data exceptions are used to guide the user in data analysis at all levels of aggregation.
 The model considers exceptions hidden at all aggregated group-bys of a data cube; manual detection of such exceptions is difficult since the search space is typically very large, particularly when there are many dimensions involving concept hierarchies with several levels.
 Sarawagi, Agrawal, and Megiddo introduced a discovery-driven method for identifying exceptions in large multidimensional data using OLAP data cubes.
 Discovery-driven exploration of OLAP data cubes."
file1_topic_107,"sales, mon, decem, increase, item","<task:clean> <sos>
 F or example supp ose that y ou ha v e a data cub e for sales data and are viewing the sales summarized p er mon th
 With the help of the visual cues y ou notice an increase in sales in Decem b er in comparison to all other mon ths
 Ho w ev er b y drillingdo wn on the mon th of Decem b er to rev eal the sales p er item in that mon th y ou note that there is a similar increase in sales for other items during Decem b er
 Therefore an increase in total sales in Decem b er is not an exception if the item dimension is considered
 <eos>","For example, suppose you have a data cube for sales data and are viewing the sales summarized per month. With the help of the visual cues, you notice an increase in sales in December in comparison to all other months. However, by drilling down on the month of December to reveal the sales per item in that month, you note that there is a similar increase in sales for other items during December. Therefore, an increase in total sales in December is not an exception if the item dimension is considered."
file1_topic_108,"zhang, sheikholeslami, chatterjee, han, karypis","<task:clean> <sos>
 W a v eCluster dev elop ed b y Sheikholeslami Chatterjee and Zhang
 G Karypis EH Han and V Kumar
 R Ng and J Han
 G Sheikholeslami S Chatterjee and A Zhang
 T Zhang R Ramakrishnan and M Livn y
 <eos>","WaveCluster developed by Sheikholeslami Chatterjee and Zhang
 G Karypis EH Han and V Kumar
 R Ng and J Han
 G Sheikholeslami S Chatterjee and A Zhang
 T Zhang R Ramakrishnan and M Livny"
file2_topic_109,"classiï¬cation, taxonomy, creates, beings, buildings","<task:clean> <sos>
 Indeed human beings are skilled at dividing objects into groups ( clustering ) and assigning particular objects to these groups ( classiï¬cation )
 For example even relatively young children can quickly label the objects in a photograph as buildings vehicles people animals plants etc
 Biologists have spent many years creating a taxonomy ( hierarchical classiï¬cation ) of all living things kingdom phylum class order family genus and species
 Thus it is perhaps not surprising that much of the early work in cluster analysis sought to create a discipline of mathematical taxonomy that could automatically ï¬nd such classiï¬cation structures
 For instance clustering can be regarded as a form of classiï¬cation in that it creates a labeling of objects with class ( cluster ) labels
 For this reason cluster analysis is sometimes referred to as unsupervised classiï¬cation
 When the term classiï¬cation is used without any qualiï¬cation within data mining it typically refers to supervised classiï¬cation
 <eos>","Indeed, human beings are skilled at dividing objects into groups (clustering) and assigning particular objects to these groups (classification). For example, even relatively young children can quickly label the objects in a photograph as buildings, vehicles, people, animals, plants, etc. Biologists have spent many years creating a taxonomy (hierarchical classification) of all living things: kingdom, phylum, class, order, family, genus, and species. Thus, it is perhaps not surprising that much of the early work in cluster analysis sought to create a discipline of mathematical taxonomy that could automatically find such classification structures. For instance, clustering can be regarded as a form of classification in that it creates a labeling of objects with class (cluster) labels. For this reason, cluster analysis is sometimes referred to as unsupervised classification. When the term classification is used without any qualification within data mining, it typically refers to supervised classification."
file2_topic_110,"globular, large, good, oversample, partitioned","<task:clean> <sos>
 However instead of applying the algorithm to the entire data set it can be applied to a reduced data set consisting only of cluster prototypes
 We will later see an example in which this leads to a suboptimal clustering
 It can not handle nonglobular clusters or clusters of diï¬€erent sizes and densities although it can typically ï¬nd pure subclusters if a large enough number of clusters is speciï¬ed
 For instance Kmeans clusters might be evaluated in terms of the SSE but for densitybased clusters which need not be globular SSE would not work well at all
 This information often can be used to improve the quality of a clustering
 Consequently this is not a good measure for many density or contiguitybased clusters because they are not globular and may be closely intertwined with other clusters
 It may be necessary to oversample small clusters and undersample large ones to obtain an adequate representation of all clusters
 The purity and entropy of the other clusters is not as good but can typically be greatly improved if the data is partitioned into a larger number of clusters
 <eos>","However, instead of applying the algorithm to the entire data set, it can be applied to a reduced data set consisting only of cluster prototypes. We will later see an example in which this leads to a suboptimal clustering. It cannot handle non-globular clusters or clusters of different sizes and densities, although it can typically find pure subclusters if a large enough number of clusters is specified. For instance, K-means clusters might be evaluated in terms of the SSE, but for density-based clusters, which need not be globular, SSE would not work well at all. This information can often be used to improve the quality of a clustering. Consequently, this is not a good measure for many density- or contiguity-based clusters because they are not globular and may be closely intertwined with other clusters. It may be necessary to oversample small clusters and undersample large ones to obtain an adequate representation of all clusters. The purity and entropy of the other clusters are not as good, but can typically be greatly improved if the data is partitioned into a larger number of clusters."
file2_topic_111,"nearest, neighbor, neighbors, distance, finding","<task:clean> <sos>
 Eï¬ƒciently Finding Nearest Neighbors
 Finding nearest neighbors can require computing the pairwise distance between all points
 If objects are relatively close to the prototype of their cluster then we can use the prototypes to reduce the number of distance computations that are necessary to ï¬nd the nearest neighbors of an object
 Intuitively if two cluster prototypes are far apart then the objects in the corresponding clusters can not be nearest neighbors of each other
 Consequently to ï¬nd an objects nearest neighbors it is only necessary to compute the distance to objects in nearby clusters where the nearness of two clusters is measured by the distance between their prototypes
 The basic approach is to look at the behavior of the distance from a point to its kth nearest neighbor which we will call the kdist
 For both sets of points we ï¬nd the distance to the nearest neighbor in the original data set
 Let the ui be the nearest neighbor distances of the artiï¬cially generated points while the wi are the nearest neighbor distances of the sample of points from the original data set
 H p i wi p i ui p i wi ( ) If the randomly generated points and the sample of data points have roughly the same nearest neighbor distances then H will be near
 <eos>","Efficiently Finding Nearest Neighbors
 Finding nearest neighbors can require computing the pairwise distance between all points.
 If objects are relatively close to the prototype of their cluster, then we can use the prototypes to reduce the number of distance computations that are necessary to find the nearest neighbors of an object.
 Intuitively, if two cluster prototypes are far apart, then the objects in the corresponding clusters cannot be nearest neighbors of each other.
 Consequently, to find an object's nearest neighbors, it is only necessary to compute the distance to objects in nearby clusters, where the nearness of two clusters is measured by the distance between their prototypes.
 The basic approach is to look at the behavior of the distance from a point to its kth nearest neighbor, which we will call the kdist.
 For both sets of points, we find the distance to the nearest neighbor in the original data set.
 Let the ui be the nearest neighbor distances of the artificially generated points, while the wi are the nearest neighbor distances of the sample of points from the original data set.
 H p i wi p i ui p i wi ( ) If the randomly generated points and the sample of data points have roughly the same nearest neighbor distances, then H will be near."
file2_topic_112,"original, separation, calculus, equivalence, motivates","<task:clean> <sos>
 Whenever possible we discuss the strengths and weaknesses of diï¬€erent schemes
 In contrast classiï¬cation Overview ( a ) Original points
 ( a ) Original points
 This section which can be skipped without loss of continuity requires knowledge of calculus through partial derivatives
 ( b ) Separation
 It is this type of equivalence that motivates the deï¬nition of prototype separation in terms of both Equations and
 We consider two diï¬€erent kinds of approaches
 <eos>","Whenever possible, we discuss the strengths and weaknesses of different schemes. In contrast, Classification Overview: (a) Original points. (a) Original points. This section, which can be skipped without loss of continuity, requires knowledge of calculus through partial derivatives. (b) Separation. It is this type of equivalence that motivates the definition of prototype separation in terms of both Equations and. We consider two different kinds of approaches."
file2_topic_113,"regions, density, distinct, noise, entertaining","<task:clean> <sos>
 The shapes of the markers indicate cluster membership
 However the apparent division of each of the two larger clusters into three subclusters may simply be an artifact of the human visual system
 Clusters are regions of high density separated by regions of low density
 In contrast points from every dense region are likely to be included unless the sample size is very small
 The density of the clusters and noise regions is indicated by their darkness
 Four clusters embedded in noise
 While it is entertaining to ï¬nd patterns in clouds it is pointless and perhaps embarrassing to ï¬nd clusters in noise
 There is a distinct knee in the SSE and a distinct peak in the silhouette coeï¬ƒcient when the number of clusters is equal to
 <eos>","The shapes of the markers indicate cluster membership.
 However, the apparent division of each of the two larger clusters into three subclusters may simply be an artifact of the human visual system.
 Clusters are regions of high density separated by regions of low density.
 In contrast, points from every dense region are likely to be included unless the sample size is very small.
 The density of the clusters and noise regions is indicated by their darkness.
 Four clusters embedded in noise.
 While it is entertaining to find patterns in clouds, it is pointless and perhaps embarrassing to find clusters in noise.
 There is a distinct knee in the SSE and a distinct peak in the silhouette coefficient when the number of clusters is equal."
file2_topic_114,"adjacent, rectangular, circles, nonoptimal, triangular","<task:clean> <sos>
 ( b ) Two clusters
 ( c ) Four clusters
 ( d ) Six clusters
 A triangular area ( cluster ) is adjacent to a rectangular one and there are two intertwined circles ( clusters )
 ( b ) Suboptimal clustering
 Three optimal and nonoptimal clusters
 Add these two clusters to the list of clusters
 ( b ) Three Kmeans clusters
 ( b ) Two Kmeans clusters
 ( b ) Nested cluster diagram
 ( d ) Three clusters found by complete link
 <eos>","Two clusters, four clusters, and six clusters are identified. Suboptimal clustering is also noted, along with three optimal and nonoptimal clusters. Add these two clusters to the list of clusters. A triangular area (cluster) is adjacent to a rectangular one, and two intertwined circles (clusters) are present. Furthermore, three Kmeans clusters, two Kmeans clusters, and a nested cluster diagram are observed. Three clusters found by complete link have also been identified."
file2_topic_115,"different, illustrated, eï¬€ective, uniformly, distributed","<task:clean> <sos>
 Different ways of clustering the same set of points
 Different types of clusters as illustrated by sets of twodimensional points
 One eï¬€ective approach is to take a sample of points and cluster them using a hierarchical clustering technique
 Clustering of uniformly distributed points
 If we use Kmeans to group these points into three clusters then we should have no trouble ï¬nding these clusters since they are wellseparated
 <eos>","There are different ways to cluster the same set of points. Different types of clusters are illustrated by sets of two-dimensional points. One effective approach is to take a sample of points and cluster them using a hierarchical clustering technique. Clustering uniformly distributed points is a specific consideration. If we use K-means to group these points into three clusters, we should have no trouble finding these clusters since they are well-separated."
file2_topic_116,"division, segmentation, partitioning, bounds, color","<task:clean> <sos>
 Also while the terms segmentation and partitioning are sometimes used as synonyms for clustering these terms are frequently used for approaches outside the traditional bounds of cluster analysis
 For example the term partitioning is often used in connection with techniques that divide graphs into subgraphs and that are not strongly connected to clustering
 Segmentation often refers to the division of data into groups using simple techniques eg an image can be split into segments based only on pixel intensity and color or people can be divided into groups based on their income
 A partitional clustering is simply a division of the set of data objects into nonoverlapping subsets ( clusters ) such that each data object is in exactly one subset
 <eos>","While the terms segmentation and partitioning are sometimes used as synonyms for clustering, these terms are frequently used for approaches outside the traditional bounds of cluster analysis. For example, the term partitioning is often used for techniques that divide graphs into subgraphs and are not strongly connected to clustering. Segmentation often refers to the division of data into groups using simple techniques; e.g., an image can be split into segments based only on pixel intensity and color, or people can be divided into groups based on their income. A partitional clustering is simply a division of the set of data objects into non-overlapping subsets (clusters) such that each data object is in exactly one subset."
file2_topic_117,"fuzzy, belongs, object, membership, weight","<task:clean> <sos>
 In a fuzzy clustering every object belongs to every cluster with a membership weight that is between ( absolutely doesnt belong ) and ( absolutely belongs )
 In other words clusters are treated as fuzzy sets
 ( Mathematically a fuzzy set is one in which an object belongs to any set with a weight that is between and
 In fuzzy clustering we often impose the additional constraint that the sum of the weights for each object must equal )
 Because the membership weights or probabilities for any object sum to a fuzzy or probabilistic clustering does not address true multiclass situations such as the case of a student employee where an object belongs to multiple classes
 In practice a fuzzy or probabilistic clustering is often converted to an exclusive clustering by assigning each object to the cluster in which its membership weight or probability is highest
 <eos>","In a fuzzy clustering, every object belongs to every cluster with a membership weight that is between 0 (absolutely doesn't belong) and 1 (absolutely belongs). In other words, clusters are treated as fuzzy sets. Mathematically, a fuzzy set is one in which an object belongs to any set with a weight that is between 0 and 1. In fuzzy clustering, we often impose the additional constraint that the sum of the weights for each object must equal 1. Because the membership weights or probabilities for any object sum to 1, a fuzzy or probabilistic clustering does not address true multiclass situations, such as the case of a student employee, where an object belongs to multiple classes. In practice, a fuzzy or probabilistic clustering is often converted to an exclusive clustering by assigning each object to the cluster in which its membership weight or probability is highest."
file2_topic_118,"labels, external, classiï¬cation, model, externally","<task:clean> <sos>
 Similarly probabilistic clustering techniques compute the probability with which each Overview point belongs to each cluster and these probabilities must also sum to
 Cluster Evaluation In supervised classiï¬cation the evaluation of the resulting classiï¬cation model is an integral part of the process of developing a classiï¬cation model and there are wellaccepted evaluation measures and procedures eg accuracy and crossvalidation respectively
 Evaluating how well the results of a cluster analysis ï¬t the data without reference to external information
 Comparing the results of a cluster analysis to externally known results such as externally provided class labels
 Comparing two sets of clusters to determine which is better
 Measures the goodness of a clustering structure without respect to external information
 Measures the extent to which the clustering structure discovered by a clustering algorithm matches some external structure
 We then consider supervised approaches to cluster validity such as entropy purity and the Jaccard measure
 An overall measure of the goodness of a clustering can be obtained by computing the average silhouette coeï¬ƒcient of all points
 Supervised Measures of Cluster Validity When we have external information about data it is typically in the form of externally derived class labels for the data objects
 In such cases the usual procedure is to measure the degree of correspondence between the cluster labels and the class labels
 Cluster Evaluation Classiï¬cationOriented Measures of Cluster Validity There are a number of measuresentropy purity precision recall and the Fmeasurethat are commonly used to evaluate the performance of a classiï¬cation model
 In the case of classiï¬cation we measure the degree to which predicted class labels correspond to actual class labels but for the measures just mentioned nothing fundamental is changed by using cluster labels instead of predicted class labels
 <eos>","<sos>
 Similarly, probabilistic clustering techniques compute the probability with which each Overview point belongs to each cluster, and these probabilities must also sum to.
 
 Cluster Evaluation: In supervised classification, the evaluation of the resulting classification model is an integral part of the process of developing a classification model, and there are well-accepted evaluation measures and procedures, e.g., accuracy and cross-validation, respectively.
 
 Evaluating how well the results of a cluster analysis fit the data without reference to external information.
 
 Comparing the results of a cluster analysis to externally known results, such as externally provided class labels.
 
 Comparing two sets of clusters to determine which is better.
 
 Measures the goodness of a clustering structure without respect to external information.
 
 Measures the extent to which the clustering structure discovered by a clustering algorithm matches some external structure.
 
 We then consider supervised approaches to cluster validity, such as entropy, purity, and the Jaccard measure.
 
 An overall measure of the goodness of a clustering can be obtained by computing the average silhouette coefficient of all points.
 
 Supervised Measures of Cluster Validity: When we have external information about data, it is typically in the form of externally derived class labels for the data objects.
 
 In such cases, the usual procedure is to measure the degree of correspondence between the cluster labels and the class labels.
 
 Cluster Evaluation: Classification-Oriented Measures of Cluster Validity: There are a number of measuresâ€”entropy, purity, precision, recall, and the F-measureâ€”that are commonly used to evaluate the performance of a classification model.
 
 In the case of classification, we measure the degree to which predicted class labels correspond to actual class labels, but for the measures just mentioned, nothing fundamental is changed by using cluster labels instead of predicted class labels.
 <eos>"
file2_topic_119,"globular, object, prototypebased, tend, prototype","<task:clean> <sos>
 WellSeparated A cluster is a set of objects in which each object is closer ( or more similar ) to every other object in the cluster than to any object not in the cluster
 Wellseparated clusters do not need to be globular but can have any shape
 PrototypeBased A cluster is a set of objects in which each object is closer ( more similar ) to the prototype that deï¬nes the cluster than to the prototype of any other cluster
 For many types of data the prototype can be regarded as the most central point and in such instances we commonly refer to prototypebased clusters as centerbased clusters
 Not surprisingly such clusters tend to be globular
 Like prototypebased clusters such clusters tend to be globular
 This deï¬nition encompasses all the previous deï¬nitions of a cluster eg objects in a centerbased cluster share the property that they are all closest to the same centroid or medoid
 <eos>","Well-Separated: A cluster is a set of objects in which each object is closer (or more similar) to every other object in the cluster than to any object not in the cluster. Well-separated clusters do not need to be globular but can have any shape. Prototype-Based: A cluster is a set of objects in which each object is closer (more similar) to the prototype that defines the cluster than to the prototype of any other cluster. For many types of data, the prototype can be regarded as the most central point, and in such instances, we commonly refer to prototype-based clusters as center-based clusters. Not surprisingly, such clusters tend to be globular. Like prototype-based clusters, such clusters tend to be globular. This definition encompasses all the previous definitions of a cluster, e.g., objects in a center-based cluster share the property that they are all closest to the same centroid or medoid."
file2_topic_120,"deï¬nitions, mindsee, specify, suï¬ƒciently, proximity","<task:clean> <sos>
 Sometimes a threshold is used to specify that all the objects in a cluster must be suï¬ƒciently close ( or similar ) to one another
 This requires deï¬ning a notion of cluster proximity
 Cluster proximity is typically deï¬ned with a particular type of cluster in mindsee Section
 Graphbased deï¬nitions of cluster proximity If instead we take a prototypebased view in which each cluster is represented by a centroid diï¬€erent deï¬nitions of cluster proximity are more natural
 <eos>","Sometimes, a threshold is used to specify that all the objects in a cluster must be sufficiently close or similar to one another. This requires defining a notion of cluster proximity. Cluster proximity is typically defined with a particular type of cluster in mind (see Section). Graph-based definitions of cluster proximity. If instead, we take a prototype-based view in which each cluster is represented by a centroid, different definitions of cluster proximity are more natural."
file2_topic_121,"medoid, prototype, continuous, attributes, representative","<task:clean> <sos>
 For data with continuous attributes the prototype of a cluster is often a centroid ie the average ( mean ) of all the points in the cluster
 When a centroid is not meaningful such as when the data has categorical attributes the prototype is often a medoid ie the most representative point of a cluster
 Kmeans deï¬nes a prototype in terms of a centroid which is usually the mean of a group of points and is typically K means applied to objects in a continuous ndimensional space
 Kmedoid deï¬nes a prototype in terms of a medoid which is the most representative point for a group of points and can be applied to a wide range of data since it requires only a proximity measure for a pair of objects
 While a centroid almost never corresponds to an actual data point a medoid by its deï¬nition must be an actual data point
 For some combinations of proximity functions and types of centroids Kmeans always converges to a solution ie Kmeans reaches a state in which no points are shifting from one cluster to another and hence the centroids dont change
 Time and Space Complexity The space requirements for Kmeans are modest because only the data points and centroids are stored
 Finally Kmeans is restricted to data for which there is a notion of a center ( centroid )
 <eos>","<task:clean> <sos>
 For data with continuous attributes, the prototype of a cluster is often a centroid, i.e., the average (mean) of all points in the cluster. When a centroid is not meaningful, such as when the data has categorical attributes, the prototype is often a medoid, i.e., the most representative point of a cluster. K-means defines a prototype in terms of a centroid, which is usually the mean of a group of points and is typically K-means applied to objects in a continuous n-dimensional space. K-medoid defines a prototype in terms of a medoid, which is the most representative point for a group of points and can be applied to a wide range of data, since it requires only a proximity measure for a pair of objects. While a centroid almost never corresponds to an actual data point, a medoid by its definition must be an actual data point. For some combinations of proximity functions and types of centroids, K-means always converges to a solution, i.e., K-means reaches a state in which no points are shifting from one cluster to another, and hence the centroids don't change. Time and Space Complexity: The space requirements for K-means are modest because only the data points and centroids are stored. Finally, K-means is restricted to data for which there is a notion of a center (centroid).
 <eos>"
file2_topic_122,"links, graphbased, connected, graph, clique","<task:clean> <sos>
 GraphBased If the data is represented as a graph where the nodes are objects and the links represent connections among objects ( see Section ) then a cluster can be deï¬ned as a connected component ie a group of objects that are connected to one another but that have no connection to objects outside the group
 An important example of graphbased clusters are contiguitybased clusters where two objects are connected only if they are within a speciï¬ed distance of each other
 Other types of graphbased clusters are also possible
 One such approach ( Section ) deï¬nes a cluster as a clique ie a set of nodes in a graph that are completely connected to each other
 Speciï¬cally if we add connections between objects in the order of their distance from one another a cluster is formed when a set of objects forms a clique
 Some of these techniques have a natural interpretation in terms of graphbased clustering while others have an interpretation in terms of a prototypebased approach
 For example many agglomerative hierarchical clustering techniques such as MIN MAX and Group Average come from a graphbased view of clusters
 Using graph terminology if you start with all points as singleton clusters and add links between points one at a time shortest links ï¬rst then these single links combine the points into clusters
 Using graph terminology if you start with all points as singleton clusters and add links between points one at a time shortest links ï¬rst then a group of points is not a cluster until all the points in it are completely linked ie form a clique
 In the process we will also see some interesting relationships between prototype and graphbased clustering
 <eos>","Graph-based: If the data is represented as a graph where the nodes are objects and the links represent connections among objects (see Section), then a cluster can be defined as a connected componentâ€”i.e., a group of objects that are connected to one another but have no connection to objects outside the group. An important example of graph-based clusters are contiguity-based clusters, where two objects are connected only if they are within a specified distance of each other. Other types of graph-based clusters are also possible. One such approach (Section) defines a cluster as a cliqueâ€”i.e., a set of nodes in a graph that are completely connected to each other. Specifically, if we add connections between objects in the order of their distance from one another, a cluster is formed when a set of objects forms a clique. Some of these techniques have a natural interpretation in terms of graph-based clustering, while others have an interpretation in terms of a prototype-based approach. For example, many agglomerative hierarchical clustering techniques, such as MIN, MAX, and Group Average, come from a graph-based view of clusters. Using graph terminology, if you start with all points as singleton clusters and add links between points one at a time, shortest links first, then these single links combine the points into clusters. Using graph terminology, if you start with all points as singleton clusters and add links between points one at a time, shortest links first, then a group of points is not a cluster until all the points in it are completely linked, i.e., form a clique. In the process, we will also see some interesting relationships between prototype and graph-based clustering."
file2_topic_123,"region, densitybased, surrounded, contiguitybased, dense","<task:clean> <sos>
 DensityBased A cluster is a dense region of objects that is surrounded by a region of low density
 ( b ) Centerbased clusters
 ( c ) Contiguitybased clusters
 ( d ) Densitybased clusters
 <eos>","A density-based cluster is a dense region of objects that is surrounded by a region of low density.
 (b) Center-based clusters
 (c) Contiguity-based clusters
 (d) Density-based clusters"
file2_topic_124,"closer, center, point, derives, pure","<task:clean> <sos>
 Each point is closer to all of the points in its cluster than to any point in another cluster
 Each point is closer to the center of its cluster than to the center of any other cluster
 Each point is closer to at least one point in its cluster than to any point in another cluster
 Points in a cluster share some general property that derives from the entire set of points
 Each smaller cluster is pure in the sense that it contains only points from one of the natural clusters
 <eos>",Each point is closer to all of the points in its cluster than to any point in another cluster. Each point is closer to the center of its cluster than to the center of any other cluster. Each point is closer to at least one point in its cluster than to any point in another cluster. Points in a cluster share some general property that derives from the entire set of points. Each smaller cluster is pure in the sense that it contains only points from one of the natural clusters.
file2_topic_125_0,"initial, centroids, randomly, poor, selected","<task:clean> <sos>
 We ï¬rst choose K initial centroids where K is a userspeciï¬ed parameter namely the number of clusters desired
 Select K points as initial centroids
 Assigning Points to the Closest Centroid To assign a point to the closest centroid we need a proximity measure that quantiï¬es the notion of closest for the speciï¬c data under consideration
 However the key point is this once we have speciï¬ed a proximity measure and an objective function the centroid that we should choose can often be determined mathematically
 Notice that for Manhattan ( L ) distance and the objective of minimizing the sum of the distances the appropriate centroid is the median of the points in a cluster
 Choosing Initial Centroids When random initialization of centroids is used diï¬€erent runs of Kmeans typically produce diï¬€erent total SSEs
 Choosing the proper initial centroids is the key step of the basic Kmeans procedure
 A common approach is to choose the initial centroids randomly but the resulting clusters are often poor
 Example ( Poor Initial Centroids )
 Randomly selected initial centroids may be poor
 Example ( Limits of Random Initialization )
 One technique that is commonly used to address the problem of choosing initial centroids is to perform multiple runs each with a diï¬€erent set of randomly chosen initial centroids and then select the set of clusters with the minimum SSE
 Poor starting centroids for Kmeans
 Note that an optimal clustering will be obtained as long as two initial centroids fall anywhere in a pair of clusters since the centroids will redistribute themselves one to each cluster
 Because of the problems with using randomly selected initial centroids which even repeated runs may not overcome other techniques are often employed for initialization
 The following procedure is another approach to selecting initial centroids
 Select the ï¬rst point at random or take the centroid of all points
 Then for each successive initial centroid select the point that is farthest from any of the initial centroids already selected
 centroids that is guaranteed to be not only randomly selected but also well separated
 <eos>","We first choose K initial centroids, where K is a user-specified parameter, namely the desired number of clusters.
 Select K points as initial centroids.
 Assigning Points to the Closest Centroid: To assign a point to the closest centroid, we need a proximity measure that quantifies the notion of ""closest"" for the specific data under consideration.
 However, the key point is this: once we have specified a proximity measure and an objective function, the centroid that we should choose can often be determined mathematically.
 Notice that for Manhattan (L) distance and the objective of minimizing the sum of the distances, the appropriate centroid is the median of the points in a cluster.
 Choosing Initial Centroids: When random initialization of centroids is used, different runs of K-means typically produce different total SSEs.
 Choosing the proper initial centroids is the key step of the basic K-means procedure.
 A common approach is to choose the initial centroids randomly, but the resulting clusters are often poor.
 Example (Poor Initial Centroids):
 Randomly selected initial centroids may be poor.
 Example (Limits of Random Initialization):
 One technique commonly used to address the problem of choosing initial centroids is to perform multiple runs, each with a different set of randomly chosen initial centroids, and then select the set of clusters with the minimum SSE.
 Poor Starting Centroids for K-means:
 Note that an optimal clustering will be obtained as long as two initial centroids fall anywhere in a pair of clusters, since the centroids will redistribute themselves one to each cluster.
 Because of the problems with using randomly selected initial centroids, which even repeated runs may not overcome, other techniques are often employed for initialization.
 The following procedure is another approach to selecting initial centroids:
 Select the first point at random or take the centroid of all points.
 Then, for each successive initial centroid, select the point that is farthest from any of the initial centroids already selected.
 These centroids are guaranteed to be not only randomly selected but also well separated."
file2_topic_125_1,"initial, centroids, randomly, poor, selected","<task:clean> <sos>
 Also it is expensive to compute the farthest point from the current set of initial centroids
 One approach is to choose the point that is farthest away from any current centroid
 <eos>",It is also expensive to compute the farthest point from the current set of initial centroids. One approach is to choose the point that is farthest away from any current centroid.
file2_topic_126,"centroids, updating, incrementally, assigned, updated","<task:clean> <sos>
 The centroid of each cluster is then updated based on the points assigned to the cluster
 We repeat the assignment and update steps until no point changes clusters or equivalently until the centroids remain the same
 repeat Form K clusters by assigning each point to its closest centroid
 Recompute the centroid of each cluster
 until Centroids do not change
 After points are assigned to a centroid the centroid is then updated
 cluster the centroids will redistribute themselves so that the true clusters are found
 Unfortunately as the number of clusters becomes larger it is increasingly likely that at least one pair of clusters will have only one initial centroid
 Two pairs of clusters with a pair of initial centroids within each pair of clusters
 Two pairs of clusters with more or fewer than two initial centroids within a pair of clusters
 Introduce a new cluster centroid Often the point that is farthest from any cluster center is chosen
 Updating Centroids Incrementally Instead of updating cluster centroids after all points have been assigned to a cluster the centroids can be updated incrementally after each assignment of a point to a cluster
 Notice that this requires either zero or two updates to cluster centroids at each step since a point either moves to a new cluster ( two updates ) or stays in its current cluster ( zero updates )
 On the negative side updating centroids incrementally introduces an order dependency
 Although this can be addressed by randomizing the order in which the points are processed the basic Kmeans approach of updating the centroids after all points have been assigned to clusters has no order dependency
 <eos>","The centroid of each cluster is then updated based on the points assigned to the cluster. We repeat the assignment and update steps until no point changes clusters, or equivalently, until the centroids remain the same. Repeat: Form K clusters by assigning each point to its closest centroid. Recompute the centroid of each cluster. Until: Centroids do not change. After points are assigned to a centroid, the centroid is then updated. During clustering, the centroids will redistribute themselves so that the true clusters are found. Unfortunately, as the number of clusters becomes larger, it is increasingly likely that at least one pair of clusters will have only one initial centroid. There are two pairs of clusters, with a pair of initial centroids within each pair of clusters. There are two pairs of clusters, with more or fewer than two initial centroids within a pair of clusters. Introduce a new cluster centroid. Often, the point that is farthest from any cluster center is chosen. Updating Centroids Incrementally: Instead of updating cluster centroids after all points have been assigned to a cluster, the centroids can be updated incrementally after each assignment of a point to a cluster. Notice that this requires either zero or two updates to cluster centroids at each step, since a point either moves to a new cluster (two updates) or stays in its current cluster (zero updates). On the negative side, updating centroids incrementally introduces an order dependency. Although this can be addressed by randomizing the order in which the points are processed, the basic Kmeans approach of updating the centroids after all points have been assigned to clusters has no order dependency."
file2_topic_127,"centroids, mean, displaying, marker, subï¬gure","<task:clean> <sos>
 In these and other ï¬gures displaying Kmeans clustering each subï¬gure shows ( ) the centroids at the start of the iteration and ( ) the assignment of the points to those centroids
 The centroids are indicated by the symbol all points belonging to the same cluster have the same marker shape
 For this example we use the mean as the centroid
 Using the notation in Table the centroid ( mean ) of the ith cluster is deï¬ned by Equation
 ci xCi x ( ) mi To illustrate the centroid of a cluster containing the three twodimensional points ( ) ( ) and ( ) is ( ( ) ( ( ) ) ( )
 K clusters are extracted from the hierarchical clustering and the centroids of those clusters are used as the initial centroids
 When using centroids the cluster proximity is commonly deï¬ned as the proximity between cluster centroids
 <eos>","In these and other figures displaying K-means clustering, each subfigure shows: 1) the centroids at the start of the iteration, and 2) the assignment of the points to those centroids. The centroids are indicated by the symbol. All points belonging to the same cluster have the same marker shape. For this example, we use the mean as the centroid. Using the notation in Table, the centroid (mean) of the ith cluster is defined by Equation: ci xCi x ( ) mi. To illustrate, the centroid of a cluster containing the three two-dimensional points ( ), ( ), and ( ) is ( ( ) ( ( ) ) ( ). K clusters are extracted from the hierarchical clustering, and the centroids of those clusters are used as the initial centroids. When using centroids, the cluster proximity is commonly defined as the proximity between cluster centroids."
file2_topic_128,"minimizes, xck, centroid, sse, step","<task:clean> <sos>
 Again the ï¬gure for each step shows the centroid at the beginning of the step and the assignment of points to those centroids
 Given these assumptions it can be shown ( see Section ) that the centroid that minimizes the SSE of the cluster is the mean
 Step forms clusters by assigning points to their nearest centroid which minimizes the SSE for the given set of centroids
 Step recomputes the centroids so as to further minimize the SSE
 If this happens then a strategy is needed to choose a replacement centroid since otherwise the squared error will be larger than necessary
 Another approach is to choose the replacement centroid from the cluster that has the highest SSE
 Speciï¬cally we investigate how we can best update a cluster centroid so that the cluster SSE is minimized
 We can solve for the kth centroid ck which minimizes Equation by diï¬€erentiating the SSE setting it equal to and solving as indicated below
 K ck SSE ck xCi ( ci x ) i K ck ( ci x ) i xCi xCk ( ck xk ) xCk ( ck xk ) mkck xCk xk ck mk xCk xk Thus as previously indicated the best centroid for minimizing the SSE of a cluster is the mean of the points in the cluster
 K xCi distL ( ci x ) ( ) SAE i We can solve for the kth centroid ck which minimizes Equation by diï¬€erentiating the SAE setting it equal to and solving
 <eos>","Again, the ï¬gure for each step shows the centroid at the beginning of the step and the assignment of points to those centroids. Given these assumptions, it can be shown ( see Section ) that the centroid that minimizes the SSE of the cluster is the mean. Step forms clusters by assigning points to their nearest centroid, which minimizes the SSE for the given set of centroids. Step recomputes the centroids so as to further minimize the SSE. If this happens, then a strategy is needed to choose a replacement centroid, since otherwise the squared error will be larger than necessary. Another approach is to choose the replacement centroid from the cluster that has the highest SSE. Speciï¬cally, we investigate how we can best update a cluster centroid so that the cluster SSE is minimized. We can solve for the kth centroid, ck, which minimizes Equation by diï¬€erentiating the SSE, setting it equal to zero, and solving as indicated below.
 K ck SSE ck xCi ( ci x ) i
 K ck ( ci x ) i
 xCi xCk ( ck xk )
 xCk ( ck xk ) mkck xCk xk
 ck mk xCk xk Thus, as previously indicated, the best centroid for minimizing the SSE of a cluster is the mean of the points in the cluster.
 K xCi distL ( ci x ) ( ) SAE i We can solve for the kth centroid, ck, which minimizes Equation by diï¬€erentiating the SAE, setting it equal to zero, and solving."
file2_topic_129,iteration,"<task:clean> <sos>
 ( c ) Iteration
 ( d ) Iteration
 ( b ) Iteration
 <eos>","(c) Iteration
 (d) Iteration
 (b) Iteration"
file2_topic_135,"method, wards, squared, error, objective","<task:clean> <sos>
 In other words we calculate the error of each data point ie its Euclidean distance to the closest centroid and then compute the total sum of the squared errors
 For this objective it can be shown that the cluster centroid is as for Euclidean data the mean
 Like Kmeans Wards method attempts to minimize the sum of the squared distances of points from their cluster centroids
 Wards Method and Centroid Methods For Wards method the proximity between two clusters is deï¬ned as the increase in the squared error that results when two clusters are merged
 Thus this method uses the same objective function as Kmeans clustering
 While it may seem that this feature makes Wards method somewhat distinct from other hierarchical techniques it can be shown mathematically that Wards method is very similar to the group average method when the proximity between two points is taken to be the square of the distance between them
 Example ( Wards Method )
 Nonetheless Wards method is often used as a robust method of initializing a Kmeans clustering indicating that a local minimize squared error objective function does have a connection to a global minimize squared error objective function
 <eos>","In other words, we calculate the error of each data point (i.e., its Euclidean distance to the closest centroid) and then compute the total sum of the squared errors. For this objective, it can be shown that the cluster centroid is, as for Euclidean data, the mean. Like K-means, Ward's method attempts to minimize the sum of the squared distances of points from their cluster centroids. Ward's Method and Centroid Methods: For Ward's method, the proximity between two clusters is defined as the increase in the squared error that results when two clusters are merged. Thus, this method uses the same objective function as K-means clustering. While it may seem that this feature makes Ward's method somewhat distinct from other hierarchical techniques, it can be shown mathematically that Ward's method is very similar to the group average method when the proximity between two points is taken to be the square of the distance between them. Example (Ward's Method). Nonetheless, Ward's method is often used as a robust method of initializing a K-means clustering, indicating that a local 'minimize squared error' objective function does have a connection to a global 'minimize squared error' objective function."
file2_topic_136,"diï¬ƒculty, means, kmeans, expected, correlations","<task:clean> <sos>
 Given two diï¬€erent sets of clusters that are produced by two diï¬€erent runs of Kmeans we prefer the one with the smallest squared error since this means that the prototypes ( centroids ) of this clustering are a better representation of the points in their cluster
 In particular Kmeans has diï¬ƒculty detecting the natural clusters when clusters have nonspherical shapes or widely diï¬€erent sizes or densities
 The diï¬ƒculty in these three situations is that the Kmeans objective function is a mismatch for the kinds of clusters we are trying to ï¬nd since it is minimized by globular clusters of equal size and density or by clusters that are well separated
 Kmeans is not suitable for all types of data K means ( a ) Original points
 The correlations were and respectively which reï¬‚ects the expected result that the clusters found by Kmeans in the random data are worse than the clusters found by Kmeans in data with wellseparated clusters
 <eos>","<sos>
 Given two different sets of clusters produced by two different runs of Kmeans, we prefer the one with the smallest squared error, as this indicates that the prototypes (centroids) of this clustering are a better representation of the points in their cluster. In particular, Kmeans has difficulty detecting natural clusters when clusters have non-spherical shapes, widely different sizes, or widely different densities. The difficulty in these three situations is that the Kmeans objective function is a mismatch for the kinds of clusters we are trying to find, since it is minimized by globular clusters of equal size and density, or by clusters that are well-separated. Kmeans is not suitable for all types of data. The correlations were and, respectively, which reflects the expected result that the clusters found by Kmeans in the random data are worse than the clusters found by Kmeans in data with well-separated clusters.
 <eos>"
file2_topic_137,"minimize, objective, sse, function, optimization","<task:clean> <sos>
 Steps and of the Kmeans algorithm directly attempt to minimize the SSE ( or more generally the objective function )
 In this way it is often possible to escape local SSE minima and still produce a clustering solution with the desired number of clusters
 Yet another beneï¬t of incremental updates has to do with using objectives other than minimize SSE Suppose that we are given an arbitrary objective function to measure the goodness of a set of clusters
 Speciï¬c examples of alternative objective functions are given in Section
 Therefore the ï¬nal set of clusters does not represent a clustering that is a local minimum with respect to the total SSE
 As mentioned earlier given an objective function such as minimize SSE clustering can be treated as an optimization problem
 One way to solve this problemto ï¬nd a global optimumis to enumerate all possible ways of dividing the points into clusters and then choose the set of clusters that best satisï¬es the objective function eg that minimizes the total SSE
 Derivation of Kmeans as an Algorithm to Minimize the SSE In this section we show how the centroid for the Kmeans algorithm can be mathematically derived when the proximity function is Euclidean distance and the objective is to minimize the SSE
 In mathematical terms we seek to minimize Equation which we repeat here specialized for onedimensional data
 Derivation of Kmeans for SAE To demonstrate that the Kmeans algorithm can be applied to a variety of diï¬€erent objective functions we consider how to partition the data into K clusters such that the sum of the Manhattan ( L ) distances of points from the center of their clusters is minimized
 We are seeking to minimize the sum of the L absolute errors ( SAE ) as given by the following equation where distL is the L distance
 ( It can be shown that the general clustering problem for an objective function such as minimize SSE is computationally infeasible )
 This approach prevents a local optimization criterion from becoming a global optimization criterion
 <eos>","The steps of the K-means algorithm directly attempt to minimize the SSE (or more generally, the objective function). In this way, it is often possible to escape local SSE minima and still produce a clustering solution with the desired number of clusters. Yet another benefit of incremental updates relates to using objectives other than minimizing SSE. Suppose we are given an arbitrary objective function to measure the goodness of a set of clusters. Specific examples of alternative objective functions are given in the Section. Therefore, the final set of clusters does not represent a clustering that is a local minimum with respect to the total SSE. As mentioned earlier, given an objective function such as minimizing SSE, clustering can be treated as an optimization problem. One way to solve this problemâ€”to find a global optimumâ€”is to enumerate all possible ways of dividing the points into clusters and then choose the set of clusters that best satisfies the objective function (e.g., that minimizes the total SSE). Derivation of K-means as an Algorithm to Minimize the SSE. In this section, we show how the centroid for the K-means algorithm can be mathematically derived when the proximity function is Euclidean distance and the objective is to minimize the SSE. In mathematical terms, we seek to minimize the Equation, which we repeat here, specialized for one-dimensional data. Derivation of K-means for SAE. To demonstrate that the K-means algorithm can be applied to a variety of different objective functions, we consider how to partition the data into K clusters such that the sum of the Manhattan (L) distances of points from the center of their clusters is minimized. We are seeking to minimize the sum of the L absolute errors (SAE), as given by the following equation, where distL is the L distance. (It can be shown that the general clustering problem for an objective function, such as minimizing SSE, is computationally infeasible.) This approach prevents a local optimization criterion from becoming a global optimization criterion."
file1_topic_4,"new, stack, inserted, data, items","<task:clean> <sos>
 PROFESSOR IoE PULCHOWK CAMPUS Stack Introduction A stack is an ordered collection of items into which new items may be inserted and from which items may be deleted at one end called the top of the stack
 Stacks are linear data structures and hold objects usually all of the same type
 items items items items A Top B Top A Push Operation A new item ( C ) is inserted A new item ( D ) is inserted at the Top of the stack at the Top of the stack itemsMAX
 ( b ) Add to STACK
 More versatile data structure than stack or queue
 <eos>","PROFESSOR IoE PULCHOWK CAMPUS: Stack Introduction. A stack is an ordered collection of items into which new items may be inserted and from which items may be deleted at one end, called the top of the stack. Stacks are linear data structures and hold objects, usually all of the same type. Items, items, items, items, A Top, B Top, A Push Operation. A new item (C) is inserted at the Top of the stack. A new item (D) is inserted at the Top of the stack. itemsMAX. (b) Add to STACK. More versatile data structure than a stack or queue."
file1_topic_5,"return, write, underflow, overflow, print","<task:clean> <sos>
 If TOPN write OVERFLOW and Return
 If TOP then write UNDERFLOW and Return
 If REAR N then write OVERFLOW and Return
 If FRONT NULL OR FRONT REAR then write UNDERFLOW and Return
 If ( Front and Rear N ) or Front Rear then Print Circular Queue Overflow and Return
 If Front then Print Circular Queue Underflow and Return
 <eos>","<sos>
 If TOP is N, then print ""OVERFLOW"" and return.
 If TOP, then print ""UNDERFLOW"" and return.
 If REAR is N, then print ""OVERFLOW"" and return.
 If FRONT is NULL or FRONT is REAR, then print ""UNDERFLOW"" and return.
 If (FRONT and REAR is N) or (FRONT is REAR), then print ""Circular Queue Overflow"" and return.
 If FRONT, then print ""Circular Queue Underflow"" and return.
 <eos>"
file1_topic_6,"end, structure, loop, step, dont","<task:clean> <sos>
 End of If structure
 Dont add the left parenthesis to P End of If Structure
 End of step Loop
 Repeat until the end of the expression is reached
 End of if structure
 <eos>","End of If structure
 Don't add the left parenthesis to P. End of If Structure
 End of Step Loop
 Repeat until the end of the expression is reached.
 End of If structure"
file1_topic_7,"queue, elements, circular, overflow, consider","<task:clean> <sos>
 Circular Queue Drawback of linear queue Once the queue is full even though few elements from the front are deleted and some occupied space is relieved it is not possible to add anymore new elements as the rear has already reached the Queues rear most position
 Otherwise it will again be a Queue overflow state
 Example Consider the following circular queue with N
 As Front Rear so Queue overflow
 <eos>","The drawback of a linear queue, in contrast to a circular queue, is that once the queue is full, even though a few elements from the front are deleted and some occupied space is relieved, it is not possible to add any more new elements. This is because the rear has already reached the queue's rearmost position; otherwise, attempting to add elements would result in a queue overflow state. For example, consider the following circular queue with N. When Front and Rear are equal, it signifies a queue overflow."
file2_topic_8,"lets, say, evaluated, rbcde, rcd","<task:clean> <sos>
 ( c d ) must be evaluated ï¬rst lets say the result is rcd
 b rcd must be evaluated next lets say the result is rbcd
 Then rbcd e must be evaluated lets say the result is rbcde
 Finally a rbcde must be evaluated Compilers typically use postï¬x notation which is parenthesisfree
 <eos>","First, (c d) must be evaluated. Let's say the result is rcd. Next, b rcd must be evaluated. Let's say the result is rbcd. Then, rbcd e must be evaluated. Let's say the result is rbcde. Finally, a rbcde must be evaluated. Compilers typically use postfix notation, which is parenthesis-free."
file2_topic_9,"return, steps, algorithm, closed, true","<task:clean> <sos>
 Else if c is a closed parenthesis
 If rear front return true
 Else return false Algorithm isFull ( ) Steps
 <eos>","Else if `c` is a closed parenthesis,
 If `rear` is `front`, return true.
 Else, return false.
 Algorithm `isFull()` Steps"
file2_topic_10,"maxqueuesize, initialize, array, create, enqueue","<task:clean> <sos>
 The array may become full
 To create a queue we initialize an array of maxQueueSize
 Initialize an array of size maxQueueSize
 Example suppose maxQueueSize and operations performed are enqueue ( ) enqueue ( ) dequeue ( ) enqueue ( ) dequeue ( ) enqueue ( )
 <eos>","The array may become full. To create a queue, an array of `maxQueueSize` is initialized. Initialize an array of size `maxQueueSize`. For example, suppose `maxQueueSize` is defined, and the operations performed are: `enqueue()`, `enqueue()`, `dequeue()`, `enqueue()`, `dequeue()`, and `enqueue()`."
file2_topic_11,"beginning, let, increased, dequeue, algorithm","<task:clean> <sos>
 Let f and r be in the beginning
 During enqueue r is increased by and during dequeue f is increased by
 Algorithm dequeue ( ) Steps
 <eos>","Let f and r be in the beginning.
 During enqueue, r is increased by, and during dequeue, f is increased by.
 Algorithm Dequeue ( ) Steps."
file2_topic_12,"implementation, arrays, static, gradually, problem","<task:clean> <sos>
 Initialize front and rear to Static Implementation of a Queue ( using arrays ) Algorithm isEmpty ( ) Steps
 Else return false Static Implementation of a Queue ( using arrays ) Algorithm enqueue ( value ) Steps
 Static Implementation of a Queue ( using arrays ) Problem with this implementation f r The queue gradually shifts to the right
 Static Implementation of a Queue ( using arrays ) Problem with this implementation The queue gradually shifts to the right
 <eos>","Initialize `front` and `rear` for a Static Implementation of a Queue ( using arrays ). Algorithm `isEmpty()`: Steps.
 Otherwise, return `false`. Static Implementation of a Queue ( using arrays ): Algorithm `enqueue(value)`: Steps.
 Static Implementation of a Queue ( using arrays ): A problem with this implementation (f r) is that the queue gradually shifts to the right.
 Static Implementation of a Queue ( using arrays ): A problem with this implementation is that the queue gradually shifts to the right."
file2_topic_13,"rear, maxqueuesize, queue, priority, value","<task:clean> <sos>
 If rear maxQueueSize return true
 If queue is not full increase rear by and store value at index rear of the array
 If the queue is not empty increase front by and return the value at index front of the array
 On queue overï¬‚ow move all elements to the left so that the queue front is always at
 The position next to maxQueueSize is The position that precedes is maxQueueSize
 When the queue rear is at maxQueueSize the Next element is put into position
 If front ( rear ) maxQueueSize return true
 If queue is not full a rear ( rear ) maxQueueSize b datarear value
 If the queue is not empty a front ( front ) maxQueueSize b return queuefront
 Endif Priority Queue The element to be deleted is the one with the highest or lowest priority At any time an element with arbitrary priority can be inserted into the queue
 Ascending queue Only the smallest item can be removed
 Descending queue Only the largest item can be removed
 <eos>","If rear is at maxQueueSize, return true.
 If the queue is not full, increment rear and store the value at the rear index of the array.
 If the queue is not empty, increment front and return the value at the front index of the array.
 On queue overflow, all elements are moved to the left so that the queue front is always at.
 The position next to maxQueueSize is [unspecified]. The position that precedes [an unspecified point] is maxQueueSize.
 When the queue rear is at maxQueueSize, the next element is put into position.
 If front or rear is at maxQueueSize, return true.
 If the queue is not full, rear is updated based on its current value and maxQueueSize, and the value is stored at data[rear].
 If the queue is not empty, front is updated based on its current value and maxQueueSize, and the value at queue[front] is returned.
 Endif. Priority Queue: The element to be deleted is the one with the highest or lowest priority. At any time, an element with arbitrary priority can be inserted into the queue.
 Ascending queue: Only the smallest item can be removed.
 Descending queue: Only the largest item can be removed."
file2_topic_14,"print, message, underï¬‚ow, overï¬‚ow, queue","<task:clean> <sos>
 Else print Queue overï¬‚ow message
 Else print Queue underï¬‚ow message
 Else a print Queue overï¬‚ow message
 Else a print Queue underï¬‚ow message
 <eos>","Else, print Queue overï¬‚ow message. Else, print Queue underï¬‚ow message. Else, print Queue overï¬‚ow message. Else, print Queue underï¬‚ow message."
file2_topic_15,"circular, used, space, algorithm, steps","<task:clean> <sos>
 Use circular queue Circular Queue Aka circular buï¬€er ring buï¬€er A FIFO list The last position is connected back to the ï¬rst position to make a circle
 Implementation of a circular queue with n space used Algorithm createQueue ( maxQueueSize ) Steps
 Initialize front and rear to Implementation of a circular queue with n space used Algorithm isEmpty ( ) Steps
 Else return false Implementation of a circular queue with n space used Algorithm enqueue ( value ) Steps
 Endif Implementation of a circular queue with n space used Algorithm dequeue ( ) Steps
 <eos>","A circular queue, also known as a circular buffer or ring buffer, is a First-In, First-Out (FIFO) list where the last position connects back to the first, forming a circle. For a circular queue implemented with 'n' space, the `createQueue(maxQueueSize)` algorithm initializes `front` and `rear`. The `isEmpty()` algorithm returns `false` if the queue is not empty. The `enqueue(value)` algorithm includes steps that conclude with an `Endif` statement. The `dequeue()` algorithm also has defined steps."
file1_topic_34,"software, application, computer, disk, users","<task:clean> <sos>
 Computer Software The software is what really gives the computer life
 Software is installed onto your computer and stored in mass storage devices
 Software can actually be placed into two separate categories system of applications
 System software System software ( popularly called the operating system ) is the foundation software for a computer
 An operating system ( OS ) controls all parts of the computer
 The major functions of the OS ate to handle all input devices ( keyboard mouse disk ) handle all output devices ( screen printer disk ) coordinate and manage use of other resources ( memory disk CPU etc
 ) accept commands from users provide an environment over which other programs ( software ) can run
 Examples of popular OS are DOS ( Disk Operating System ) Windows Unix Linux OS and Solaris etc
 Some of these OSes are specific to a particular computer system eg
 Solaris runs on Sun SPARC machines
 Application software Application software is the software that is developed for a particular use
 These software run over the environment provided by the system software
 There are thousands of application software
 There are other utility programs that check if the units inside your machine are functioning properly as they should
 Examples are the disk scanner that checks if the surface of your disks are damaged antivirus that checks if your computer has been infected with some virus ( a malicious program that may just annoy you or even delete all the content of your hard drive ) and clean if found etc
 Problem solving using Computers Standard software packages available in the market are intended for generalpurpose applications
 However the users often require customtailored software for performing specific data processing or computational tasks
 Application software development is the process of creating such software which satisfies the end users requirements and needs
 In simple language it can be said that problem solving using computers is the development of the application software
 Following steps needs to be followed for developing the application software
 <eos>","Computer software: Software is what truly gives a computer life. Software is installed on your computer and stored in mass storage devices. Software can actually be placed into two separate categories: system and application software.
 
 System software: This software (popularly called the operating system) is the foundational software for a computer. An operating system (OS) controls all parts of the computer. The major functions of the OS are to handle all input devices (keyboard, mouse, disk); handle all output devices (screen, printer, disk); coordinate and manage the use of other resources (memory, disk, CPU, etc.); accept commands from users; and provide an environment over which other programs (software) can run. Examples of popular OSes include DOS (Disk Operating System), Windows, Unix, Linux OS, and Solaris, etc. Some of these OSes are specific to a particular computer system, e.g., Solaris runs on Sun SPARC machines.
 
 Application software: This software is developed for a particular use. These programs run within the environment provided by the system software. There are thousands of application programs. There are other utility programs that check whether the units inside your machine are functioning properly, as they should. Examples include the disk scanner that checks if the surface of your disks is damaged; antivirus software that checks if your computer has been infected with a virus (a malicious program that may just annoy you or even delete all the content of your hard drive); and cleans if found, etc.
 
 Problem-solving using computers: Standard software packages available in the market are intended for general-purpose applications. However, users often require custom-tailored software for performing specific data processing or computational tasks. Application software development is the process of creating such software that satisfies the end-users' requirements and needs. In simple language, it can be said that problem-solving using computers is the development of application software. The following steps need to be followed for developing application software."
file1_topic_35_0,"step, sum, goto, stop, series","<task:clean> <sos>
 Spreadsheets very simply put gives you when you input
 For example Read numbers form user and display the resulting sum
 Write an algorithm and a flowchart to read a five number and check whether the number is a palindrome or not
 Algorithm Step Start Step Declare variable n r sum i Step i Step Repeat steps Step to until i is less than or equal to else goto step Step input to n Step sum Step tempn Step Repeat Steps to until n is greater than else goto step Step rn mod of Step sumsumr Step nn then goto Step Step if sum is equal to temp than goto Step else goto Step Step Display n as palindrome then goto step Step Display n is not palindrome Step ii then goto step Step Stop Flowchart False True True False True False Start Declare n r sum i i ii Is i
 Input to n Stop sum tempn Is n
 r n mod of sumsumr nn Is tempsum
 Display P li d Display Source code include include void main ( ) int nirsumtemp i clrscr ( ) while ( i ) rn sumsumr nn if ( sumtemp ) printf ( Palindrome dtemp ) else printf ( Not Palindrome dtemp ) i getch ( )
 Write a program to evaluate the following series using recursive function
 n include include float sum int sign void add ( int nint i ) int term if ( in ) signsign termiisign sumsumterm add ( ni ) else printf ( n The sum of series is fsum ) void main ( ) int n printf ( nEnter the number of term ) scanf ( dn ) add ( n ) getch ( ) Static variable A variable can be declared static using the keyword static like static int a Internal static variable are those which are declared inside a function
 <eos>","Spreadsheets, very simply put, give you results when you input data. For example, read numbers from the user and display their resulting sum.
 
 Write an algorithm and a flowchart to read a five-digit number and check whether it is a palindrome.
 
 Algorithm:
 1. Start.
 2. Declare variables: n, r, sum, temp, i.
 3. Input a number into n.
 4. Set sum = 0.
 5. Set temp = n.
 6. Repeat the following steps until n is not greater than 0:
  6.1. Set r = n mod 10.
  6.2. Set sum = (sum * 10) + r.
  6.3. Set n = n / 10.
 7. If sum is equal to temp, then display 'n is a palindrome'.
 8. Else, display 'n is not a palindrome'.
 9. Stop.
 
 Flowchart elements include: 'False', 'True', 'Start', 'Declare n, r, sum, i', 'i', 'ii', 'Is i?', 'Input to n', 'Stop', 'sum', 'tempn', 'Is n?', 'r n mod of', 'sumsumr', 'nn', 'Is temp sum?', 'Display P li d', and 'Display'.
 
 Source code:
 ```c
 #include <stdio.h>
 #include <conio.h>
 
 void main() {
  int n, i, r, sum, temp;
  clrscr();
  while (i) {
  r = n % 10;
  sum = sum * 10 + r;
  n = n / 10;
  }
  if (sum == temp) {
  printf(""Palindrome %d"", temp);
  } else {
  printf(""Not Palindrome %d"", temp);
  }
  i;
  getch();
 }
 ```
 
 Write a program to evaluate the following series using a recursive function.
 
 Source code:
 ```c
 #include <stdio.h>
 #include <conio.h>
 
 float sum;
 int sign;
 
 void add(int n, int i) {
  int term;
  if (i <= n) {
  sign = -sign;
  term = i * sign;
  sum = sum + term;
  add(n, i + 1);
  } else {
  printf(""\n The sum of series is %f"", sum);
  }
 }
 
 void main() {
  int n;
  printf(""\nEnter the number of term: "");
  scanf(""%d"", &n);
  add(n, 1);
  getch();
 }
 ```
 
 Static variable: A variable can be declared static using the keyword 'static', like 'static int a'. Internal static variables are those which are declared inside a function."
file1_topic_35_1,"step, sum, goto, stop, series","<task:clean> <sos>
 PRACTICE XXX C SERIES USING ARITHMETIC IF INTEGER P PRINT ENTER THE VALUE OF N AND X READ NX I P SUM IF ( IN ) SUMSUMXP PP II GOTO PRINT SUM IS SUM STOP END Logical IF statement The logical if condition checks any given logical condition and transfer the control accordingly
 Logical Condition The following are the relational operators and their symbols used in FORTRAN PRACTICE Write a program to display FIBNOACCI series until term value is less than in FORTRAN
 C FIBONACCI SERIES INTEGER FST PRINT ENTER THE NUMBER OF TERMS F S WRITE ( ) FS TFS IF ( TGT ) GOTO WRITE ( ) T FS ST GOTO STOP END IFTHENELSE statement The IFTHENELSE statement is more useful and easy to handle than the logical if statement
 ELSEIF PRACTICE Write a program to display Fibonacci series up to N term in FORTRAN
 C FIBONACCI SERIES INTEGER FST PRINT ENTER THE NUMBER OF TERMS READ ( ) N F S IF ( NEQ ) THEN WRITE ( ) F ELSE WRITE ( ) FS DO IN TFS WRITE ( ) T FS ST CONTINUE ENDIF STOP END Write a program to find the HCF for any two number entered by user in FORTRAN C WRITE A PROGRAM TO FIND HCF ( GREATEST COMMON FACTOR ) READ II IRIIII IF ( IREQ ) THEN PRINT THE HCF ISI STOP ENDIF II IIR GOTO STOP END Nested IFTHENELSE In certain cases we may have to use one IFTHENELSE structure within another IFTHEN
 ELSE ENDIF Write a program to check whether a given number is Armstrong or not in FORTRAN
 C PROGRAM TO FIND ARMSTRONG NUMBER OR NOT PRINT ENTER THE NUMBER READ N TEMPN SUM IF ( NGT ) THEN IRNN SUMSUMIR NN GOTO ENDIF IF ( SUMEQTEMP ) THEN PRINT TEMPIS ARMSTORNG ELSE PRINT TEMPIS NOT ARMSTRONG ENDIF STOP END DO LOOPS The DO LOOP is used whenever a particular job is to be repeated number of times
 <eos>","PRACTICE XXX: C Series using Arithmetic. If integer P, PRINT 'ENTER THE VALUE OF N AND X'. READ N, X. I, P, SUM. IF (IN) SUMSUMXP. PP. II. GOTO [label]. PRINT 'SUM IS SUM'. STOP. END.
 
 Logical IF Statement. The logical IF condition checks any given logical condition and transfers the control accordingly.
 
 Logical Condition. The following are the relational operators and their symbols used in FORTRAN.
 
 PRACTICE: Write a program to display the FIBONACCI series until the term value is less than in FORTRAN.
 
 C: FIBONACCI SERIES. INTEGER FST. PRINT 'ENTER THE NUMBER OF TERMS'. F, S. WRITE ( ) FS. TFS. IF (TGT) GOTO [label]. WRITE ( ) T. FS. ST. GOTO [label]. STOP. END.
 
 IFTHENELSE Statement. The IFTHENELSE statement is more useful and easy to handle than the logical IF statement.
 
 ELSEIF.
 
 PRACTICE: Write a program to display the Fibonacci series up to N term in FORTRAN.
 
 C: FIBONACCI SERIES. INTEGER FST. PRINT 'ENTER THE NUMBER OF TERMS'. READ ( ) N, F, S. IF (NEQ) THEN WRITE ( ) F ELSE WRITE ( ) FS. DO IN. TFS. WRITE ( ) T. FS. ST. CONTINUE. ENDIF. STOP. END.
 
 PRACTICE: Write a program to find the HCF for any two numbers entered by the user in FORTRAN.
 
 C: WRITE A PROGRAM TO FIND HCF (GREATEST COMMON FACTOR). READ II. IRIIII. IF (IREQ) THEN PRINT 'THE HCF IS I'. STOP. ENDIF. II. IIR. GOTO STOP. END.
 
 Nested IFTHENELSE. In certain cases, we may have to use one IFTHENELSE structure within another IFTHEN ELSE ENDIF.
 
 PRACTICE: Write a program to check whether a given number is Armstrong or not in FORTRAN.
 
 C: PROGRAM TO FIND ARMSTRONG NUMBER OR NOT. PRINT 'ENTER THE NUMBER'. READ N. TEMPN. SUM. IF (NGT) THEN IRNN. SUMSUMIR. NN. GOTO [label]. ENDIF. IF (SUMEQTEMP) THEN PRINT 'TEMP IS ARMSTRONG' ELSE PRINT 'TEMP IS NOT ARMSTRONG'. ENDIF. STOP. END.
 
 DO LOOPS. The DO LOOP is used whenever a particular job is to be repeated a number of times."
file1_topic_35_2,"step, sum, goto, stop, series","<task:clean> <sos>
 If vv then stop otherwise go to step PRACTICE C PRIME NUMBER INTEGER COUNT READ NUM COUNT DO INUM IF ( MOD ( NUMI ) EQ ) THEN COUNTCOUNT ENDIF CONTINUE IF ( COUNTEQ ) THEN PRINT NUMIS PRIME ELSE PRINT NUMIS NOT PRIME ENDIF STOP END Rules for subscripted variables The following rules may be strictly followed while defining the subscripted variables
 PRINT ENTET THE VALUE OF N AND X READ NX P SIGN FACT SUM DO IN SIGNSIGN DEN DO JFACT DENDENJ CONTINUE NUMSIGNXP SUMSUMNUMDEN FACTFACT PP CONTINUE PRINT THE SUM ISSUM STOP END Additional Topic Look for Preprocessor and Dynamic Memory Allocation
 <eos>","If vv, then stop; otherwise, go to PRACTICE C PRIME NUMBER INTEGER COUNT. Read NUM and initialize COUNT. For each integer I up to NUM, if MOD(NUM, I) meets the equality condition, then increment COUNT. Continue. If the COUNTEQ condition is met, print ""NUM is PRIME""; else, print ""NUM is NOT PRIME."" Stop. End. Rules for subscripted variables: The following rules may be strictly followed while defining the subscripted variables. PRINT: ENTER THE VALUE OF N AND X. READ N, X. P, SIGN, FACT, SUM. Begin a loop for I (up to N). Within this loop: update SIGN. Manage DEN by performing J-based FACT calculation and updating DEN with J. Continue. Calculate NUM as SIGN multiplied by X to the power of P. Update SUM by adding NUM divided by DEN. Update FACT. Update P. Continue. PRINT: The sum is SUM. Stop. End. Additional Topic: Look for Preprocessor and Dynamic Memory Allocation."
file1_topic_36,"large, console, volumes, oriented, data","<task:clean> <sos>
 Databases are most useful for organizing data
 For example database software can keep track of your friends name address telephone numbers and you can add or remove whenever you want
 You need to be sure that the source of the data is consistent so that the date will be available in the future when you need it
 These are console oriented IO functions which always use the terminal ( keyboard and screen ) as the target place
 This works fine as long as the data is small
 However many real life problems involve large volumes of data and in such situations the console oriented IO operations pose two major problems
 It becomes cumbersome and time consuming to handle large volumes of data through terminals
 The entire data is lost when either the program is terminated or the computer is turned off
 It is therefore necessary to have more flexible approach where data can be stored on the disk and read whenever necessary without destroying the data
 This method employs the concept of files to store data
 <eos>","Databases are most useful for organizing data. For example, database software can keep track of your friends' names, addresses, and telephone numbers, and you can add or remove entries whenever you want. You need to be sure that the data source is consistent so that the data will be available when needed in the future. These are console-oriented I/O functions that always use the terminal (keyboard and screen) as the target. This works fine as long as the data is small. However, many real-life problems involve large volumes of data, and in such situations, console-oriented I/O operations pose two major problems. It becomes cumbersome and time-consuming to handle large volumes of data through terminals. All data is lost when either the program is terminated or the computer is turned off. It is therefore necessary to have a more flexible approach where data can be stored on disk and read whenever necessary without destroying it. This method employs the concept of files to store data."
file1_topic_37,"languages, level, high, lowlevel, programming","<task:clean> <sos>
 Programming languages are mainly categorized into two types low level and high languages
 Lowlevel language A lowlevel language is a programming language much closer to the hardware
 High Level Language A high level language is a programming language that enables a programmer to write programs more or less independent of a particular type of computer
 Such languages are considered highlevel because they are closer to human languages and further from machine languages
 The main advantage of highlevel languages over lowlevel languages is that they are easier to read write and maintain
 The first highlevel programming languages were designed in the s
 low level or high level languages )
 <eos>","Programming languages are mainly categorized into two types: low-level and high-level languages.
 A low-level language is a programming language much closer to the hardware.
 A high-level language is a programming language that enables a programmer to write programs more or less independent of a particular type of computer.
 Such languages are considered high-level because they are closer to human languages and further from machine languages.
 The main advantage of high-level languages over low-level languages is that they are easier to read, write, and maintain.
 The first high-level programming languages were designed in the 1950s.
 (low-level or high-level languages)"
file1_topic_38_0,"code, object, compiler, language, source","<task:clean> <sos>
 This converting program is called assembler
 This can be done in two ways by a compiler or interpreter
 Compiler A compiler is a program that translates program ( called source code ) written in some high level language into object code
 The compiler derives its name from the way it works looking at the entire piece of source code and collecting and reorganizing the instructions
 A compiler translates highlevel instructions directly into machine language and this process is called compiling
 Compile Compiling is a process of transforming a program written in a highlevel programming language from source code into object code
 The first step is to pass the source code through a compiler which translates the highlevel language instructions in the source code follow its syntax rules
 The final step in producing an executable program after the compiler has produced object code is to pass the object code through a linker
 The linker combines molecules ( different program segments ) and gives real values to all symbolic addresses ( memory locations ) thereby producing machine code
 The compiler translates the source code into a form called object code
 Object code Object code is the code produced by a compiler
 Object code is often the same as or similar to a computers machine language
 The final step in producing an executable program is to transform the object code into machine languages if it is not already in this form
 A program called linker does this job
 Compilation and Execution Generally coding is done in highlevel language and sometimes in lowlevel language ( such as assembly language )
 In a compiled language a translation program is run to convert the programmers entire highlevel program which is called the source code into a machine language code
 This translation process is called compilations
 The machine language code is called the object code and can be saved and either runs ( executed ) immediately or later
 In an interpreted language a translation program converts each program statement into machine code just before the program statement is to be executed
 <eos>","<task:clean> <sos>
 This converting program is called an assembler. This can be done in two ways: by a compiler or an interpreter. A compiler is a program that translates a program (called source code) written in some high-level language into object code. The compiler derives its name from the way it works: by looking at the entire piece of source code and collecting and reorganizing the instructions. A compiler translates high-level instructions directly into machine language, and this process is called compiling. Compiling is a process of transforming a program written in a high-level programming language from source code into object code. The first step is to pass the source code through a compiler, which translates the high-level language instructions in the source code according to its syntax rules. The final step in producing an executable program, after the compiler has produced object code, is to pass the object code through a linker. The linker combines molecules (different program segments) and gives real values to all symbolic addresses (memory locations), thereby producing machine code. The compiler translates the source code into a form called object code. Object code is the code produced by a compiler. Object code is often the same as or similar to a computer's machine language. The final step in producing an executable program is to transform the object code into machine language if it is not already in this form. A program called a linker does this job. Generally, coding is done in a high-level language and sometimes in a low-level language (such as assembly language). In a compiled language, a translation program is run to convert the programmer's entire high-level program, which is called the source code, into a machine language code. This translation process is called compilation. The machine language code is called the object code and can be saved and either run (executed) immediately or later. In an interpreted language, a translation program converts each program statement into machine code just before the program statement is to be executed.
 <eos>"
file1_topic_38_1,"code, object, compiler, language, source","<task:clean> <sos>
 No object code is stored and there is no compilation
 This means that in a program where one statement is executed several times ( such as reading and employs payroll record ) that statement is converted to machine language each time it is executed
 The compilation process The object of the compiler is to translate a program written in a high level programming language from source code to object code
 The first step is to pass the source code through a compiler which translate the high level language instructions into object code
 <eos>","No object code is stored, and there is no compilation. This means that in a program where one statement is executed several times (such as reading and employing payroll records), that statement is converted to machine language each time it is executed. In the compilation process, the object of the compiler is to translate a program written in a high-level programming language from source code to object code. The first step is to pass the source code through a compiler which translates the high-level language instructions into object code."
file1_topic_39,"allowed, illegal, pppp, expressions, rule","<task:clean> <sos>
 This rule is called syntax
 The expressions such as pppp and pp are allowed
 pp or pp or p are not allowed
 ie pp Is illegal
 <eos>","This rule is called syntax.
 The expressions such as pppp and pp are allowed.
 The expressions such as pp, pp, or p are not allowed.
 I.e., pp is illegal."
file1_topic_40,"languages, compiled, cobol, interpreted, compilers","<task:clean> <sos>
 Now there are dozens of different languages such as Ada Algol BASIC COBOL C C FORTRAN LISP Pascal and Prolog etc
 Because compilers translate source code into object code which is unique for each type of computer many compilers are available for the same language
 For example there is a C compiler for PCs and another for Unix computers
 The high level languages can be either called compiled languages or interpreted languages
 Some of the most widely used compiled languages are COBOL C C FORTRAN etc
 Unlike the compiled languages
 The most frequently used interpreted language is BASIC
 <eos>","Now, there are dozens of different languages, such as Ada, Algol, BASIC, COBOL, C, C++, FORTRAN, LISP, Pascal, and Prolog, etc.
 Because compilers translate source code into object code, which is unique for each type of computer, many compilers are available for the same language.
 For example, there is a C compiler for PCs and another for Unix computers.
 High-level languages can be called either compiled languages or interpreted languages.
 Some of the most widely used compiled languages are COBOL, C, C++, FORTRAN, etc.
 Unlike compiled languages, the most frequently used interpreted language is BASIC."
file1_topic_41,"interpreter, faster, programs, interpreted, interpreters","<task:clean> <sos>
 Interpreter An interpreter translates highlevel instructions into an intermediate form which it then executes
 Interpreter analyzes and executes each line of source code in succession without looking at the entire program the advantage of interpreters is that they can execute a program immediately
 However programs produced by compilers run much faster than the same programs executed by an interpreter
 Compiled programs generally run faster than interpreted programs
 The advantage of an interpreter however is that it does not need to get through the compilation stage during which machine instructions are generated
 The interpreter on the other hand can immediately execute highlevel programs
 For this reason interpreters are sometimes used during the development of a program when a programmer wants to add small sections at a time and test them quickly
 Compiler languages are better than interpreted languages as they can be executed faster and more efficiently once the object code has been obtained
 On the other hand interpreted languages do not need to create object code and so are usually easier to develop that is to code and test
 <eos>","An interpreter translates high-level instructions into an intermediate form, which it then executes. An interpreter analyzes and executes each line of source code in succession, without looking at the entire program. The advantage of interpreters is that they can execute a program immediately. However, programs produced by compilers run much faster than the same programs executed by an interpreter. Compiled programs generally run faster than interpreted programs. The advantage of an interpreter, however, is that it does not need to go through the compilation stage during which machine instructions are generated. The interpreter, on the other hand, can immediately execute high-level programs. For this reason, interpreters are sometimes used during the development of a program when a programmer wants to add and test small sections quickly. Compiler languages are better than interpreted languages because they can be executed faster and more efficiently once the object code has been obtained. On the other hand, interpreted languages do not need to create object code and so are usually easier to developâ€”that is, to code and test."
file1_topic_42_0,"step, flowchart, algorithm, lines, goto","<task:clean> <sos>
 Algorithm Development and Flowcharting
 Algorithm Development and Flowchart ( Program design ) You know you have a problem and have identified it in the program analysis stage
 Algorithms Algorithms are a verbal or say written form of the program
 It can be defined as ordered description of instructions to be carried out in order to solve the given task
 Basic Guidelines for writing algorithms
 Describe everything clearly and explicitly
 Important Features of Algorithm
 Flowchart One of the most widely used devices for designing programs is the flowchart which graphically represents the logic needed to solve a programming problem
 A programming flowchart represents the detailed sequence of steps needed to solve the problem
 Program flowcharts are frequently used to visualize the logic and steps in processing
 In other words its a diagrammatic representation of algorithm
 Basic blocks used for drawing flowcharts Structure Purpose Start Stop Processing Decision making Input Outputs Connector For examples Read numbers form user and display the resulting sum
 Flowchart to find the largest among three entered numbers Y N Y N N Y start Read a b cab Display Stop Start input A B C Is AB Is AC Is BC Print A Print C Print B Stop Coding Writing the program is called coding
 Write an algorithm and flowchart to generate the following
 <eos>","Algorithm Development and Flowcharting.
 Algorithm Development and Flowchart (Program Design). A problem is known and identified during the program analysis stage.
 Algorithms: Algorithms are a verbal or written form of a program.
 They can be defined as an ordered description of instructions to be carried out to solve a given task.
 Basic Guidelines for Writing Algorithms:
 Describe everything clearly and explicitly.
 Important Features of Algorithms:
 Flowcharts: One of the most widely used devices for designing programs is the flowchart, which graphically represents the logic needed to solve a programming problem.
 A programming flowchart represents the detailed sequence of steps needed to solve the problem.
 Program flowcharts are frequently used to visualize the logic and steps in processing.
 In other words, it's a diagrammatic representation of an algorithm.
 Basic Blocks Used for Drawing Flowcharts:
 Structure/Purpose: Start/Stop, Processing, Decision-making, Input/Output, Connector.
 For example: Read numbers from a user and display the resulting sum.
 Flowchart to Find the Largest Among Three Entered Numbers: Y N Y N N Y. Start, Read A, B, C, Display, Stop. Start, Input A, B, C, Is AB, Is AC, Is BC, Print A, Print C, Print B, Stop.
 Coding: Writing the program is called coding.
 Write an algorithm and flowchart to generate the following."
file1_topic_42_1,"step, flowchart, algorithm, lines, goto","<task:clean> <sos>
 Algorithm Step start Step input to n Number of lines Step Initialize c as Deviation on each line Step i Number of lines Step Repeat step to until i less than or equal to n else goto step Step j Number of column Step Repeat step to until j less than or equal to ( n ) else goto step Step Is j greater than or equal to ( nc ) and less than or equal to ( nc ) than goto Step else goto Step Step Display then goto step Step Display Step jj then goto step Step Display newline Step cc Step ii then goto step Step Stop for ( ii ( nc ) j include void main ( ) int ncij clrscr ( ) c deviation printf ( nEnter the number of lines ) scanf ( dn ) number of lines Flow Chart False True False True True False Start Input to n c ii ( nc ) j ( nc )
 <eos>","The algorithm steps commence. Input 'n' for the number of lines. Initialize 'c' as deviation on each line. 'i' signifies the number of lines. Repeat actions until 'i' is less than or equal to 'n'; otherwise, go to a specified step. 'j' signifies the number of columns. Repeat actions until 'j' is less than or equal to 'n'; otherwise, go to a specified step. If 'j' is greater than or equal to 'nc' and also less than or equal to 'nc', then go to a step; else, go to another step. Display content, then go to a step. Display content. Process 'jj', then go to a step. Display a newline. Process 'cc'. Process 'ii', then go to a step. The algorithm stops, involving 'ii', 'nc', and 'j'. It includes programming constructs like `void main()`, `int ncij`, `clrscr()`, and refers to 'c' as deviation. Input/output operations are `printf(""nEnter the number of lines"")` and `scanf(""dn"")` for the number of lines. Flow Chart elements present are: False, True, False, True, True, False, Start, Input to n, c, ii, (nc), and j (nc)."
file1_topic_43,"requirements, specifying, inputs, processing, input","<task:clean> <sos>
 Specifying the input requirements
 Specifying the processing requirements
 Specifying the input requirements Now that you have determined the outputs you need to define the input and data
 To do this you list the inputs required and the source of the data
 For example in a payroll program inputs could be employee timesheets and the source of the in put could be either the employees themselves or their supervisors
 Specifying the processing requirements Now you have to determine the processing requirements for converting the input data to output
 Quantities that have specified relation to inputs
 <eos>","Specifying the input requirements: Now that you have determined the outputs, you need to define the input and data. To do this, you list the inputs required and the source of the data. For example, in a payroll program, inputs could be employee timesheets, and the source of the input could be either the employees themselves or their supervisors. Specifying the processing requirements: Now, you have to determine the processing requirements for converting the input data to output, including quantities that have a specified relation to inputs."
file1_topic_44,"positive, symbol, assumed, negative, sign","<task:clean> <sos>
 Do not make any assumptions
 or will precede the signed numeric item
 ( with o or x ) causing octal and hex item to be preceded by and x
 Capital alphabetsAZ Digit Symbols
 The symbol or can occur only at the left most end of the number
 For negative number symbol is used at the most position and for the positive number symbol is used
 If no symbol occurs the number is assumed to be positive
 A negative number must be written with the symbol
 For a positive number the symbol is optional
 If there is no sign the number is assumed to be positive
 The exponent is always an integer with at most two digit
 The exponent can have sign ( or )
 If there is no sign the exponent is assumed to be positive
 The subscript is always an integer
 The subscript value can not be negative
 <eos>","Do not make any assumptions.
 The characters 'o' or 'x' will precede the signed numeric item, causing octal and hexadecimal items to be preceded by 'o' and 'x'.
 Capital alphabets (A-Z) and digit symbols.
 The symbol can occur only at the leftmost end of the number.
 For a negative number, a symbol is used at the leftmost position, and for a positive number, a symbol is also used.
 If no symbol occurs, the number is assumed to be positive.
 A negative number must be written with the symbol.
 For a positive number, the symbol is optional.
 If there is no sign, the number is assumed to be positive.
 The exponent is always an integer with at most two digits.
 The exponent can have a sign (positive or negative).
 If there is no sign, the exponent is assumed to be positive.
 The subscript is always an integer.
 The subscript value cannot be negative."
file1_topic_45,"containing, implemented, makes, effectiveness, concise","<task:clean> <sos>
 Effectiveness All operations must be sufficiently basic so as to be implemented with even paper and pencil
 In addition using many of them makes a program logic complicated and renders the program unreadable
 These enable us to develop concise programs containing repetitive processes without the use of goto statements
 That is they can not be used for reading a text containing more than one word
 <eos>","For effectiveness, all operations must be sufficiently basic to be implemented even with paper and pencil. In addition, using many of them makes a program's logic complicated and renders the program unreadable. These enable us to develop concise programs that contain repetitive processes without the use of 'goto' statements. That is, they cannot be used to read a text containing more than one word."
file1_topic_46,"notation, scanf, field, reads, specified","<task:clean> <sos>
 Display the value in C
 It can be performed using scanf function
 The general format of scanf is scanf ( control stringargargarnn ) The control string specifies the field format in which the data is to be entered and the arguments arglargargn specify the address of locations where the data is stored
 When the scanf reads a particular value reading of the value will be terminated as soon as the number of character specified by the field width is reached ( if specified ) or until a character that is not valid for the value being read in encountered
 For example scanf ( d d dab ) will assign the data as follows to a skipped ( because of ) to b Inputting Real Numbers Unlike integer numbers the field width of real number is not to be specified and therefore scanf reads real numbers using the simple specification f for both the notation namely decimal point notation and exponential notation
 <eos>","Display the value in C. It can be performed using the `scanf` function. The general format of `scanf` is `scanf(control stringargargarnn)`. The `control string` specifies the field format in which the data is to be entered, and the arguments `arglargargn` specify the addresses of locations where the data is stored. When `scanf` reads a particular value, the reading of the value will be terminated as soon as the number of characters specified by the field width is reached (if specified) or until a character that is not valid for the value being read is encountered. For example, `scanf(d d dab)` will assign the data as follows: to `a`; a value is skipped (because of ); and another value is assigned to `b`. Inputting Real Numbers: unlike integer numbers, the field width of real numbers is not to be specified; therefore, `scanf` reads real numbers using the simple specification `%f` for both notations, namely decimal point notation and exponential notation."
file1_topic_47,"keyword, lowercase, colon, underscore, permitted","<task:clean> <sos>
 Keyword All keyword have fixed meaning and these meaning can not be changed
 All keyword words must be written in lowercase
 Both uppercase and lowercase letter are permitted although lowercase letters are commonly used
 The underscore character is also permitted in identifiers
 First character must be an alphabet ( or underscore )
 Can not use a keyword
 Note that case labels end with a colon ( ) The
 A label is any valid variable name and must be followed by a colon
 Note only single quote ( ) must be used and not the double quotes ( )
 No special is allowed in a variable name
 The subscript must be given within parenthesis after the variable name
 <eos>","All keywords have fixed meanings, and these meanings cannot be changed. All keywords must be written in lowercase. Both uppercase and lowercase letters are permitted, although lowercase letters are commonly used. The underscore character is also permitted in identifiers. The first character must be an alphabetic character or an underscore. Keywords cannot be used. Note that case labels end with a colon. A label is any valid variable name and must be followed by a colon. Note that only single quotes must be used, not double quotes. No special characters are allowed in a variable name. The subscript must be given within parentheses after the variable name."
file1_topic_48,"digits, succeeding, alphabets, character, displays","<task:clean> <sos>
 These are userdefined names and consist of a sequence of letters and digits with a letter as a first character
 This statement displays the character contained in the variable_name at the terminal
 Variable name can be form one to six character in length
 The first character of the variable name must be an alphabet and the succeeding characters can be alphabets or numeric digits
 <eos>","These are user-defined names and consist of a sequence of letters and digits, with a letter as the first character. This statement displays the character contained in the variable name on the terminal. A variable name can be from one to six characters in length. The first character of the variable name must be a letter, and the succeeding characters can be letters or numeric digits."
file1_topic_49,"symbolic, names, verbs, fortran, naming","<task:clean> <sos>
 The rules of identifiers
 Symbolic names have the same form as variable names
 A blank space is required between define and symbolic name and between the symbolic name and the constant
 After definition the symbolic name should not be assigned any other value within the program by using an assignment statement
 Symbolic names are NOT declared for data types
 Rules of naming variable
 FORTRAN verbs which have special meaning in FORTRAN can not be used as variable names
 <eos>","The rules of identifiers. Symbolic names have the same form as variable names. A blank space is required between 'define' and the symbolic name, and between the symbolic name and the constant. After definition, the symbolic name should not be assigned any other value within the program using an assignment statement. Symbolic names are NOT declared for data types. Rules for naming variables. FORTRAN verbs that have special meaning in FORTRAN cannot be used as variable names."
file1_topic_50,"sizeof, const, size, returns, modified","<task:clean> <sos>
 Example const int size const is a new data type qualifier defined by ANSI standard
 This tells the compiler that the value of the int variable size must not be modified by the program
 The sizeof operator The sizeof is a compile time operator and when used with an operand it returns the number of bytes the operator occupies
 sizeof ( int ) It returns
 The size must be integer value or integer constant without any sign
 <eos>","The `const` keyword, exemplified by `const int size`, is a new data type qualifier defined by the ANSI standard. This tells the compiler that the value of the int variable size must not be modified by the program. The `sizeof` operator is a compile-time operator, and when used with an operand, it returns the number of bytes the operator occupies. Example: `sizeof(int)`. It returns. The size must be an integer value or an integer constant without any sign."
file1_topic_51,"conversion, unsigned, signed, type, implicit","<task:clean> <sos>
 In order to provide some control over the range of number and storage space c has three classes of integer storage namely short int int and long int in both signed and unsigned form
 Type Size ( bits ) Range char or signed char to unsigned char to int or signed int to unsigned int to short int or signed short int to unsigned short int to long int or signed long int to unsigned long int to float E to E double E to E long double E to E Operators Operators are words or symbols that cause a program to do something to variable
 Type conversion in expression Implicit type conversion C automatically converts any intermediate value to the proper type so that the expression can be evaluated without losing any significance
 This automatic conversion is known as implicit type conversion
 During evaluation it adheres to very strict rules of type conversion
 If the operands are of different type the lower type is automatically converted to the higher type before the operation proceeds
 The result is of higher type
 For example int ab float bc babc the resultant of abc expression is float Explicit Conversion It is the process in which we want to force a type conversion in a way that is different from the automatic conversion
 The general form of cast is ( typename ) expression Where typename is one of the standard C data type
 Implicit type declaration The general format is given below IMPLICIT type ( ) type ( )
 <eos>","In order to provide some control over the range of numbers and storage space, C has three classes of integer storage, namely, `short int`, `int`, and `long int`, in both signed and unsigned forms. The type sizes (in bits) and ranges include: `char` or `signed char` to `unsigned char`; `int` or `signed int` to `unsigned int`; `short int` or `signed short int` to `unsigned short int`; `long int` or `signed long int` to `unsigned long int`; `float E` to `E`; `double E` to `E`; and `long double E` to `E`. Operators are words or symbols that cause a program to do something to variables. Type conversion in expressions, specifically implicit type conversion: C automatically converts any intermediate value to the proper type so that the expression can be evaluated without losing any significance. This automatic conversion is known as implicit type conversion. During evaluation, it adheres to very strict rules of type conversion. If the operands are of different types, the lower type is automatically converted to the higher type before the operation proceeds. The result is of higher type. For example, given `int ab`, `float bc`, and `babc`, the resultant of the `abc` expression is `float`. Explicit Conversion: It is the process by which we force a type conversion in a way that differs from the automatic conversion. The general form of cast is `(typename) expression`, where `typename` is one of the standard C data types. Implicit type declaration: The general format is `IMPLICIT type () type ()`."
file1_topic_52,"precision, double, floatingpoint, point, decimal","<task:clean> <sos>
 Float data type ( for floatingpoint ) floating point numbers are stored in bits with digit of precision
 Double data type ( for double precision floating point number ) the data type double is also used for handling floatingpoint numbers
 But it is treated as a distinct data type because it ( double data type ) occupies twice as much memory as type float and stores floatingpoint numbers with much larger range and precision
 There is one and only one decimal point
 This means that there must be one decimal point and there should not be more than one decimal points
 <eos>","The `float` data type (for floating-point numbers) stores floating-point numbers in bits with a specific digit of precision. The `double` data type (for double-precision floating-point numbers) is also used for floating-point numbers. However, it is treated as a distinct data type because it occupies twice as much memory as the `float` type and stores floating-point numbers with a much larger range and precision. There is one and only one decimal point. This means that there must be one decimal point, and there should not be more than one decimal point."
file1_topic_53,"character, compulsory, string, acquires, byte","<task:clean> <sos>
 Char data type ( for character ) A single character can be defined as a character ( char ) type data
 Characters are usually stored in bits ( one byte ) of internal storage
 for character and string
 A string of character is called a character constant
 A variable which acquires only character string is called a character variable
 For character variables the declaration is compulsory
 <eos>","The `char` data type is for characters. A single character can be defined as a `char` type. Characters are usually stored in one byte (8 bits) of internal storage. For characters and strings. A string of characters is called a character constant. A variable that acquires only character string is called a character variable. For character variables, declaration is compulsory."
file1_topic_54,"expression, evaluated, relation, conditional, exponentiation","<task:clean> <sos>
 It is one if the specified relation is true and zero if the relation is false
 When postfix ( or ) is used with a variable in an expression the expression is evaluated first using the original value of the variable and then the variable is incremented ( or decremented ) by one
 expression expression The conditional expression is evaluated first
 If the result is nonzero expression is evaluated and is returned as the value of the conditional expression
 It return zero otherwise
 Any expression within parenthesis is first evaluated
 Exponentiation is given the top priority and evaluated first in an expression
 The value of the expression is evaluated first
 <eos>","It is one if the specified relation is true, and zero if the relation is false. When postfix ( or ) is used with a variable in an expression, the expression is evaluated first using the original value of the variable, and then the variable is incremented (or decremented) by one. The conditional expression is evaluated first. If the result is nonzero, the expression is evaluated and returned as the value of the conditional expression. It returns zero otherwise. Any expression within parentheses is evaluated first. Exponentiation is given the top priority and evaluated first in an expression. The value of the expression is evaluated first."
file1_topic_55,"rev, include, int, getch, hcf","<task:clean> <sos>
 include include void main ( ) int abl printf ( nEnter two numbers ) scanf ( ddab ) labab printf ( nThe largest number is d l ) getch ( )
 ( acac ) ( bcbc ) printf ( nThe largest value is dl ) getch ( ) The goto statement It is the statement to branch unconditionally from one point to another in the program
 include include int hcf ( int fint s ) if ( fs ) return s return ( sfs ) void main ( ) int ab clrscr ( ) printf ( nEnter the number ) scanf ( ddab ) printf ( The Hcf is d hcf ( ab ) ) getch ( ) Storage classes The available storage classes are
 Reverse a number using recursive function include include void fib ( int ) void main ( ) int n rev ( n ) getch ( ) void rev ( int n ) static int r int d if ( n ) dn rrd nn rev ( n ) else printf ( dr ) Register variable We can tell the compiler that a variable should be kept in one of the machines registers instead of keeping in the memory ( where normal variables are stored )
 include include void main ( ) int a int i clrscr ( ) for ( iii ) printf ( nd u ( ai ) ai ) getch ( ) Note
 <eos>","Include include; void main(); int abl; printf(""\nEnter two numbers""); scanf(""ddab""); labab; printf(""\nThe largest number is d l""); getch(). (acac); (bcbc); printf(""\nThe largest value is dl""); getch(). The goto statement: It is the statement to branch unconditionally from one point to another in the program. Include include; int hcf(int fint s); if (fs) return s; return (sfs); void main(); int ab; clrscr(); printf(""\nEnter the number""); scanf(""ddab""); printf(""The Hcf is d hcf (ab)""); getch(). Storage classes: The available storage classes are. Reverse a number using recursive function. Include include; void fib(int); void main(); int n; rev(n); getch(). Void rev(int n); static int r; int d; if (n) dn rrd nn rev(n); else printf(""dr""). Register variable: We can tell the compiler that a variable should be kept in one of the machine's registers instead of keeping it in memory (where normal variables are stored). Include include; void main(); int a; int i; clrscr(); for (iii) printf(""nd u (ai) ai""); getch(). Note."
file1_topic_56,"comma, expression, simple, combined, closes","<task:clean> <sos>
 The comma operator The comma operator can be used to link the related expression together
 A comma linked list of expressions are evaluated left to right and the value of rightmost expression is the value of the combined expression
 The above statement can be equivalently written as int table Commas are require after each brace that closes off a row except in the case of the last row
 The expression may be any simple variable or structure variable or an expression using simple variables
 <eos>","The comma operator can be used to link related expressions together. A comma-linked list of expressions is evaluated from left to right, and the value of the rightmost expression is the value of the combined expression. The above statement can be equivalently written as int table; commas are required after each brace that closes off a row, except in the case of the last row. The expression may be any simple variable, a structure variable, or an expression using simple variables."
file1_topic_57,"output, blanks, carriage, unwanted, tabs","<task:clean> <sos>
 This includes RETURN and TAB
 A dummy getchar ( ) may be used to eat the unwanted newline character
 We can also use the fflush function to flush out the unwanted character
 Blanks tabs or newlines
 Blanks tabs and newlines are ignored
 Carriage control In any output the first character of the output is lost
 That is considered as the carriage control
 So the first character of the output must be made a blank space so that the loss does not affect the output
 <eos>","This includes RETURN and TAB. A dummy getchar() may be used to eat the unwanted newline character. We can also use the fflush function to flush out the unwanted character. Blanks, tabs, or newlines. Blanks, tabs, and newlines are ignored. Carriage control: In any output, the first character of the output is lost. That is considered the carriage control. So, the first character of the output must be made a blank space so that the loss does not affect the output."
file1_topic_58,"string, arguments, control, argn, direct","<task:clean> <sos>
 Control string and arguments are separated by commas
 Control string ( also known as format string ) contain field specification which direct the interpretation of input data
 argn ) Control string consists of three types of items
 Escape sequence character such as nt and b The control string indicates how many arguments follow and what their types are
 The arguments argargargn are the variables whose values are formatted and printed according to the specifications of the control string
 <eos>","Control string and arguments are separated by commas.
 The control string (also known as the format string) contains field specifications that direct the interpretation of input data.
 The control string consists of three types of items.
 Among these types are escape sequence characters, such as `\n` and `\b`. The control string also indicates how many arguments follow and what their types are.
 The arguments (e.g., `arg1`, `arg2`, ..., `argn`) are variables whose values are formatted and printed according to the specifications of the control string."
file1_topic_59,"format, specification, specifications, sssr, denote","<task:clean> <sos>
 It may include field ( or format ) specifications consisting of the conversion character a data type character ( or type specifier ) and an optional number specifying the field width
 Format specifications that define the output format for display of each item
 FORMAT specification When data are to be input or the result to be output we fully mention the type of the data ( integer real or character ) and also its size
 The specification of the types of the data and its size is called FORMAT specification
 FORMAT statement The general form of a FORMAT statement is n FORMAT ( sssr ) where n is the statement number sssr are the format specifications Rules
 I format The symbol I is used to denote the integer quantities
 The general I format specification is I w Where w is the width of the integer data
 Example This data can be describe by the format statement FORMAT ( II ) This can be also be written as FORMAT ( I ) F Format The symbol F is used to denote the real data expressed in decimal form
 <eos>","It may include field (or format) specifications, consisting of a conversion character, a data type character (or type specifier), and an optional number specifying the field width. Format specifications define the output format for the display of each item. FORMAT specification: When data are to be input or results output, we fully mention the type of the data (integer, real, or character) and also its size. The specification of the data types and their size is called FORMAT specification. FORMAT statement: The general form of a FORMAT statement is `n FORMAT (sssr)`, where `n` is the statement number and `sssr` are the format specifications. I format: The symbol `I` is used to denote integer quantities. The general `I` format specification is `Iw`, where `w` is the width of the integer data. Example: This data can be described by the format statement `FORMAT (II)`. This can also be written as `FORMAT (I)`. F Format: The symbol `F` is used to denote real data expressed in decimal form."
file1_topic_60,"break, skip, statement, continue, enclosing","<task:clean> <sos>
 The break Statement The break statement enables a program to skip over part of the codes
 A break statement terminates the smallest enclosing while dowhile for or switch statement
 The continue Statement The continue is another jump statement some what like the break statement as both the statement skip over a part of the code
 But the continue statement is little different from break
 Instead of forcing termination it force the next iteration of the loop to take place skipping any code in between
 <eos>","The break statement enables a program to skip over part of the code. A break statement terminates the smallest enclosing while, do-while, for, or switch statement. The continue statement is another jump statement, somewhat like the break statement, as both statements skip over a part of the code. But the continue statement is a little different from the break statement. Instead of forcing termination, it forces the next iteration of the loop to take place, skipping any code in between."
file1_topic_61,"referenced, hold, subscripts, indices, classroll","<task:clean> <sos>
 cc Display Display Array Array is a collection of variables of the same type that are referenced by a common base
 The array is given a name and its elements are referred by their subscripts or indices
 The arrayname specifies the name with which the array will be referenced and size defined how many elements the array will hold
 array_nameimember_name Example classroll Practice Define a structure to hold the roll no
 <eos>","An array is a collection of variables of the same type that are referenced by a common base. The array is given a name, and its elements are referred to by their subscripts or indices. The array name specifies the name with which the array will be referenced, and its size defines how many elements the array will hold. Examples include `array_nameimember_name` and `classroll`. Practice: Define a structure to hold the roll no."
file1_topic_62,"array, comprised, element, single, behaves","<task:clean> <sos>
 Arrays are of different types ( i ) onedimensional array comprised of finite homogeneous element
 ( ii ) multidimensional array comprised of elements each of which is itself an array
 Single dimensional Array The simplest form of an array is a single dimensional array
 An array definition specifies a variable type and a name along with one more feature size to specify how many data items the array will contain
 The element value in the list of value must have the same data type as that of type of the array
 An array is a collection of related data element of same type
 Any array behaves like a builtin data type
 <eos>","Arrays are of different types: (i) a one-dimensional array comprised of finite, homogeneous elements; (ii) a multi-dimensional array comprised of elements, each of which is itself an array. A single-dimensional array is the simplest form of an array. An array definition specifies a variable type, a name, and one more featureâ€”sizeâ€”to specify how many data items the array will contain. The element values in the list of values must have the same data type as that of the array. An array is a collection of related data elements of the same type. Any array behaves like a built-in data type."
file1_topic_63,"initialization, size, initialized, dimensional, array","<task:clean> <sos>
 Initialization of one dimensional array After an array is declared its elements must be initialized
 The general form of initialization of array is type arrayname size list of value The values in the list are separated by commas
 Following declares an int array sales of size int sale Initialization two dimensional array Two dimensional arrays are also initialize in the same ways as singledimension ones
 When the array is completely initialize with all values explicitly we need not specify the size of first dimension
 In such cases the size of array will be determined automatically based on the number of elements initialized
 <eos>","Regarding the initialization of one-dimensional arrays: After an array is declared, its elements must be initialized. The general form for array initialization is 'type arrayname size list of values'. The values in the list are separated by commas. The following declares an `int` array, `sales`, of size `int sale`. Initialization of two-dimensional arrays: Two-dimensional arrays are also initialized in the same way as single-dimension ones. When the array is completely initialized with all values explicitly, we need not specify the size of the first dimension. In such cases, the size of the array will be determined automatically based on the number of elements initialized."
file1_topic_64,"row, zero, remaining, elements, initialize","<task:clean> <sos>
 Example int number If the number of initializers may be less than the declared size
 In such case the remaining elements are initialized to zero if the array type is numeric and NULL if the type is char
 Example int num Will initialize the first two elements of num as and respectively and the remaining elements to
 For example int table initializes the elements of the first row to zero and the second row to one
 The initialization is done row by row
 That is int table If the values are missing in an initialize they are automatically set to zero
 int table Will initialize the first two elements of the first row to one the first element of the second row to two and all other elements to zero
 It permitted to have a partial initialization
 We can initialize only the first few members and leave the remaining blank
 The uninitialized members should be only at the end of the list
 The uninitialized members will be assigned default values as follows Zero for integer and floating point numbers
 <eos>","Example: `int number`. If the number of initializers is less than the declared size, in such a case, the remaining elements are initialized to zero if the array type is numeric, and to NULL if the type is character. Example: `int num` will initialize the first two elements of `num`, with the remaining elements set to their default values. For example, `int table` initializes the elements of the first row to zero, and the second row to one. The initialization is done row by row. That is, for `int table`, if values are missing in an initializer, they are automatically set to zero. `int table` will initialize the first two elements of the first row to one, the first element of the second row to two, and all other elements to zero. It is permitted to have a partial initialization. We can initialize only the first few members and leave the remaining blank. The uninitialized members should be only at the end of the list. The uninitialized members will be assigned default values as follows: zero for integer and floating-point numbers."
file1_topic_65,"string, char, include, printf, stringi","<task:clean> <sos>
 include include void add ( int nint r ) int ij for ( iii ) ri for ( jjj ) rinij void main ( ) int listresultij printf ( nEnter the number ) for ( iii ) for ( jjj ) scanf ( dlistij ) add ( listresult ) printf ( The result is ) for ( iii ) printf ( ndresulti ) getch ( ) String C does not have a string data type rather it implements strings as single dimension character array
 Program to count number of word in a line
 include include include void main ( ) char string int ic clrscr ( ) printf ( n Enter the first string ) gets ( string ) istrlen ( string ) stringi for ( istringii ) if ( stringi ) c printf ( n The number of word in sentencedc ) getch ( ) Array of string An array of string is a twodimensional character array the size of first index ( rows ) determines the number of strings and the size of second index ( column ) determines maximum length of each string
 Pass these to a function which reverse the second string and then appends it at the end of the first string
 include include char rev ( char name ) int lj char r lstrlen ( name ) for ( lljllj ) rjnamel rj return r void display ( char namechar name ) char n nname This copy the name address to n printf ( n the copy string is sn ) namerev ( name ) strcat ( nname ) printf ( n The new string issn ) void main ( ) char stringstring clrscr ( ) printf ( n Enter the first string ) scanf ( sstring ) printf ( n Enter the second string ) scanf ( sstring ) display ( stringstring ) getch ( ) Structure A structure is a collection of variable ( of different data types ) referenced under one name providing of convenient means of keeping related information together
 <eos>","include include
 void add(int n, int r) {
  int i, j;
  for (iii) {
  ri;
  }
  for (jjj) {
  rinij;
  }
 }
 
 void main() {
  int list, result, i, j;
  printf(""nEnter the number"");
  for (iii) {
  for (jjj) {
  scanf(dlistij);
  }
  }
  add(list, result);
  printf(""The result is"");
  for (iii) {
  printf(""ndresulti"");
  }
  getch();
 }
 
 The C language does not have a string data type; rather, it implements strings as single-dimension character arrays.
 
 Program to Count Number of Word in a Line
 
 include include include
 void main() {
  char string;
  int i, c;
  clrscr();
  printf(""n Enter the first string"");
  gets(string);
  istrlen(string);
  stringi;
  for (istringii) {
  if (stringi) {
  c;
  }
  }
  printf(""n The number of word in sentencedc"");
  getch();
 }
 
 Array of Strings: An array of strings is a two-dimensional character array. The size of the first index (rows) determines the number of strings, and the size of the second index (column) determines the maximum length of each string.
 
 Pass these to a function which reverses the second string and then appends it at the end of the first string.
 
 include include
 char rev(char name) {
  int l, j;
  char r;
  lstrlen(name);
  for (lljllj) {
  rjnamel;
  rj;
  }
  return r;
 }
 
 void display(char name1, char name2) {
  char n;
  nname;
  This copies the name address to n.
  printf(""n the copy string is sn"");
  namerev(name1);
  strcat(nname);
  printf(""n The new string issn"");
 }
 
 void main() {
  char stringstring;
  clrscr();
  printf(""n Enter the first string"");
  scanf(sstring);
  printf(""n Enter the second string"");
  scanf(sstring);
  display(stringstring, stringstring);
  getch();
 }
 
 Structure: A structure is a collection of variables (of different data types) referenced under one name, providing a convenient means of keeping related information together.
 <eos>"
file1_topic_66,"passed, array, passing, formal, argument","<task:clean> <sos>
 Passing Array To Functions Three Rules to pass an array to a function
 Function must be called by passing only the name of the array
 In the function definition the formal parameter must be an array type the size of the array does not need to be specified
 The function prototype must show that the argument in a array
 Note When an entire array is passed as an argument the contents of the array are not copied into the formal parameter array
 Instead information about the addresses of array elements are passed on to the function
 Therefore any changes introduced to the array elements are truly reflected in the original array in the calling function
 However this does not apply when an individual element is passed on argument
 The function must be called by passing only the array name
 <eos>","When passing arrays to functions, three rules must be followed. First, a function must be called by passing only the array's name. Second, in the function definition, the formal parameter must be an array type; the size of the array does not need to be specified. Third, the function prototype must indicate that the argument is an array. Note that when an entire array is passed as an argument, the array's contents are not copied into the formal parameter array. Instead, information about the addresses of array elements is passed to the function. Therefore, any changes made to the array elements are reflected in the original array within the calling function. However, this does not apply when an individual element is passed as an argument. It is crucial that the function is called by passing only the array's name."
file1_topic_67,"structure, argument, actual, copy, member","<task:clean> <sos>
 We can not initialize individual members inside the structure template
 The order of values enclosed in braces must match the order of member in the structure definition
 The first method is to pass each member of the structure as an actual argument of the function call
 The general format of sending a copy of a structure to the called function as function_name ( structure_variable_name ) The called function takes the following form data_type function_name ( Struct_type st_name ) return ( expression ) The following points are important to note
 For example if it is returning a copy of the entire structure then it must be declared as struct with an appropriate tag name
 The structure variable used as the actual argument and the corresponding formal argument in the called function must be of the same struct type
 When a function returns a structure it must be assigned to a structure of identical type in the calling function
 <eos>","We cannot initialize individual members inside the structure template.
 The order of values enclosed in braces must match the order of members in the structure definition.
 The first method is to pass each member of the structure as an actual argument of the function call.
 The general format for sending a copy of a structure to the called function is `function_name ( structure_variable_name )`. The called function takes the form `data_type function_name ( Struct_type st_name )` and returns `( expression )`. The following points are important to note:
 For example, if it returns a copy of the entire structure, it must be declared as a struct with an appropriate tag name.
 The structure variable used as the actual argument and the corresponding formal argument in the called function must be of the same struct type.
 When a function returns a structure, it must be assigned to a structure of identical type in the calling function."
file1_topic_68_0,"time, distance, struct, printf, sec","<task:clean> <sos>
 Practice Create a structure containing real and imaginary as its member
 include include struct complex int r int m void main ( ) struct complex ccc printf ( nEnter the real n imaginary for first complex ) scanf ( ddcrcm ) printf ( nEnter the real n imaginary for second complex ) scanf ( ddcrcm ) crcrcrcmcm cmcrcmcmcr printf ( nThe resultant is ) printf ( nReal is dcr ) printf ( nImaginary is dcm ) getch ( ) Structure and function There are three methods by which the values of a structure can be transferred from one function to another
 Practice Create a structure TIME containing hour minutes and seconds as its member
 Write a program the uses this structure to input start time and stop time to a function
 Which returns the sum and difference of the start time and stop time in the main program
 include include struct time int hr int min int sec void input ( struct time t ) printf ( nEnter the hr min and sec ) scanf ( dddthrtmintsec ) void display ( struct time t ) printf ( nhrdtmindtsecdtthrtmintsec ) struct time add ( struct time tstruct time t ) struct time t tsectsectsec tmintmintmin thrthrthr tmintsec tsectsec thrtmin tmintmin return t struct time sub ( struct time tstruct time t ) struct time t tsectsectsec tmintmintmin thrthrthr if ( tsec ) tmin tsec if ( tmin ) thr tmintmin return t void main ( ) struct time ttt printf ( nEnter the start time in hr min sec ) input ( t ) printf ( nEnter the stop time in hr min sec ) input ( t ) tadd ( tt ) printf ( naddition of two time is ) display ( t ) tsub ( tt ) printf ( nThe substraction of time is ) display ( t ) getch ( ) Array of Structures We use structure to describe the format of a number of related variables
 Build functions to add and subtract given distances and display the results in the main function
 <eos>","Practice: Create a structure containing 'real' and 'imaginary' as its members.
 ```c
 #include <stdio.h> // Includes assumed for standard I/O
 #include <conio.h> // Includes assumed for getch()
 
 struct complex {
  int r;
  int m;
 };
 
 void main() {
  struct complex ccc; // Original variable name preserved
  printf(""\nEnter the real and imaginary parts for the first complex number: "");
  scanf(""%d%d"", &ccc.r, &ccc.m); // Interpreted scanf arguments and format string
  printf(""\nEnter the real and imaginary parts for the second complex number: "");
  scanf(""%d%d"", &ccc.r, &ccc.m); // Interpreted scanf arguments; reusing ccc indicates potential overwrite in original logic
  ccc.r = crcrcrcmcm; // Garbled code interpreted as assignment for syntactic validity
  ccc.m = cmcrcmcmcr; // Garbled code interpreted as assignment for syntactic validity
  printf(""\nThe resultant is: "");
  printf(""\nReal is: %d"", ccc.r); // Interpreted dcr as ccc.r
  printf(""\nImaginary is: %d"", ccc.m); // Interpreted dcm as ccc.m
  getch();
 }
 ```
 Structure and Functions: There are three methods by which the values of a structure can be transferred from one function to another.
 Practice: Create a structure 'TIME' containing 'hour', 'minutes', and 'seconds' as its members. Write a program that uses this structure to input start time and stop time to a function, which returns the sum and difference of the start time and stop time in the main program.
 ```c
 #include <stdio.h> // Includes assumed for standard I/O
 #include <conio.h> // Includes assumed for getch()
 
 struct time {
  int hr;
  int min;
  int sec;
 };
 
 void input(struct time t) {
  printf(""\nEnter the hour, minute, and second: "");
  scanf(""%d%d%d"", &t.hr, &t.min, &t.sec); // Interpreted scanf arguments and format string
 }
 
 void display(struct time t) {
  printf(""\nHour: %d, Minute: %d, Second: %d"", t.hr, t.min, t.sec); // Interpreted garbled printf
 }
 
 struct time add(struct time tstruct, struct time t) { // Preserved original parameter structure where possible
  struct time t_result; // Variable for return value
  t_result.sec = tsectsectsec; // Garbled code interpreted as assignment for syntactic validity
  t_result.min = tmintmintmin; // Garbled code interpreted as assignment for syntactic validity
  t_result.hr = thrthrthr; // Garbled code interpreted as assignment for syntactic validity
  tmintsec tsectsec thrtmin tmintmin; // Remaining garbled code as a separate statement
  return t_result;
 }
 
 struct time sub(struct time tstruct, struct time t) { // Preserved original parameter structure where possible
  struct time t_result; // Variable for return value
  t_result.sec = tsectsectsec; // Garbled code interpreted as assignment for syntactic validity
  t_result.min = tmintmintmin; // Garbled code interpreted as assignment for syntactic validity
  t_result.hr = thrthrthr; // Garbled code interpreted as assignment for syntactic validity
  if (tsec) t_result.min = tmin - tsec; // Interpreted conditional garbled logic for syntactic validity
  if (tmin) t_result.hr = thr - tmintmin; // Interpreted conditional garbled logic for syntactic validity
  return t_result;
 }
 
 void main() {
  struct time ttt; // Original variable name preserved
  printf(""\nEnter the start time in hour, minute, second: "");
  input(ttt); // Using original variable name
  printf(""\nEnter the stop time in hour, minute, second: "");
  input(ttt); // Using original variable name (implies overwrite or re-use in original logic)
 
  ttt = add(ttt, ttt); // Interpreted tadd(tt) as add(ttt, ttt)
  printf(""\nAddition of two times is: "");
  display(ttt);
 
  ttt = sub(ttt, ttt); // Interpreted tsub(tt) as sub(ttt, ttt)
  printf(""\nThe subtraction of time is: "");
  display(ttt);
  getch();
 }
 ```
 Array of Structures: We use structures to describe the format of a number of related variables. Build functions to add and subtract given distances and display the results in the main function."
file1_topic_68_1,"time, distance, struct, printf, sec","<task:clean> <sos>
 include include struct distance int feet int inch void input ( struct distance d ) printf ( nEnter the feet and inches ) scanf ( dddfeetdinch ) void display ( struct distance d ) printf ( nFeetd t Inchedtdfeetdinch ) struct distance add ( struct distance dstruct distance d ) struct distance d dfeetdfeetdfeet dinchdinchdinch dfeetdinch dinchdinch return d struct distance sub ( struct distance dstruct distance d ) struct distance d dinchdinchdinch dfeetdfeetdfeet if ( dinch ) dfeetdfeet dinchdinch return d void main ( ) struct distance ttt printf ( nEnter the starting distance in feet and inches ) input ( t ) printf ( nEnter the stoping distance in feet and inches ) input ( t ) tadd ( tt ) printf ( naddition of two time is ) display ( t ) tsub ( tt ) printf ( nThe substraction of time is ) display ( t ) getch ( ) Nested Structure Structure within a structure means nesting of structure
 <eos>","A `struct distance` is defined with integer members for feet and inches. A `void input` function, taking a `struct distance d`, prompts the user to 'Enter the feet and inches' and then scans for the input values. A `void display` function, also taking a `struct distance d`, prints the distance in the format 'Feet: [value] Inches: [value]'. The `struct distance add` function accepts two `struct distance` arguments and returns a `struct distance`, calculating the sum of feet and inches. Similarly, the `struct distance sub` function takes two `struct distance` arguments, returns a `struct distance`, and calculates the difference between feet and inches, with a conditional adjustment for inches. In the `void main` function, `struct distance` variables are declared. The program prompts for and inputs a 'starting distance' in feet and inches, and subsequently a 'stopping distance' in feet and inches. The `add` function is then called using these distances, and the result is displayed with the label 'addition of two time is'. Following this, the `sub` function is called, and its result is displayed with 'The subtraction of time is'. Finally, `getch()` is called. The text concludes by defining a nested structure as a 'structure within a structure'."
file1_topic_69,"nonzero, file, pointer, specified, subsequently","<task:clean> <sos>
 This pointer which contains all the information about the file is subsequently used as a communication link between the system and the program
 It take a FILE pointer as its only argument and returns a nonzero integer value if all the data from the specified file has been read and return a nonzero integer value if all of the data form the specified file has been read and return zero otherwise
 It fp is a pointer to file that has just been opened for reading then the statement
 This means that n bytes have already been read ( or written )
 <eos>","This pointer, which contains all the information about the file, is subsequently used as a communication link between the system and the program.
 It takes a FILE pointer as its only argument and returns a nonzero integer value if all the data from the specified file has been read, and returns zero otherwise.
 If 'fp' is a pointer to a file that has just been opened for reading, then the statement...
 This means that 'n' bytes have already been read (or written)."
file1_topic_70,"rewind, file, remember, position, achieved","<task:clean> <sos>
 In this mode FILE pointer points to the starting of bite of file
 Random access to files This can be achieved with the help of the function fseek ftell and rewind available in IO library
 Rewind takes a file pointer and resets the position to the start of the file
 rewind nd ( fp ) nfte ( fp ) Would assign to n because the file position has been set to the start of the file be rewind
 Remember the first byte in the file is numbered as second as and so on
 Remember that whenever a file is opened for reading or writing a rewind is done implicitly
 <eos>","In this mode, the file pointer points to the start of the file. Random access to files can be achieved with the help of the functions `fseek`, `ftell`, and `rewind`, which are available in the I/O library. `rewind` takes a file pointer and resets its position to the start of the file. Executing `rewind(fp)` followed by `n = ftell(fp)` would set `n` to the file's starting position, as `rewind` resets the file pointer to the start of the file. Remember that the first byte in the file is numbered, followed by the second, and so on. Remember that whenever a file is opened for reading or writing, an implicit rewind is performed."
file1_topic_71,"error, fail, behave, typical, premature","<task:clean> <sos>
 Error handling during IO operation It is possible that an error may occur during IO operations on a file
 Typical error situation include
 If we fail to check such read and write errors a program may behave abnormally when an error occurs
 An unchecked error may result in premature termination of the program or incorrect output
 <eos>","Regarding error handling during I/O operations, it is possible that an error may occur during I/O operations on a file. Typical error situations include: If we fail to check such read and write errors, a program may behave abnormally when an error occurs. An unchecked error may result in premature termination of the program or incorrect output."
file1_topic_72,"ferror, feof, message, error, end","<task:clean> <sos>
 We have two statusinquiry library functions feof and ferror that can help up detect IO errors in the file
 The feof function can be used to test for an end of file condition
 if ( feof ( fp ) ) printf ( End of data ) would display the message End of data on reaching the end of file condition
 The ferror function report the status of the file indicated
 It also takes a FILE pointer as its argument and returns a nonzero integer if an error has been detected up to that point during processing
 The statement if ( ferror ( fp ) ) printf ( An error has occurred ) Would print the error message if the reading is no successful
 <eos>","We have two status-inquiry library functions, feof and ferror, that can help us detect I/O errors during file operations. The feof function can be used to test for an end-of-file condition. if ( feof ( fp ) ) printf ( End of data ) would display the message End of data on reaching an end-of-file condition. The ferror function reports the status of the indicated file. It also takes a FILE pointer as its argument and returns a non-zero integer if an error has been detected during processing up to that point. The statement if ( ferror ( fp ) ) printf ( An error has occurred ) would print the error message if the reading is not successful."
file1_topic_73,"goes, computed, nnnk, control, destination","<task:clean> <sos>
 The general form is GO TO n where n is the statement number to which the control must be transferred
 The blank between GO and TO is optional
 GO TO In the GO TO statement the number referenced can not be a variable example GO TO I is not valid
 Computed GO TO statement The computed GO TO statement cause the transfer of control depending upon value of an integer variable
 the destination ( where to go ) is decided by the value in the integer variable
 the general form is GO TO ( nnnk ) i where i is the integer variable nnnk are statement numbers
 If the value is negative the control goes to statement number n if it is zero it goes to n and if it is positive it goes to n
 <eos>","The general form is `GO TO n`, where `n` is the statement number to which control must be transferred. The blank between `GO` and `TO` is optional. In the `GO TO` statement, the number referenced cannot be a variable; for example, `GO TO I` is not valid. Computed `GO TO` statement: The computed `GO TO` statement causes the transfer of control depending on the value of an integer variable. The destination (where to go) is decided by the value in the integer variable. The general form is `GO TO (nnnk) i`, where `i` is the integer variable, and `nnnk` are statement numbers. If the value is negative, control goes to statement number `n`; if it is zero, it goes to `n`; and if it is positive, it goes to `n`."
file1_topic_74,"implied, read, print, continue, loop","<task:clean> <sos>
 CHARACTER statement Practice Write a program to find the range from the list of element using array in FORTRAN
 C RANGE OF MATRIX INTEGER A ( ) LS PRINT ENTER THE ELEMENT TO ARRAY DO I READ A ( I ) CONTINUE LA ( ) SA ( ) DO I IF ( LLTA ( I ) ) THEN LA ( I ) ENDIF IF ( SGTA ( I ) ) THEN SA ( I ) ENDIF CONTINUE PRINT LAGREST ELEMENTL PRINT SMALEST ELEMENTS PRINT RANGELS STOP END IMPLIED DO loop Suppose we want to read all the entries of a one dimensional array A with array length
 INTEGER A ( ) DO I READ A ( I ) CONTINUE FORTRAN also has the facility of reading or writing the entire array with one statement
 READ ( ) ( A ( I ) I ) Similarly the following is the implied DO loop to print the elements of the array
 C ASCENDING ORDER OF MATRIX INTEGER A ( ) TEMP PRINT ENTER THE ELEMENT TO ARRAY READ ( ) ( A ( I ) I ) DO I DO JI IF ( A ( I ) GTA ( J ) ) THEN TEMPA ( I ) A ( I ) A ( J ) A ( J ) TEMP ENDIF CONTINUE PRINT THE ELEMENT TO ARRAY WRITE ( ) ( A ( I ) I ) STOP END Implied DO loop for multidimensional array The implied DO loop can also be used for multidimensional arrays
 INTEGER A ( ) DO I DO J READ A ( IJ ) CONTINUE But we can use the implied DO loop and write this as a single statements as follows
 READ ( ) ( ( A ( IJ ) J ) I ) Notice that the outer loop has I as running variable and the inner loop has J
 <eos>","As a practice with `CHARACTER` statements, a program can be written to find the range from a list of elements using an array in FORTRAN. This program, labeled `C RANGE OF MATRIX`, includes an `INTEGER A ( )` declaration. It executes the line `LS PRINT ENTER THE ELEMENT TO ARRAY` and then reads them using a `DO I READ A ( I ) CONTINUE` loop. Variables `LA ( )` and `SA ( )` are declared, and another `DO I` loop follows, containing conditional statements: `IF ( LLTA ( I ) ) THEN LA ( I ) ENDIF` and `IF ( SGTA ( I ) ) THEN SA ( I ) ENDIF`. After processing, it prints `LAGREST ELEMENTL`, `SMALEST ELEMENTS`, and `RANGELS`, concluding with `STOP END`. Regarding implied DO loops, suppose the goal is to read all entries of a one-dimensional array `A` with array length. The explicit loop for this would be `INTEGER A ( ) DO I READ A ( I ) CONTINUE`. FORTRAN also offers the facility for reading or writing an entire array with a single statement, such as `READ ( ) ( A ( I ) I )`. Similarly, an implied DO loop can be used to print the elements of an array. A program demonstrating `C ASCENDING ORDER OF MATRIX` declares `INTEGER A ( )` and `TEMP`. It prompts the user with `PRINT ENTER THE ELEMENT TO ARRAY` and reads input using `READ ( ) ( A ( I ) I )`. Nested `DO I DO JI` loops are employed, containing the conditional `IF ( A ( I ) GTA ( J ) ) THEN` and the operations `TEMPA ( I ) A ( I ) A ( J ) A ( J ) TEMP ENDIF CONTINUE`. Finally, it prints `PRINT THE ELEMENT TO ARRAY` and writes the array using `WRITE ( ) ( A ( I ) I )`, concluding with `STOP END`. The implied DO loop can also be utilized for multidimensional arrays. For instance, an explicit nested loop is `INTEGER A ( ) DO I DO J READ A ( IJ ) CONTINUE`. However, this can be written as a single statement using an implied DO loop, as follows: `READ ( ) ( ( A ( IJ ) J ) I )`. Notably, the outer loop uses `I` as its running variable, while the inner loop uses `J`."
file2_topic_75,"problem, solving, steps, solve, analyse","<task:clean> <sos>
 Problem is defined as the difference between an existing situation and a desired situation that is in accordance with calculation a problem is numerical situation and has complex form
 If a problem is solved by computing using machine called computer then such process is called Problem Solving using Computer
 Problem Analysis If you have studied a problem statement then you must analyse the problem and determine how to solve it
 First you should know the type of problem that is nature of problem
 At first you try to solve manually
 If it is solvable manually by using your idea and knowledge then you can use such idea and principle in programming and solve the problem by using computer
 So you must have well knowledge about a problem
 In order to get exact solution you must analyse the problem
 To analyse means you should try to know the steps that lead you to have an exact solution
 Suppose you are asked by your father to solve an arithmetic problem and you are not familiar with the steps involved in solving that problem
 In such a situation you will not be able to solve the problem
 Suppose you know the steps to be followed for solving the given problem but while solving the problem you forget to apply some steps or you apply the calculation steps in the wrong sequences
 What is a Problem
 Why do we need documentation and testing for problem solving
 Generally a difficult problem is divided into sub problems and then solved
 The solution of the problem is built on the results from the smaller versions
 They are Problem could be written or defined in terms of its previous result
 <eos>","A problem is defined as the difference between an existing situation and a desired situation that is in accordance with a calculation. Such a problem is a numerical situation and has a complex form. If a problem is solved by computing using a machine called a computer, then such a process is called problem solving using a computer. For problem analysis, if you have studied a problem statement, you must analyze the problem and determine how to solve it. First, you should know the type of problem, that is, the nature of the problem. First, try to solve it manually. If it is solvable manually using your ideas and knowledge, then you can apply such ideas and principles in programming and solve the problem using a computer. Therefore, you must have thorough knowledge about a problem. In order to get an exact solution, you must analyze the problem. To analyze means you should identify the steps that lead to an exact solution. Suppose your father asks you to solve an arithmetic problem, and you are not familiar with the steps involved in solving that problem. In such a situation, you will not be able to solve the problem. Suppose you know the steps to follow for solving the given problem, but while solving the problem, you forget to apply some steps or you apply the calculation steps in the wrong sequence. What is a Problem? Why do we need documentation and testing for problem solving? Generally, a difficult problem is divided into sub-problems and then solved. The solution to the problem is built upon the results from the smaller versions. They are. A problem could be written or defined in terms of its previous result."
file2_topic_76,"errors, wrong, computer, programmers, occur","<task:clean> <sos>
 In programming point of view the problem must be computing
 Obviously you will get a wrong answer
 Similarly while writing a computer program if the programmer leaves out some of the instructions for the computer or writes the instructions in the wrong sequences then the computer will calculate a wrong answer
 Generally programmers commit three types of errorsThey are
 Runtime errors Syntax errors are those errors which are arised from violating the rules of programming languageOn encountering these errors a computer displays error messageIt is easy to debugLogic errors are those which arised when programmers proceed the logic process in wrong way or miss the some statementsIt is difficult to debug such errors because the computer does not display themRuntime errors are those which occur when programmers attempt to run ambiguous instructionsThey occur due to infinte loop statementdevice errorssofware errors etcThe computer will print the error message Some of runtime errors are Divide by zero Null pointer assignment Data over flow Testing is the process of reviewing and executing a program with the intent of detecting errors
 The purpose of this material is to introduce certain basic concept and to provide some necessary definitions
 <eos>","From a programming point of view, the problem must be computable. Obviously, you will get a wrong answer. Similarly, when writing a computer program, if the programmer omits some instructions for the computer or writes them in the wrong sequence, the computer will calculate a wrong answer. Generally, programmers commit three types of errors. They are Runtime errors. Syntax errors are those errors which arise from violating the rules of a programming language. On encountering these errors, a computer displays an error message. They are easy to debug. Logic errors are those which arise when programmers proceed with the logic process in the wrong way or miss some statements. It is difficult to debug such errors because the computer does not display them. Runtime errors are those which occur when programmers attempt to run ambiguous instructions. They occur due to infinite loop statements, device errors, software errors, etc. The computer will print the error message. Some runtime errors include: Divide by zero, null pointer assignment, and data overflow. Testing is the process of reviewing and executing a program with the intent of detecting errors. The purpose of this material is to introduce certain basic concepts and to provide some necessary definitions."
file2_topic_77,"instruction, computer, programming, sequence, language","<task:clean> <sos>
 The same principle applies to writing computer program also
 A programmer can not write the instruction to be followed by a computer unless the programmer knows how to solve the problem manually
 Thus to produce an effective computer program it is necessary that the programmers write each and every instruction in the proper sequence
 However the instruction sequence ( logic ) of a computer program can be very complex
 Hence in order to ensure that the program instructions are appropriate for the problem and are in correct sequence program must be planned before they are written
 Coding In order to make a program in any programming language what we have written is known as code
 The act of writing code in a computer language is known as coding
 In other words code is a set of instruction that a computer can understand
 Compilation Execution The process by which source codes of a computer ( programming ) language are translated into machine codes is known as compilation
 A programming language is designed to help process certain kinds of data consisting of numbers characters and strings and to provide useful output known as information
 The task of programming of data is accomplished by executing a sequence of precise instruction called a program
 Normally however this is not done as it is considered a poor programming practice
 <eos>","The same principle also applies to writing computer programs. A programmer cannot write the instructions to be followed by a computer unless they know how to solve the problem manually. Thus, to produce an effective computer program, it is necessary that programmers write each instruction in the proper sequence. However, the instruction sequence (logic) of a computer program can be very complex. Hence, in order to ensure that the program instructions are appropriate for the problem and are in the correct sequence, the program must be planned before it is written. Regarding coding, the text written to create a program in any programming language is known as code. The act of writing code in a computer language is known as coding. In other words, code is a set of instructions that a computer can understand. Regarding compilation and execution, the process by which source code of a computer programming language is translated into machine code is known as compilation. A programming language is designed to help process certain kinds of data, consisting of numbers, characters, and strings, and to provide useful output, known as information. The task of programming data is accomplished by executing a sequence of precise instructions called a program. Normally, however, this is not done, as it is considered a poor programming practice."
file2_topic_78,"algorithm, characteristics, posses, prepare, formally","<task:clean> <sos>
 Algorithm Development Flowcharting The term algorithm may be formally defined as a sequence of instructions designed in such a way that if the instructions are executed in the specified sequence the desired result will be obtained
 An algorithm must posses the following characteristics
 Normally an algorithm is first represented in the form of a flowchart and the flowchart is then expressed in some programming language to prepare a computer program
 Define algorithm and flowchart
 Differentiate between the flow chart and algorithm with the example
 <eos>","Algorithm Development Flowcharting. The term algorithm may be formally defined as a sequence of instructions designed in such a way that if the instructions are executed in the specified sequence, the desired result will be obtained. An algorithm must possess the following characteristics. Normally, an algorithm is first represented in the form of a flowchart, and the flowchart is then expressed in some programming language to prepare a computer program. Define algorithm and flowchart. Differentiate between the flowchart and algorithm with the example."
file2_topic_79,"instruction, infinitely, noted, unambiguous, strictly","<task:clean> <sos>
 Each and every instruction should be precise and unambiguous
 Each instruction should be such that it can be performed in a finite time
 One or more instruction should not be repeated infinitely
 It may also be noted that in order to solve a given problem each and every instruction must be strictly carried out in a particular sequence
 <eos>","<sos>
 Each instruction should be precise and unambiguous. Each instruction should be performable in a finite time. One or more instructions should not be repeated infinitely. It may also be noted that, in order to solve a given problem, each instruction must be strictly carried out in a particular sequence.
 <eos>"
file2_topic_80,"students, examination, roll, obtained, subjects","<task:clean> <sos>
 Problem There are students in a class who appeared in their final examination
 Their mark sheets have been given to you
 Problem A student appears in an examination that consists of total subjects each subject having maximum marks of
 The roll number of the students his name and the marks obtained by him in various subjects is supplied as input data
 Draw a flowchart for the algorithm to calculate the percentage marks obtained by the student in this examination and then to print it along with his roll number and name
 Display the name and roll no of those students mark is greater than
 Write a program to read several different names roll address percentage and display name who has score the rd highest
 Feed the marks obtained by three students in each subjects and calculate the total of each student
 Write a program to enter name roll and mark of students and store them in the file
 ( PU ) Write a program to create a data files containing record roll number and students name and total marks
 <eos>","Problem: There are students in a class who appeared in their final examination. Their mark sheets have been given to you. Problem: A student appears in an examination that consists of a total number of subjects, with each subject having a specific maximum mark. The roll number of the student, his name, and the marks obtained by him in various subjects are supplied as input data. Draw a flowchart for the algorithm to calculate the percentage marks obtained by the student in this examination and then to print them along with his roll number and name. Display the name and roll number of those students whose mark is greater than a certain threshold. Write a program to read several different names, roll numbers, addresses, and percentages, and display the name of the student who has scored the 3rd highest. Feed the marks obtained by three students in each subject and calculate the total for each student. Write a program to enter the names, roll numbers, and marks of students and store them in a file. (PU) Write a program to create a data file containing records of roll number, student's name, and total marks."
file2_topic_81,"step, total, mark, division, sheet","<task:clean> <sos>
 Write an algorithm to calculate and print the total number of students who passed in first division
 Algorithm Step Initialize Total First Division and Total Mark sheet checked to zero ie
 total_first_div total_marksheet_chkd Step Take the mark sheet of the next student
 Step Check the division column of the mark sheet to see if it is I if no go to step
 Step Add to Total First Division ie
 total_first_div Step Add to Total Mark sheets checked ie
 total_marksheet_chkd Step Is Total Mark sheets checked if no go to step Step Print Total First Division
 <eos>","To calculate and print the total number of students who passed in first division, an algorithm should first initialize `total_first_div` (Total First Division) and `total_marksheet_chkd` (Total Mark sheets checked) to zero. Next, it should take a student's mark sheet and check the 'division' column to determine if it is 'I'. If it is 'I', `total_first_div` is incremented. Regardless, `total_marksheet_chkd` is incremented. This process continues until all mark sheets have been checked. Finally, the value of `total_first_div` is printed."
file2_topic_82,"flowchart, logic, pictorial, drawing, flow","<task:clean> <sos>
 Flowchart A flowchart is a pictorial representation of an algorithm that uses boxes of different shapes to denote different types of instructions
 The main advantage of this two steps approach in program writing is that while drawing a flowchart one is not concerned with the details of the elements of programming language
 Since a flowchart shows the flow of operations in pictorial form any error in the logic of the procedure can be detected more easily than in the case of a program
 Once the flowchart is ready the programmer can forget about the logic and can concentrate only on coding the operations in each box of the flowchart in terms of the statements of the programming language
 A flowchart therefore is a picture of the logic to be included in the computer program
 Experienced programmers sometimes write programs without drawing the flowchart
 However for a beginner it is recommended that a flowchart be drawn first in order to reduce the number of errors and omissions in the program
 It is a good practice to have a flowchart along with a computer program because a flowchart is very helpful during the testing of the program as well as while incorporating further modifications in the program
 The communication of program logic through flowcharts is made easier through the use of symbols that have standardized meanings
 The normal flow of flowchart is from top to bottom and left to right
 Connector If a flowchart becomes very long the flowlines start crisscross at many places that causes confusion and reduces understandability of the flowchart
 What is flow charting describe its importance
 What is a flowchart
 <eos>","<sos>
 A flowchart is a pictorial representation of an algorithm that uses boxes of different shapes to denote different types of instructions. The main advantage of this two-step approach in program writing is that, while drawing a flowchart, one is not concerned with the details of the elements of a programming language. Since a flowchart shows the flow of operations in pictorial form, any error in the logic of the procedure can be detected more easily than in the case of a program. Once the flowchart is ready, the programmer can forget about the logic and can concentrate only on coding the operations in each box of the flowchart in terms of the statements of the programming language. A flowchart, therefore, is a picture of the logic to be included in the computer program. Experienced programmers sometimes write programs without drawing a flowchart. However, for a beginner, it is recommended that a flowchart be drawn first in order to reduce the number of errors and omissions in the program. It is good practice to have a flowchart along with a computer program because a flowchart is very helpful during the testing of the program as well as while incorporating further modifications in the program. The communication of program logic through flowcharts is made easier through the use of symbols that have standardized meanings. The normal flow of a flowchart is from top to bottom and left to right. Connector: If a flowchart becomes very long, the flowlines start crisscrossing at many places, which causes confusion and reduces the understandability of the flowchart. What is flowcharting? Describe its importance. What is a flowchart?
 <eos>"
file2_topic_83,"flowlines, symbols, arrowheads, flowchart, good","<task:clean> <sos>
 Flowchart Symbols A flowchart uses boxes of different shapes to denote different types of instructions
 Only a few symbols are needed to indicate the necessary operations in a flowchart
 Flowlines Flowlines with arrowheads are used to indicate the flow of operations that is the exact sequence in which the instructions are to be executed
 Arrowheads are required only when the normal top to bottom flow is not to be followed
 However as a good practice and in order to avoid ambiguity flowlines are usually drawn with an arrowhead at the point of entry to a symbol
 Good practice also dictates that flowlines should not cross each other and that such intersections should be avoided whenever possible
 What are the various symbols used to a flowchart
 List the various commonly used flowchart symbols
 <eos>","Flowchart Symbols: A flowchart uses boxes of different shapes to denote different types of instructions. Only a few symbols are needed to indicate the necessary operations in a flowchart. Flowlines: Flowlines with arrowheads are used to indicate the flow of operations, which is the exact sequence in which the instructions are to be executed. Arrowheads are required only when the normal top-to-bottom flow is not to be followed. However, as a good practice and in order to avoid ambiguity, flowlines are usually drawn with an arrowhead at the point of entry to a symbol. Good practice also dictates that flowlines should not cross each other and that such intersections should be avoided whenever possible. What are the various symbols used in a flowchart? List the various commonly used flowchart symbols."
file2_topic_84,"true, operands, logic, result, false","<task:clean> <sos>
 For example a diamond always means a decision
 it causes an expression that is originally true to become false and viceversa
 The result of a logic and operation will be true only if both operands are true where as the result of a logic or operation will be true if either operand is true or if both operands are true
 In other word the result of a logic or operation will be false only if both operands are false
 <eos>","For example, a diamond always means a decision. It causes an expression that is originally true to become false, and vice versa. The result of a logic AND operation will be true only if both operands are true, whereas the result of a logic OR operation will be true if either operand is true or if both operands are true. In other words, the result of a logic OR operation will be false only if both operands are false."
file2_topic_85,"inputoutput, input, terminal, device, output","<task:clean> <sos>
 These symbols are listed below Terminal InputOutput Processing Terminal The terminal symbol as the name implies is used to indicate the beginning ( START ) ending ( STOP ) and pauses ( HALT ) in the program logic flow
 InputOutput The inputoutput symbol is used to denote any function of an inputoutput device in the program
 If there is a program instruction to input data from a disk tape cardreader terminal or any other type of input device that step will be indicated in the flowchart with an inputoutput symbol
 Similarly all output instructions whether it is output on a printer magnetic tape magnetic disk terminal screen or any output device are indicated in the flowchart with an inputoutput symbol
 The data that is given to a program is known as input data
 Similarly the data that is provided by a program is known as output data
 Generally input data is given to a program from a keyboard ( a standard input device ) or a file
 The program then proceeds the input data and the result is displayed on the screen ( monitor a standard output device ) or a file
 Reading input data from keyboard and displaying the output data on screen such input output system is considered as conio input out
 Input Output Fig Input Output To perform inputoutput operation in console mode C has a number of input and output functions
 When a program needs data it takes the data through the input functions and sends the results to output devices through the output functions
 Thus the inputoutput functions are the link between the user and the terminal
 As keyboard is a standard input device the input functions used to read data from keyboard are called standard input functions
 So its work is merely to hold the output screen until a key is pressed
 Describe any two file handling inputoutput function
 <eos>","These symbols are listed below: Terminal, Input/Output, Processing, Terminal. The terminal symbol, as the name implies, is used to indicate the beginning (START), ending (STOP), and pauses (HALT) in the program logic flow.
 
 Input/Output. The input/output symbol is used to denote any function of an input/output device in the program. If there is a program instruction to input data from a disk, tape, card reader, terminal, or any other type of input device, that step will be indicated in the flowchart with an input/output symbol. Similarly, all output instructions, whether it is output on a printer, magnetic tape, magnetic disk, terminal screen, or any other output device, are indicated in the flowchart with an input/output symbol.
 
 The data that is given to a program is known as input data. Similarly, the data that is provided by a program is known as output data. Generally, input data is given to a program from a keyboard (a standard input device) or a file. The program then processes the input data, and the result is displayed on the screen (monitor, a standard output device) or a file.
 
 Reading input data from keyboard and displaying output data on screen, such an input/output system is considered conio. Input/Output (Fig Input/Output). To perform input/output operations in console mode, C has a number of input and output functions. When a program needs data, it takes the data through the input functions and sends the results to output devices through the output functions. Thus, the input/output functions are the link between the user and the terminal. As keyboard is a standard input device, the input functions used to read data from keyboard are called standard input functions. So, its work is merely to hold the output screen until a key is pressed. Describe any two file handling input/output functions."
file2_topic_86,"executed, order, consecutively, enable, computations","<task:clean> <sos>
 When more than one arithmetic and data movement instructions are to be executed consecutively they are normally placed in the same processing box and they are assumed to be executed in the order of their appearance
 In the absence of control statements the instruction or statements are executed in the same order in which they appear in the program
 So control statements enable use to specify the order in which various instruction in the program are to be executed
 This process is used for repetitive computations in which each action is stated in term of previous result
 ) Increasing the execution speed as they refer address
 <eos>","When arithmetic and data movement instructions are to be executed consecutively, they are normally placed in the same processing box and are assumed to be executed in the order of their appearance. In the absence of control statements, instructions are executed in the same order in which they appear in the program. So, control statements enable us to specify the order in which various instructions in the program are to be executed. This process is used for repetitive computations in which each action is stated in terms of the previous result. This also increases execution speed, as instructions refer to addresses."
file2_topic_87,"testing, based, inspection, manual, codes","<task:clean> <sos>
 Testing can be done manually and computer based testing
 Manual Testing is an effecting errordetection process and is done before the computer based testing begins
 Manual testing includes code inspection by the programmer code inspection by a test group and a review by a peer group
 Computer based testing is done by computer with the help of compiler ( a program that changes source codes into machine codes word by word )
 <eos>","Testing can be done manually and via computer-based testing. Manual testing is an effective error-detection process and is performed before computer-based testing begins. Manual testing includes code inspection by the programmer, code inspection by a test group, and a review by a peer group. Computer-based testing is performed by a computer with the help of a compiler (a program that changes source codes into machine codes word by word)."
file2_topic_88,"documentation, internal, define, explanatory, comments","<task:clean> <sos>
 Program Documentation Program Documentation refers to the details that describe a programWhile writng programs it is good programming practice to make a brief explanatory note on the programor program segmentThis explanatory note is called commentIt explains how the program works and interact with itThus it helps other programmers to understand the programThere are two types of documentation Internal documentation Some details may be builtin as an integral part of the program
 These are known as internal documentation
 Two important aspects of internal documentation are selection of meaningful variable names and the use of comments
 For example Area Breadth Length is more meaningful than A B L And comments are used to describe actions parts and identification in a program
 External documentation is an executable statement in a programIt may be message to the user to respond to the program requirementThis is accomplished using output statements It makes a program more attractive and interactiveSome examples are print Input the number one by one print Do you want to continue Some Important Questions
 This section consists two parts declaration part and executable part
 For example define TAXRATE define PI define TRUE define FALSE define FRIEND Susan area PI radius radius is equivalent to Some Important Questions
 It can also be defined as a section of a program performing a specific task
 It may be auto static extern and register It is optional
 <eos>","Program documentation refers to the details that describe a program. While writing programs, it is good programming practice to make a brief explanatory note on the program or program segment. This explanatory note is called a comment. It explains how the program works and how to interact with it. Thus, it helps other programmers to understand the program. There are two types of documentation: Internal documentation. Some details may be built-in as an integral part of the program.
 These are known as internal documentation.
 Two important aspects of internal documentation are the selection of meaningful variable names and the use of comments.
 For example, 'Area', 'Breadth', 'Length' are more meaningful than 'A', 'B', 'L'. And comments are used to describe actions, parts, and identification within a program.
 External documentation is an executable statement in a program. It may be a message to the user to respond to the program requirement. This is accomplished using output statements. It makes a program more attractive and interactive. Some examples are: 'print ""Input the number one by one""', 'print ""Do you want to continue""'. Some Important Questions.
 This section consists of two parts: a declaration part and an executable part.
 For example, 'define TAXRATE', 'define PI', 'define TRUE', 'define FALSE', 'define FRIEND Susan', and 'area = PI * radius * radius' are equivalent to 'Some Important Questions'.
 It can also be defined as a section of a program performing a specific task.
 It may be 'auto', 'static', 'extern', and 'register'. It is optional."
file2_topic_89,"unix, operating, developed, language, level","<task:clean> <sos>
 C contains additional features that allow it to be used at a lower level thus bridging the gap between machine language and the more conventional high level language
 This flexibility allows C to be used for system programming ( eg
 The new language was named C Since it was developed along with the UNIX operating system it is strongly associated with UNIX
 This operating system was developed at Bell Laboratories and was coded almost entirely in C C was used mainly in academic environments for many years but eventually with the release of C compiler for commercial use and the increasing popularity of UNIX it began to gain widespread support among compiler professionals
 Today C is running under a number of operating systems including MsDOS
 In fact many of the C compilers available in the market are written in C Programs written in C are efficient and fast
 C is highly portable
 This means that C programs written for one computer can be seen on another with little or no modification
 Portability is important if we plan to use a new computer with a different operating system
 Another important feature of C is its ability to extend itself
 These computers often have small amounts of storage within the CPU itself where data can be stored and accessed quickly
 <eos>","<task:clean> <sos>
 C contains additional features that allow it to be used at a lower level, thereby bridging the gap between machine language and more conventional high-level languages. This flexibility allows C to be used for system programming (e.g.). The new language was named C. Since it was developed along with the UNIX operating system, it is strongly associated with UNIX. This operating system was developed at Bell Laboratories and was coded almost entirely in C. C was used mainly in academic environments for many years, but eventually, with the release of C compilers for commercial use and the increasing popularity of UNIX, it began to gain widespread support among compiler professionals. Today, C is running under a number of operating systems, including MS-DOS. In fact, many of the C compilers available in the market are written in C. Programs written in C are efficient and fast. C is highly portable. This means that C programs written for one computer can be seen on another with little or no modification. Portability is important if we plan to use a new computer with a different operating system. Another important feature of C is its ability to extend itself. These computers often have small amounts of storage within the CPU itself, where data can be stored and accessed quickly.
 <eos>"
file2_topic_90,"language, suited, programming, high, builtin","<task:clean> <sos>
 It also resembles other high level structure programming language such as Pascal and Fortran
 B language was modified by Dennis Ritchie and was implemented at Bell Laboratories in
 It is a robust language whose rich set of builtin functions and operators can be used of builtin functions and operators can be used to write any complex program
 The C compiler combines the capabilities of an assemble language with the features of a highlevel language and therefore it well suited for writing both system software and business packages
 It is many times faster than BASIC ( Beginners All Purpose Symbolic Instruction Code a high level programming language )
 C Language is well suited for structure programming thus requiring the user to think of a problem in terms of function modules or blocks
 <eos>","It also resembles other high-level structured programming languages, such as Pascal and Fortran. The B language was modified by Dennis Ritchie and implemented at Bell Laboratories. It is a robust language whose rich set of built-in functions and operators can be used to write any complex program. The C compiler combines the capabilities of an assembly language with the features of a high-level language, and therefore it is well suited for writing both system software and business packages. It is many times faster than BASIC (Beginner's All-Purpose Symbolic Instruction Code, a high-level programming language). The C language is well suited for structured programming, thus requiring the user to think of a problem in terms of function modules or blocks."
file2_topic_91,"collection, functions, modules, divided, task","<task:clean> <sos>
 A proper collection of these modules would make a complete program
 A C program is basically a collection of functions that are supported by the C library
 With the availability of a large number of functions the programming task becomes simple
 Basic Structure of C programs Every C program consists one or more modules called function
 Every C program can be though of as a collection of these functions
 Each program has one or more functions
 A program can be divided into functions each of which performs some specific task
 So the use of C functions modularizes and divides the work of a program
 Types of Functions C program has two types of functions
 A complex C program can be divided into a number of user defined functions
 <eos>","A proper collection of these modules makes a complete program. A C program is essentially a collection of functions supported by the C library. With the availability of a large number of functions, the programming task becomes simple. Every C program, in its basic structure, consists of one or more modules called functions. Every C program can be thought of as a collection of these functions. Each program has one or more functions. A program can be divided into functions, each of which performs a specific task. Thus, the use of C functions modularizes and divides the work of a program. Regarding function types, a C program has two types of functions. A complex C program can be divided into a number of user-defined functions."
file2_topic_92,"global, variables, local, outside, life","<task:clean> <sos>
 Such variables are called global variables and are declared in global declaration section that is outside of all the function
 The local variables are created when the function is called and destroyed automatically when the function is exited
 Life time The period of time during which memory is associated with a variable is called the Program to illustrate local variable long int fact ( int n ) int i long int f for ( i in i ) f i return ( f ) main ( ) int num clrscr ( ) printf ( Enter a number ) scamf ( d num ) printf ( The factorial of d is ld num fact ( num ) ) Output Enter a number The factorial of is Global Variables ( External ) The variables that are defined outside any function are called global variables
 All functions in the program can access and modify global variables
 IT is useful to declare a variable global if it is to be used by many functions in the program
 The life time is as long as the programs execution does not come to an end
 What are local and global variables
 <eos>","Such variables are called global variables and are declared in the global declaration section, which is outside of all functions. Local variables are created when the function is called and destroyed automatically when the function is exited. Life time: The period of time during which memory is associated with a variable is called its lifetime. Program to illustrate a local variable: `long int fact ( int n ) { int i; long int f = 1; for ( i = 1; i <= n; i++ ) { f *= i; } return ( f ); } main ( ) { int num; clrscr ( ); printf ( ""Enter a number: "" ); scanf ( ""%d"", &num ); printf ( ""The factorial of %d is %ld\n"", num, fact ( num ) ); }` Output: `Enter a number: [User input] The factorial of [number] is [result]`. Global Variables (External): The variables that are defined outside any function are called global variables. All functions in the program can access and modify global variables. It is useful to declare a variable global if it is to be used by many functions in the program. The lifetime is as long as the program's execution does not come to an end. What are local and global variables?"
file2_topic_93,"semicolon, executable, declaration, variables, declares","<task:clean> <sos>
 The declaration part declares all the variables used in the executable part
 All the statements in the declaration and executable parts ends with a semicolon
 The type declaration will apply throughout the program
 Declarations A declaration associates a group of variables with a specific data type
 All variables must be declared before they can appear in executable statements
 A declaration consists of a data type followed by one or more variable names ending with a semicolon
 The userdefined data type identifier can later be used to declare variables
 It doesnt require semicolon
 <eos>","The declaration part declares all variables used in the executable part.
 All statements in the declaration and executable parts end with a semicolon.
 The type declaration applies throughout the program.
 A declaration associates a group of variables with a specific data type.
 All variables must be declared before they can appear in executable statements.
 A declaration consists of a data type followed by one or more variable names, ending with a semicolon.
 The user-defined data type identifier can later be used to declare variables.
 It does not require a semicolon."
file2_topic_94,"braces, unit, closing, opening, surrounded","<task:clean> <sos>
 These two parts must appear between the opening and the closing braces
 The program execution begins at the opening braces and ends at the closing brace
 This is a logical unit composed of a number of statements grouped into a single unit
 It is a block of statements surrounded by braces
 <eos>",These two parts must appear between the opening and the closing braces. The program execution begins at the opening braces and ends at the closing braces. This is a logical unit composed of statements grouped into a single unit. It is a block of statements surrounded by braces.
file2_topic_95,"exit, jump, brace, demonstrate, inclusion","<task:clean> <sos>
 The closing brace of the main ( ) function section is the logical end of the program
 Exit ( ) function We have already known that we can jump out of a loop using either the break statement or goto statement
 In a similar way we can jump out of a program by using the library function exit ( )
 The general syntax is if ( condition ) exit ( ) The exit ( ) function takes an integer value as its argument
 The use of exit ( ) function requires the inclusion of the header file
 Program to demonstrate exit ( ) include include main ( ) int choice clrscr ( ) while ( ) printf (
 <eos>","The closing brace of the `main()` function section is the logical end of the program. Regarding the `exit()` function, we already know that we can jump out of a loop using either the `break` statement or the `goto` statement. In a similar way, we can jump out of a program by using the `exit()` library function. The general syntax is `if (condition) exit();`. The `exit()` function takes an integer value as its argument. The use of the `exit()` function requires the inclusion of the header file. A program to demonstrate `exit()` might typically include: `include`, `include`, `main()`, `int choice`, `clrscr()`, `while()`, and `printf (`."
file2_topic_96,"opening, establishing, labc, file, connection","<task:clean> <sos>
 The file name should end with the characters c like program c labc etc
 This provides the operating system the name of the file and the mode in which the file is to be opened
 The process of establishing a connection between the program and file is called opening the file
 In other word it specifies the purpose of opening a file
 Explain in brief the steps involved in opening a file
 <eos>","The file name should end with the character 'c', as in program.c, lab.c, etc. This provides the operating system with the name of the file and the mode in which the file is to be opened. The process of establishing a connection between a program and a file is called opening the file. In other words, it specifies the purpose of opening a file. Explain in brief the steps involved in opening a file."
file2_topic_97,"constant, set, character, equivalent, characters","<task:clean> <sos>
 Character Set C uses the uppercase letters A to Z the lowercase letters a to z the digits to and certain special characters as building blocks to form basic program elements ( eg
 Several character constants are shown below A X Character constants have integer values that are determined by the computers particular character set
 Thus the value of a character constant may vary from one computer to another
 The constants themselves however are independent of the character set
 This feature eliminates the dependence of a C program on a particular character set
 American Standard Code for Information Interchange ) character set in which each individual character is numerically encoded with its own unique bit combination ( hence a total of difference characters )
 Several character constant and their corresponding values as defined by ASCII Constant Value A X These values will be the same for all computer that utilize the ASCII character set
 String Constants A string consists of any number of consecutive characters ( including none ) enclosed in ( double ) quotation marks
 A character constant ( eg
 A ) and the corresponding singlecharacter string constant ( A ) are not equivalent
 A character constant has an equivalent integer value whereas a single character string constant does not have an equivalent integer value and in fact consists of two characters the specified character followed by the null character ( o )
 The null character constant is not equivalent to the character constant
 The characters may represent numeric constant a character constant or a string constant
 What do you mean by Character set in C
 A symbolic constant NULL is defined in stdioh which denotes the value zero
 <eos>","<sos> Character Set C uses uppercase letters A to Z, lowercase letters a to z, digits, and certain special characters as building blocks to form basic program elements (e.g., Several character constants are shown below: A, X. Character constants have integer values that are determined by the computer's particular character set. Thus, the value of a character constant may vary from one computer to another. The constants themselves, however, are independent of the character set. This feature eliminates the dependence of a C program on a particular character set. The American Standard Code for Information Interchange character set, in which each individual character is numerically encoded with its own unique bit combination (hence a total of different characters). Several character constants and their corresponding values, as defined by ASCII: Constant: Value A: X. These values will be the same for all computers that utilize the ASCII character set. String Constants: A string consists of any number of consecutive characters (including none) enclosed in double quotation marks. A character constant (e.g., A) and the corresponding single-character string constant (A) are not equivalent. A character constant has an equivalent integer value, whereas a single-character string constant does not have an equivalent integer value and, in fact, consists of two characters: the specified character followed by the null character (o). The null character constant is not equivalent to the character constant. The characters may represent a numeric constant, a character constant, or a string constant. What do you mean by character set in C? A symbolic constant, NULL, is defined in stdioh, which denotes the value zero. <eos>"
file2_topic_98,"whitespace, groups, group, characters, multiple","<task:clean> <sos>
 ( Blank space ) ( Horizontal tab ) ( White Space ) Most versions of the language also allow certain other characters such as and to be included with strings comments
 Must not contain white space
 The control string consists of individual groups of characters with one character group for each input data item
 Within the control string multiple character groups can be contiguous or they can be separated by whitespace ( ie
 blankspace ) tabs or newline characters
 If whitespace characters are used to separate multiple character groups in the control string then all consecutive whitespace characters in the input data will be read but ignored
 The use of blank spaces as character group separators is very common
 The consecutive nonwhitespace characters that define a field
 Multiple character group can be contiguous or they can be separated by other characters including whitespace character
 The use of blank spaces are character group separators is particularly common
 <eos>","Most versions of the language also allow certain other characters, such as blank space, horizontal tab, and white space, to be included within strings or comments. Character groups must not contain white space. The control string consists of individual groups of characters, with one character group for each input data item. Within the control string, multiple character groups can be contiguous or separated by whitespace (i.e., blank space), tabs, or newline characters. If whitespace characters are used to separate multiple character groups in the control string, then all consecutive whitespace characters in the input data will be read but ignored. The use of blank spaces as character group separators is very common. The consecutive non-whitespace characters define a field. Multiple character groups can be contiguous or separated by other characters, including whitespace characters. The use of blank spaces as character group separators is particularly common."
file2_topic_99,"tokens, linefeed, token, punctuation, passage","<task:clean> <sos>
 Identifiers Keywords C Tokens In a passage of text individual words and punctuation marks are called tokens
 Similarly in a C program the smallest individual units are also known as C tokens
 C has six types of tokens
 For example a linefeed ( LF ) which is referred to as a newline in C can be represented as n
 What are the token of C language
 <eos>","Identifiers, keywords, and C tokens. In a passage of text, individual words and punctuation marks are called tokens. Similarly, in a C program, the smallest individual units are also known as C tokens. C has six types of tokens. For example, a linefeed (LF), which is referred to as a newline in C, can be represented as '\n'. What are the tokens of the C language?"
file2_topic_100_0,"loop, continue, rem, body, sum","<task:clean> <sos>
 int float for while
 Stop Counter Initialization Test Condition False True Body of Loop Update expression Out of Loop For example Calculate the factorial of a number factorialc include main ( ) int num i long fact clrscr ( ) printf ( n Enter a number whose factorial is to be calculated ) scanf ( d num ) for ( i inum i ) fact i fact facti printf ( n The factorial is d fact ) getch ( ) Output Enter a number whose factorial is to be calculated The factorial is While Loop The while statement can be written as while ( condition ) while ( condition ) statement statement body of the loop statement First the condition is evaluated if it is true then the statements in the body of loop are executed
 fig Flowchart of while loop Program to print the sum of digits of any num while condition Body of Loop Next statement out of loop include main ( ) int n sum rem clrscr ( ) printf ( Enter the number ) scanf ( d n ) while ( n ) rem n taking last digit of number sum rem sum sum rem n n n skipping last digit end of while printf ( Sum of digits d n sum ) getch ( ) Output Enter the number Sum of digits dowhile loop The dowhile statement is also used for looping
 program to print the number from to using do while include main ( ) int i clrscr ( ) do printf ( dt i ) i while ( i ) printf ( n ) getch ( ) Output Body of Loop False Condition Next statement out of loop True Differences between while loop and do while loop Nesting of loops When a loop is written inside the body of another loop then it is known as nesting of loops
 <eos>","Keywords include: `int`, `float`, `for`, and `while`.
 Loop components are: Stop Counter, Initialization, Test Condition (False/True), Body of Loop, Update Expression, and Out of Loop.
 
 For example, to calculate the factorial of a number:
 `factorialc include main ( )`
 `int num i long fact`
 `clrscr ( )`
 `printf ( n Enter a number whose factorial is to be calculated )`
 `scanf ( d num )`
 `for ( i inum i )`
 `fact i fact facti`
 `printf ( n The factorial is d fact )`
 `getch ( )`
 
 Output:
 `Enter a number whose factorial is to be calculated`
 `The factorial is`
 
 **While Loop**
 The `while` statement can be written as: `while (condition) statement;` or `while (condition) { statement; statement; body of the loop; statement; }`.
 First, the condition is evaluated. If it is true, then the statements in the body of the loop are executed.
 
 Figure: Flowchart of `while` loop.
 The flowchart depicts: `while (condition)`, Body of Loop, and Next statement out of loop.
 
 Program to print the sum of digits of any number:
 `include main ( )`
 `int n sum rem`
 `clrscr ( )`
 `printf ( Enter the number )`
 `scanf ( d n )`
 `while ( n )`
 `rem n taking last digit of number`
 `sum rem sum sum rem`
 `n n n skipping last digit`
 `end of while`
 `printf ( Sum of digits d n sum )`
 `getch ( )`
 
 Output:
 `Enter the number`
 `Sum of digits`
 
 **Do-While Loop**
 The `do-while` statement is also used for looping.
 
 Program to print numbers using a `do-while` loop:
 `include main ( )`
 `int i`
 `clrscr ( )`
 `do`
 `printf ( dt i )`
 `i`
 `while ( i )`
 `printf ( n )`
 `getch ( )`
 
 The execution flow of a `do-while` loop includes: Body of Loop, False Condition, Next statement out of loop, and True.
 
 **Differences between while loop and do-while loop**
 
 **Nesting of Loops**
 When a loop is written inside the body of another loop, it is known as nesting of loops."
file2_topic_100_1,"loop, continue, rem, body, sum","<task:clean> <sos>
 The general syntax continue fig flowchart of continue control statemen Program to demonstrate continue statement include main ( ) int i num clrscr ( ) printf ( n Enter a number ) scanf ( d num ) printf ( n The even numbers from to d are n num ) for ( i inum i ) if ( i ) continue printf ( td i ) end of for loop getch ( ) end of main ( ) Output Enter a number The even numbers from to are Loop statements before continue Next iteration of loop condition continue statements True false Loop statements after continue goto statement The goto statement is used to alter the normal sequence of program execution by unconditionally transferring control to some other part of the program
 t ) scanf ( d n ) printf ( n Enter d numbers n n ) for ( i inumj ) temp numi numi numj numj temp end of if end of inner loop end of outer loop printf ( n The numbers in ascending order n ) for ( i in i ) printf ( td numi ) getch ( ) end of main Output How many numbers are there
 <eos>","The general syntax (continue), figure, and flowchart of the continue control statement. Program to demonstrate the continue statement: include main(); int i, num; clrscr(); printf(""\n Enter a number""); scanf(""%d"", &num); printf(""\n The even numbers from to %d are \n"", num); for (i inum i) if (i) continue; printf(""\t%d"", i); end of for loop; getch(); end of main(). Output: Enter a number; The even numbers from to are. Loop statements before continue. Next iteration of loop condition. Continue statements: True/False. Loop statements after continue. The goto statement is used to alter the normal sequence of program execution by unconditionally transferring control to some other part of the program. t; scanf(""%d"", &n); printf(""\n Enter %d numbers \n\n"", n); for (i inumj) temp, numi, numi, numj, numj, temp. End of if. End of inner loop. End of outer loop. printf(""\n The numbers in ascending order \n""); for (i in i) printf(""\t%d"", numi); getch(); end of main. Output: How many numbers are there?"
file2_topic_101,"lowercase, letters, upper, uppercase, letter","<task:clean> <sos>
 Identifiers consisted of letters and digits in any order except that first character must be a letter
 Both upper and lower case letters are permitted though common usage favors the use of lowercase letters for most type of identifiers
 Upper and lowercase letters are not interchangeable ( ie
 an uppercase letter is not equivalent to the corresponding lowercase letters )
 Must consist of only letters digits or underscore
 Only first characters are significant
 Since upper and lowercase characters are not equivalent it is possible to utilize an uppercase keyword as an identifier
 It can then be followed by any combination of digits taken from the sets through and a through f ( either upper or lower case )
 The letters may be written in either upper or lowercase
 Since the first lowercase letter ( in this case a ) would be interpreted as the first character beyond the string
 Write a program to convert a lowercase character string into uppercase using array
 For example fclose ( fp ) fclose ( fp )
 <eos>","Identifiers consist of letters and digits in any order, except that the first character must be a letter. Both uppercase and lowercase letters are permitted, although common usage favors the use of lowercase letters for most types of identifiers. Uppercase and lowercase letters are not interchangeable (i.e., an uppercase letter is not equivalent to the corresponding lowercase letter). Identifiers must consist of only letters, digits, or an underscore. Only the initial characters are significant. Since uppercase and lowercase characters are not equivalent, it is possible to utilize an uppercase keyword as an identifier. It can then be followed by any combination of digits (0-9) and letters (a-f), either uppercase or lowercase. The letters may be written in either uppercase or lowercase. The first lowercase letter (in this case, 'a') would be interpreted as the first character beyond the string. Write a program to convert a lowercase character string into uppercase using an array. For example, `fclose(fp) fclose(fp)`."
file2_topic_102,"underscore, middle, asterisk, period, dot","<task:clean> <sos>
 The underscore ( _ ) can also be included and considered to be a letter
 An underscore is often used in middle of an identifier
 An identifier may also begin with an underscore
 To do so the sign within the appropriate control group is followed by an asterisk ( )
 It must start with a period ( )
 The dot ( )
 <eos>","The underscore ( _ ) can also be included and considered a letter. An underscore is often used in the middle of an identifier. An identifier may also begin with an underscore. To do so, the sign within the appropriate control group is followed by an asterisk ( * ). It must start with a period ( . ). The dot ( . )."
file2_topic_103,"illegal, exponent, character, blank, xbff","<task:clean> <sos>
 First character must be an alphabet ( or Underscore )
 Illegal character ( blank space ) Illegal character ( ) the first digit can not be zero
 Illegal character ( ) Illegal character ( )
 xbff Illegal character ( )
 Either a decimal point or an exponent must be present
 Illegal character ( ) E The exponent must be an integer ( it can not contain a decimal point ) E Illegal character ( blank space ) in the exponent
 However will not be assigned partno because of asterisk which is interpreted as an assignment suppression character
 <eos>","The first character must be an alphabetic character or an underscore. Illegal character (blank space); Illegal character; The first digit cannot be zero. Illegal character; Illegal character. xbff: Illegal character. Either a decimal point or an exponent must be present. Illegal character; E. The exponent must be an integer (it cannot contain a decimal point). E: Illegal character (blank space) in the exponent. However, `partno` will not be assigned because an asterisk is interpreted as an assignment suppression character."
file2_topic_104,"bytes, byte, signed, unsigned, needs","<task:clean> <sos>
 Data Types C language is rich in its data types
 C supports several different types of data each of which may be represented differently within the computer memory
 Typical memory requirements are also given Data Types Description Typical Memory Requirement char single character byte int integer quantity bytes float floatingpoint number bytes ( word ) double doubleprecision floating point number bytes ( word ) In order to provide some control over the range of numbers and storage space C has following classes signed unsigned short long
 Types Size char or signed char byte unsigned char byte int bytes short int byte unsigned short int byte signed int bytes unsigned int bytes long int bytes signed long int bytes unsigned long int bytes float bytes double bytes long double bytes void is also a builtin data type used to specify the type of function
 Because I needs bytes f needs bytes and c needs byte bytes is highest in these
 <eos>","The C language is rich in its data types. C supports several different types of data, each of which may be represented differently within the computer's memory. Typical memory requirements are also given: char (single character, 1 byte); int (integer quantity, 2 bytes); float (floating-point number, 4 bytes (word)); and double (double-precision floating-point number, 8 bytes (word)). In order to provide some control over the range of numbers and storage space, C has the following classes: signed, unsigned, short, and long. The sizes for various types are: char or signed char (1 byte); unsigned char (1 byte); int (2 bytes); short int (1 byte); unsigned short int (1 byte); signed int (2 bytes); unsigned int (2 bytes); long int (4 bytes); signed long int (4 bytes); unsigned long int (4 bytes); float (4 bytes); double (8 bytes); and long double (bytes). Void is also a built-in data type used to specify the type of function. Because `int` needs bytes, `float` needs bytes, and `char` needs a byte, the `float` type has the highest memory requirement among these."
file2_topic_105,"union, structure, created, keyword, space","<task:clean> <sos>
 structure union enum The basic data types are also known as built in data types
 is i Multiplication is i Union and its important Union is similar to structure data type but union store value of different types in a single location
 Union will contain many different type of values but only one is stored at a time
 The declaration of union is same as the structure
 Only difference is in place of struct keyword the union keyword is used
 The accessing of union member is also same like structure member
 For example Union data int a float b The union variable are declared like structure variable
 For example Union data d d If we write the statement da Then that means the field a is valid but we want to print the value of b after above assignment the value is wrong because a is valid only
 Space Created for Union We know that union store one value at a time so the question is now much space is created for union
 For example Union A int i float f char c union A a The space is created for a is byte
 Distinguish between Structure and union
 <eos>","Structure, union, and enum. The basic data types are also known as built-in data types.
 
 Union and its importance: A union is similar to a structure data type, but it stores values of different types in a single location. A union will contain many different types of values, but only one value is stored at a time. The declaration of a union is the same as that of a structure. The only difference is that, in place of the 'struct' keyword, the 'union' keyword is used. Accessing a union member is also the same as accessing a structure member. For example, consider `Union data { int a; float b; }`. Union variables are declared like structure variables. For example, if we declare `Union data d;` and then write the statement `d.a`, this means that the field `a` is valid. However, if we try to print the value of `b` after the above assignment, the value will be wrong because only `a` is valid.
 
 Space Created for Union: We know that a union stores one value at a time, so the question is how much space is created for a union. For example, if we declare `Union A { int i; float f; char c; }` and then `union A a;`, the space created for `a` is a byte.
 
 Distinguish between Structure and Union."
file2_topic_106,"octal, digits, taken, combination, digit","<task:clean> <sos>
 Thus it consists of a sequence of digits
 A decimal integer constant can consists of any combination of digits taken from the set through
 An octal integer constant can consist of any combination of digits taken from the set through
 However the first digit must be in order to identify the constant as an octal number
 The general form represents an octal digit ( through )
 <eos>","Thus, it consists of a sequence of digits. A decimal integer constant can consist of any combination of digits taken from the set through. An octal integer constant can consist of any combination of digits taken from the set through. However, the first digit must be in order to identify the constant as an octal number. The general form represents an octal digit (through)."
file2_topic_107,"constants, illegal, integer, incorrectly, reason","<task:clean> <sos>
 Several valid decimal integer constants are shown below The following decimal integer constants are written incorrectly for reason stated Illegal character ( ) Illegal character ( )
 Several valid hexadecimal integer constants are shown below x X XFFF xabcd The following hexadecimal integer constants are written incorrectly for the reason stated X Illegal character ( )
 XDEFG Illegal character ( G ) Unsigned and Long Integer Constants Unsigned integer constants may exceed the magnitude of ordinary integer constants by approximately a factor of l though they may not be negative
 The constants following the case keywords should be of integer or character type
 <eos>","Several valid decimal integer constants are shown below. The following decimal integer constants are written incorrectly for reasons stated: Illegal character (); Illegal character ().
 Several valid hexadecimal integer constants are shown below x X XFFF xabcd. The following hexadecimal integer constants are written incorrectly for the reasons stated: X; Illegal character ().
 XDEFG - Illegal character (G).
 Unsigned and Long Integer Constants. Unsigned integer constants may exceed the magnitude of ordinary integer constants by approximately a factor of l, though they may not be negative.
 The constants following the case keywords should be of integer or character type."
file2_topic_108,"null, termination, terminating, string, length","<task:clean> <sos>
 Thus the string would be displayed as Line Line Line The compiler automatically places a null character ( ) at the end of every string constant as the last character within the string ( before the closing double quotation mark )
 Normally zero is used to indicate normal termination and non zero value to indicate termination due to some error or abnormal condition
 In other words we can say that a string is a sequence of contiguous character in memory terminated by the null character
 The terminating null character is important because it is the only way the string handling functions can know there the string ends
 The second dimension tells the maximum length of each string
 In above declaration we can store strings each can store maximum characters last th space is for null terminator in each string
 The length of string is the number of characters present in it excluding the terminating null character
 <eos>","Thus, the string would be displayed as 'Line Line Line'. The compiler automatically places a null character (\0) at the end of every string constant as the last character within the string (before the closing double quotation mark).
 Normally, zero is used to indicate normal termination, and a non-zero value to indicate termination due to some error or abnormal condition.
 In other words, we can say that a string is a sequence of contiguous characters in memory, terminated by the null character.
 The terminating null character is important because it is the only way string handling functions can know where the string ends.
 The second dimension tells the maximum length of each string.
 In the above declaration, we can store strings; each can store maximum characters, and the last space is for the null terminator in each string.
 The length of a string is the number of characters present in it, excluding the terminating null character."
file2_topic_109,"yielding, integervalued, represent, integer, returning","<task:clean> <sos>
 Thus a b and c will each represent an integervalued quantity and d will represent a single character
 all integers all characters )
 For example integer number ie
 It can be value of any integer or character variable or a function call returning on integer or an arithmetic logical relational bitwise expression yielding integer value
 <eos>","Thus, a, b, and c will each represent an integer-valued quantity, and d will represent a single character (all integers; all characters). For example, an integer number can be the value of any integer or character variable, or a function call returning an integer, or an arithmetic, logical, relational, or bitwise expression yielding an integer value."
file2_topic_110,"assigned, follow, quantity, value, values","<task:clean> <sos>
 The next four lines cause the following things to happen the integer quantity is assigned to a is assigned to b and the quantity represented by the sum ab ( e
 ) is assigned to c The character a is assigned then assigned to d In the third line within this group the values of the variables a and b are accessed simply by writing the variables on the righthand side of the equal sign
 The last four lines redefine the values assigned to the variables as the integer quantity is assigned to a replacing the earlier value then is assigned to b replacing the earlier value The difference between a and b ( ie
 A comma linked list of expression are evaluated left to right and the value of rightmost expression is value ( x y x y ) Here is assigned to x and is assigned to y and so expression xy is evaluated as ( ) ie
 a b In this example x will be assigned the value of b
 int subject char sex M F float marks int element In example ( ) elements are five but we are assigning only three values
 int ) The value is assigned like follow a a a a a a int a In above example the two value in the first inner pair of braces are assigned to the array element in the first row the values in the second pair of braces are assigned to the array element in the second row and so on
 The value assign like follow a a a a a a In above example the value zero is assigned to a and a because no value assigned to these
 In above example value assign like follow a a a a a a int a int a would never work
 <eos>","The next four lines describe the following operations: an integer quantity is assigned to 'a', another is assigned to 'b', and the quantity represented by the sum `ab` is assigned to 'c'. The character 'a' is then assigned to 'd'. In the third line within this group, the values of variables 'a' and 'b' are accessed simply by writing the variables on the right-hand side of the equal sign. The last four lines redefine the values assigned to the variables: an integer quantity is assigned to 'a', replacing its earlier value; another is then assigned to 'b', also replacing its earlier value. The difference between 'a' and 'b' (i.e.,). A comma-linked list of expressions is evaluated from left to right, and the value of the rightmost expression is value `(x y x y)`. Here, a value is assigned to 'x', and another is assigned to 'y', so the expression `xy` is evaluated as `()`, i.e., `a b`. In this example, 'x' will be assigned the value of 'b'. int subject, char sex (M F), float marks, int element. In example `()`, there are five elements, but we are assigning only three values. int ). The value is assigned as follows: `a a a a a a int a`. In the above example, the two values in the first inner pair of braces are assigned to the array elements in the first row; the values in the second pair of braces are assigned to the array elements in the second row, and so on. The value is assigned as follows: `a a a a a a`. In the above example, the value zero is assigned to 'a' and 'a' because no value was assigned to these. In the above example, values are assigned as follows: `a a a a a a int a int a` would never work."
file2_topic_111,"size, array, dimension, tells, elements","<task:clean> <sos>
 Each array variable must be followed by a pair of square brackets containing a positive integer which specifies the size ( ie
 the number of elements ) of the array
 The size of this array will be equal to the value of argc
 size of the array is the number of elements in the array
 For example define size a size The size of the array must be specified ie
 For example char str The first dimension ( size ) tells how many strings are in the array
 <eos>","Each array variable must be followed by a pair of square brackets containing a positive integer that specifies its size (i.e., the number of elements). The size of this array will be equal to the value of argc. The array's size is the number of elements it contains. For example, `define size a size`. The size of the array must be specified, i.e., For example, `char str`. The first dimension (size) tells how many strings are in the array."
file2_topic_112,"california, text, meaningless, extra, filled","<task:clean> <sos>
 char text California This declaration will cause text to be an element character array
 The first elements will represent the characters within the word California and the th element will represent the null character ( ) which automatically added at the end of the string
 char text California the character at the end of the string ( in this case the null character ) will be lost
 char text California the extra array elements may be assigned zeros or they may be filled with meaningless characters
 <eos>","The declaration `char text California` will cause `text` to be a character array. The initial elements will represent the characters within the word 'California', and the last element will represent the null character (`\0`), which is automatically added at the end of the string. For `char text California`, the character at the end of the string (in this case, the null character) will be lost. For `char text California`, the extra array elements may be assigned zeros, or they may be filled with meaningless characters."
file2_topic_113,"items, consider, type, data, integers","<task:clean> <sos>
 The data items must all be of the same type ( eg
 For example consider the following data
 In such situation where we have multiple data items of same type to be stored we can use array
 The individual data items can be characters integers floating point numbers etc
 However they must all be of the same type and the same storage class ( ie
 The data item can be different type some can be int some can be float some can be char and so on
 <eos>","The data items must all be of the same type. For example, consider the following data. In situations where multiple data items of the same type are to be stored, we can use an array. The individual data items can be characters, integers, floating-point numbers, etc. However, they must all be of the same type and the same storage class. Data items can be of different types; some can be integers, some can be floats, some can be characters, and so on."
file2_topic_114,"escape, sequence, newline, feed, ascii","<task:clean> <sos>
 An escape sequence always begins with a backslash and is followed by one or more special characters
 Such escape sequences always represent single characters even though they are written in terms of two or more characters
 The commonly used escape sequences are listed below Character Escape Sequence ASCII Value bell ( alert ) a backspace b horizontal tab t vertical tab v newline ( line feed ) n form feed f carriage return r quotation mark ( ) apostrophe ( ) question mark ( )
 Escape Sequence represents the null character ( ASCII ) which is used to indicate the end of a string
 The general form of a hexadecimal escape sequence is xhh where each h represents a hexadecimal digit ( through and a through f )
 What is Escape Sequence
 Write any four escape sequence with meaning and symbols
 List out any threeescape sequence with their uses
 If the character within the brackets is simply the circumflex followed by a newline character then string entered from the standard input device can contain any ASCII characters except the newline characters ( line feed )
 The Enter Key will issue the newline character thus signifying the end of the string
 <eos>","An escape sequence always begins with a backslash and is followed by one or more special characters. Such escape sequences always represent single characters, even though they are written in terms of two or more characters. The commonly used escape sequences are listed below: bell (alert) (\a), backspace (\b), horizontal tab (\t), vertical tab (\v), newline (line feed) (\n), form feed (\f), carriage return (\r), quotation mark (\""), apostrophe (\'), and question mark (\?). An escape sequence represents the null character (ASCII), which is used to indicate the end of a string. The general form of a hexadecimal escape sequence is \xhh, where each 'h' represents a hexadecimal digit (0 through 9 and a through f). What is an escape sequence? Write any four escape sequences with their meanings and symbols. List out any three escape sequences with their uses. If the character within the brackets is simply the circumflex followed by a newline character, then a string entered from the standard input device can contain any ASCII characters except the newline character (line feed). The Enter key will issue the newline character, thus signifying the end of the string."
file2_topic_115,"typedef, type, units, existing, identifier","<task:clean> <sos>
 Typedef Statement C supports a feature known as type definition that allows users to define an identifier that would represent an existing data type
 It takes the general form typedef type identifier where type refers to an existing data type and identifier refers to the new name given to the data type
 typedef can not create a new type
 Some examples of type definition are typedef int units typedef float marks where units represent int and marks represents float
 The main advantage of typedef is that we can create meaningful data type names for increasing the readability of the program
 <eos>","The `typedef` statement in C supports a feature known as type definition that allows users to define an identifier to represent an existing data type. It takes the general form typedef type identifier, where type refers to an existing data type and identifier refers to the new name given to that data type. Typedef cannot create a new type. Some examples of type definition are typedef int units and typedef float marks, where units represents int and marks represents float. The main advantage of typedef is that we can create meaningful data type names to increase the readability of the program."
file2_topic_116,"cprogram, kumar, ram, cprogramming","<task:clean> <sos>
 Describe different data types are used in cprogram
 Write down the various types of it in Cprogram
 a include include void main ( ) char name clrscr ( ) printf ( Enter your name ) gets ( name ) printf ( your name is ) puts ( name ) getch ( ) output Enter your name Ram Kumar Your name is Ram Kumar Some Important Questions Write a general form of inputoutput statement of Cprogramming
 CPROGRAM X_FILE Y_FILE ) is passed on to the program through these arguments when main ( ) is called up by the system
 How and when the they declared in Cprogram
 <eos>","Describe the different data types used in a C program. Write down the various types of these in a C program. A C program consists of components like `include`, `include`, `void main()`, `char name`, `clrscr()`, `printf(""Enter your name"")`, `gets(name)`, `printf(""your name is"")`, `puts(name)`, and `getch()`. Its output shows: 'Enter your name', 'Ram Kumar', and 'Your name is Ram Kumar'. Some important questions: Write a general form of an input/output statement for C programming. CPROGRAM, along with arguments such as `X_FILE` and `Y_FILE`, is passed to the program when `main()` is called by the system. How and when are they declared in a C program?"
file2_topic_117,"division, integer, respectively, note, perform","<task:clean> <sos>
 Division of one integer quantity by another is referred to as integer division
 Suppose that i j and k are integer variables whose values are and respectively
 If the first number is greater than second perform multiplication otherwise division
 Note that x and y both are integer type
 Where x and y both are integer type
 <eos>","Division of one integer quantity by another is referred to as integer division.
 Suppose that i, j, and k are integer variables whose values are defined respectively.
 If the first number is greater than the second, perform multiplication; otherwise, perform division.
 Note that both x and y are of integer type.
 Where both x and y are of integer type."
file2_topic_118,"floatingpoint, precision, variable, hand, dropped","<task:clean> <sos>
 the decimal portion of the quotient will be dropped )
 On the other hand if a division operation is carried out with two floatingpoint numbers or one floating point numbers and other integer the result will be a floating point
 Suppose that i is an integer variable whose value is f is a floatingpoint variable whose value is and c is a character variable that represents the character w
 Suppose that i is an integer variable x is a floatingpoint variable d is doubleprecision variable and c is character type variable
 The first be read into a variable int the second into float and the third into char
 The second will be assigned to a long decimal integer variable and the third will be assigned to a double precision variable
 Â¾ Precision Optional The operation of precision field depends on the types of conversion
 <eos>","The decimal portion of the quotient will be dropped. On the other hand, if a division operation is carried out with two floating-point numbers, or one floating-point number and another integer, the result will be a floating-point number. Suppose that i is an integer variable whose value is f; f is a floating-point variable whose value is; and c is a character variable that represents the character 'w'. Suppose that i is an integer variable, x is a floating-point variable, d is a double-precision variable, and c is a character-type variable. The first will be read into an integer variable, the second into a float variable, and the third into a character variable. The second will be assigned to a long decimal integer variable, and the third will be assigned to a double-precision variable. Precision is optional; the operation of the precision field depends on the types of conversion."
file2_topic_119,"conditional, expressions, interpretation, make, logical","<task:clean> <sos>
 Several relational expressions involving these variables Expressions Interpretation Value i k true ( jk ) ( i ) false k
 not Logical operators are used to compare evaluate logical and relational expressions
 Several complex logical expressions that make use of these variables are shown below Expression Interpretation Value ( i ) ( c w ) true ( i ) ( c ) true ( f ) false ( c
 is known as conditional operator
 Simple conditional operations can be carried out with conditional operator
 An expression that make use of the conditional operator is called a conditional expression
 Make the comparison between them with conditional operator
 <eos>","Several relational expressions involving these variables are provided. These are categorized by their Expressions, Interpretation, and Value. For example: 'i k' evaluates to true; and '(jk)' has an interpretation of '(i)' and evaluates to false, with k.
 
 Logical operators, including 'not', are used to compare and evaluate logical and relational expressions.
 
 Several complex logical expressions that make use of these variables are shown below. These are categorized by their Expression, Interpretation, and Value. Examples include: '(i)' with an interpretation of '(c w)' evaluates to true; '(i)' with an interpretation of '(c)' evaluates to true; and '(f)' evaluates to false, with '(c)'.
 
 The conditional operator is known as such. Simple conditional operations can be carried out using the conditional operator. An expression that makes use of the conditional operator is called a conditional expression. Comparisons between them can be made with the conditional operator."
file2_topic_120,"expression, conditional, evaluating, negates, value","<task:clean> <sos>
 that negates the value of a logical expression ie
 p ) ( if ) true
 expression expression When evaluating a conditional expression expression is evaluated first
 If expression is true the value of expression is the value of conditional expression
 If expression is false the value of expression is the value of conditional expression
 <eos>","That negates the value of a logical expression, ie p), (if), true. Expression is expression. When evaluating a conditional expression, expression is evaluated first. If the expression is true, the value of the expression is the value of the conditional expression. If the expression is false, the value of the expression is the value of the conditional expression."
file2_topic_121,"operand, postfix, prefix, altered, utilized","<task:clean> <sos>
 If the operator is written before the operand then it is called as prefix unary operator
 If the operator is written after the operand then it is called as postfix unary operator
 When prefix is used the operand will be altered in value before it is utilized for its intended purpose within the program
 Similarly when postfix is used the operand will be altered in value after it is utilized
 It is a compile time operand
 The operand may be a variable a constant or a data type qualifier
 This operator can be read as the address of so sn means address of sn similarly price means address of price
 <eos>","If the operator is written before the operand, it is called a prefix unary operator. If the operator is written after the operand, it is called a postfix unary operator. When a prefix operator is used, the operand's value will be altered before it is utilized for its intended purpose in the program. Similarly, when a postfix operator is used, the operand's value will be altered after it is utilized. It is a compile-time operand. The operand may be a variable, a constant, or a data type qualifier. This operator can be read as 'the address of'; so, 'sn' means 'address of sn,' and similarly, 'price' means 'address of price.'"
file2_topic_122_0,"printf, gender, output, str, format","<task:clean> <sos>
 Suppose the program includes the following three printf statements
 The statements printf ( integer d n size of i ) printf ( float d n size of x ) printf ( double d n size of d ) printf ( character d n size of c ) might generate the following output integer float double character The above statement can also be written as printf ( integer dnsizeof ( int ) ) and so on
 char text Kathmandu printf ( Number of characters dsizeof ( text ) ) will generate the following output Number of characters Conditional Operators The operator
 The printf ( ) is a builtin function which is used to output data from the computer onto a standard output device ie
 The printf ( ) statement provides certain features that can be used to control the alignment and spacing of printouts on the terminals
 The general form of printf ( ) statement is printf ( control string arg arg
 So the output generated will be fastener Example include main ( ) double x y printf ( fffffnn x y xy xy ) printf ( eeee x y xy xy ) The output are e e e Example read and write a line of text include main ( ) char line scanf ( n line ) printf ( s line ) Arun Kumar Arun Kumar Control string The general syntax of control string Flag Field width precision conversion character Â¾ Flags Optional T he flag affect the appearance of the output
 int n Format Output l w printf ( d n ) wl printf ( d n ) printf ( d n ) wl printf ( d n ) Format for floating point output The general form wpf wpe where w is the integer width including decimal point p is the precision f and e are conversion characters Example Format Output printf ( d ) printf ( ) printf ( x ) c printf ( f )
 e printf ( e ) printf ( g ) eg
 float x Format Output printf ( f x )
 <eos>","Suppose the program includes the following three `printf` statements.
 The statements `printf ( integer d n size of i )`, `printf ( float d n size of x )`, `printf ( double d n size of d )`, and `printf ( character d n size of c )` might generate the following output: `integer float double character`. The above statement can also be written as `printf ( integer dnsizeof ( int ) )` and so on.
 
 Given `char text Kathmandu`, the statement `printf ( Number of characters dsizeof ( text ) )` will generate the following output: `Number of characters`.
 
 Conditional Operators. The operator.
 
 The `printf()` is a built-in function which is used to output data from the computer onto a standard output device, ie.
 The `printf()` statement provides certain features that can be used to control the alignment and spacing of printouts on the terminals.
 The general form of a `printf()` statement is `printf ( control string arg arg`.
 
 So, the output generated will be `fastener`. Example: `include main ( ) double x y; printf ( fffffnn x y xy xy ); printf ( eeee x y xy xy );` The output is `e e e`.
 Example: To read and write a line of text, consider: `include main ( ) char line; scanf ( n line ); printf ( s line )`. Output: `Arun Kumar Arun Kumar`.
 
 Control string: The general syntax of a control string includes Flag, Field width, precision, and conversion character Â¾. Flags are optional; the flag affects the appearance of the output.
 
 For `int n` Format Output: `l w printf ( d n )`, `wl printf ( d n )`, `printf ( d n )`, `wl printf ( d n )`.
 Format for floating point output: The general form is `wpf wpe`, where `w` is the integer width (including the decimal point), `p` is the precision, and `f` and `e` are conversion characters.
 Example Format Output: `printf ( d )`, `printf ( )`, `printf ( x )`, `c`, `printf ( f )`.
 
 For `e`: `printf ( e )`, `printf ( g )`. Eg:
 For `float x` Format Output: `printf ( f x )`."
file2_topic_122_1,"printf, gender, output, str, format","<task:clean> <sos>
 printf ( f x )
 printf ( f x ) _ printf ( f x ) printf ( f x ) printf ( e x ) e printf ( e x ) e printf ( e x ) e _ Output of Strings The general form of control string is wps where w specifies the field width for display and p instructs that only the first P characters of the string are to be displayed
 Format Output M Y N E P A L printf ( s str ) M Y N E P A L printf ( s str ) M Y N printf ( s str ) M Y N E P printf ( s str ) printf ( s str ) M Y N E P A L Program to demonstrate unformatted function unformatc include include main ( ) clrscr ( ) char gender printf ( Enter gender M or F ) putchar ( gender ) getch ( ) Output Enter gender M or F M Our gender is M Note clrscr ( ) is a console fumction used to clear console ( display ) screen clrscr ( ) is pronoused clearscreengetch ( ) function is used to hold the console screen
 ( PU ) Find the output the following program ( PU ) include Main ( ) int abc a b c printf ( dddnabc ) printf ( dddnabc ) Find the output of the following program ( PU ) include include void main ( ) int x float y char z C clrscr ( ) printf ( d f c nxyz ) getch ( ) Write short noteson Formatted inputoutput function
 ( PUBack ) b Find the output of the following program
 include include main ( ) int a int P i clrscr ( ) p a printf ( dn ( pi ) ) getch ( ) The output of above program is Because the statement printf ( dn ( pi ) ) exzecute times from i to i
 Similarly other elements are printed
 EOF ) printf ( sf in std
 <eos>","printf(f x); printf(f x); printf(f x); printf(f x); printf(e x) e; printf(e x) e; printf(e x) e. Output of Strings: The general form of a control string is 'wps', where w specifies the field width for display and p instructs that only the first P characters of the string are to be displayed. Format Output: M Y N E P A L. printf(s str); M Y N E P A L. printf(s str); M Y N. printf(s str); M Y N E P. printf(s str); printf(s str); M Y N E P A L. Program to demonstrate unformatted function unformatc: include; include; main(); clrscr(); char gender; printf(Enter gender M or F); putchar(gender); getch(); Output: Enter gender M or F M. Our gender is M. Note: clrscr() is a console function used to clear the console display screen. clrscr() is pronounced 'clearscreen'. getch() function is used to hold the console screen. (PU) Find the output of the following program: (PU) include; main(); int abc, a, b, c; printf(dddnabc); printf(dddnabc); Find the output of the following program: (PU) include; include; void main(); int x; float y; char z = 'C'; clrscr(); printf(d f c nxyz); getch(); Write short notes on Formatted Input/Output functions. (PUBack) b Find the output of the following program: include; include; main(); int a; int P; int i; clrscr(); p = a; printf(dn(pi)); getch(); The output of the above program is: Because the statement printf(dn(pi)) executes times from i to i. Similarly, other elements are printed. EOF. printf(sf in std)."
file2_topic_123,"bitwise, shift, bits, operators, operator","<task:clean> <sos>
 Bitwise Operators Bitwise Operators are used for manipulating data at bit level
 These operators are used for testing the bits or shifting them right or left
 Bitwise operators can be applied only to Operator Meaning Bitwise AND Bitwise OR Bitwise exclusive OR Right shift Bitwise ones complement operator Consider a and b
 THe binary representation of a and b for bits a b c a b d a b n a e a b For Bitwise Shift Operator Operand Bitwise Shift operator number For eg
 <eos>","<sos>
 Bitwise operators are used for manipulating data at the bit level. These operators are used for testing bits or shifting them to the right or left. Bitwise operators can be applied only to operator meaning. Bitwise AND, Bitwise OR, Bitwise exclusive OR, Right shift, and Bitwise ones complement operator. Consider a and b. The binary representation of a and b for bits: a b c, a b d, a b n, a e, a b. For the Bitwise Shift Operator: Operand, Bitwise Shift operator, number. For example:
 <eos>"
file2_topic_124,"bytes, byte, address, allocated, memory","<task:clean> <sos>
 Size of Operator The size of operator is used with an operand to return the number of bytes it occupies
 Ram The above line contains three types of data and must be read according to its format
 It is assumed that the starting memory location is
 As each integer element requires bytes subsequent element appears after gap of locations
 Normally each character is stored in one byte and successive characters of the string are stored in successive bytes
 The memory in a computer is made up of bytes arranged in a sequential manner
 Each byte has an index number which is called address of that byte
 The address of these bytes start from zero and the address of last byte is one less than the size of memory
 Suppose we have MB of RAM ( Random Access Memory ) then memory will consist of the address of these bytes will be from to
 The address of first byte from the two allocated bytes is ka the address of variable age
 Suppose compiler has reserved bytes numbered and for the storage of variable age then the address of variable age will e
 Memory Address age Now this value will be stored in these bytes in form of binary representation
 The number of bytes allocated will depend on the data type of variable
 For example bytes would have been allocated for a float variable and the address of first byte would be called the address of variable
 Generally bytes are used to store an address ( may vary in different computers ) so the compiler allocates bytes for a pointer variable
 bytes bytes ) is reserved and the address of the first byte of the memory allocated is assigned to the pointer x of type int ( ie
 x refers the first address of allocated memory )
 <eos>","The 'sizeof' operator is used with an operand to return the number of bytes it occupies. RAM. The above line contains three types of data and must be read according to its format. It is assumed that the starting memory location is. As each integer element requires bytes, a subsequent element appears after a gap of locations. Normally, each character is stored in one byte, and successive characters of a string are stored in successive bytes. The memory in a computer is made up of bytes arranged sequentially. Each byte has an index number, which is called the address of that byte. The addresses of these bytes start from zero, and the address of the last byte is one less than the size of memory. Suppose we have MB of RAM (Random Access Memory). Then memory will consist of [a certain capacity], and the addresses of these bytes will be from to. The address of the first byte from the two allocated bytes is 'ka', which is the address of the variable 'age'. Suppose the compiler has reserved bytes numbered and for the storage of variable 'age'; then the address of variable 'age' will be. Memory Address: age. Now, this value will be stored in these bytes in the form of binary representation. The number of bytes allocated will depend on the data type of the variable. For example, bytes would have been allocated for a float variable, and the address of the first byte would be called the address of the variable. Generally, bytes are used to store an address (may vary in different computers), so the compiler allocates bytes for a pointer variable. Bytes (bytes) are reserved, and the address of the first byte of the allocated memory is assigned to the pointer 'x' of type 'int' (i.e., 'x' refers to the first address of allocated memory)."
file2_topic_125_0,"check, img, odd, number, num","<task:clean> <sos>
 Write a program to enter two numbers
 For eg Program to check whether the number is ve or ve include main ( ) int num clrscr ( ) printf ( Enter a number to be tested ) scanf ( d num ) if ( num ) printf ( The number is negative ) printf ( value of num is dn num ) getch ( ) Output st run Enter a number to be tested The number is negative Value of num is nd run Enter a number to be tested Value of num is True Condition Statement False Next Statement ifelse statement The ifelse statement is an extension of the simple if statement
 Program to check whether the number is even or odd include main ( ) int num remainder clrscr ( ) printf ( Enter a number ) Condition statement statement Next statement scanf ( d num ) remainder num modular division if ( remainder ) test for even printf ( Number is evenn ) else printf ( Number is oddn ) getch ( ) Output Enter a number Number is odd
 Program to print whether the number is even or odd include main ( ) int n clrscr ( ) printf ( Enter the number ) scanf ( d n ) if ( n ) goto even else goto odd even printf ( Number is even ) goto end odd printf ( Number is odd ) end printf ( n ) getch ( ) Output Enter the number Number is even
 <eos>","Write a program to enter two numbers.
 
 **Program to Check if a Number is Positive or Negative**
 
 For example, consider a program designed to check whether a number is positive or negative.
 
 Code Structure:
 `include main ( )`
 `int num`
 `clrscr ( )`
 `printf ( Enter a number to be tested )`
 `scanf ( d num )`
 `if ( num )`
 `printf ( The number is negative )`
 `printf ( value of num is dn num )`
 `getch ( )`
 
 Output:
 `1st run`
 `Enter a number to be tested`
 `The number is negative`
 `Value of num is`
 
 `2nd run`
 `Enter a number to be tested`
 `Value of num is`
 
 Regarding condition statements, a True Condition Statement leads to the next statement, while a False Condition Statement leads to a subsequent statement. The `if-else` statement is an extension of the simple `if` statement.
 
 **Program to Check if a Number is Even or Odd (using If-Else)**
 
 This program checks whether a number is even or odd.
 
 Code Structure:
 `include main ( )`
 `int num remainder`
 `clrscr ( )`
 `printf ( Enter a number )`
 Following this, the condition statement and subsequent statements determine the program flow.
 `scanf ( d num )`
 `remainder num modular division`
 `if ( remainder ) test for even`
 `printf ( Number is evenn )`
 `else printf ( Number is oddn )`
 `getch ( )`
 
 Output:
 `Enter a number`
 `Number is odd`
 
 **Program to Print Whether a Number is Even or Odd (using Goto)**
 
 This program prints whether a number is even or odd using `goto` statements.
 
 Code Structure:
 `include main ( )`
 `int n`
 `clrscr ( )`
 `printf ( Enter the number )`
 `scanf ( d n )`
 `if ( n ) goto even else goto odd`
 `even printf ( Number is even ) goto end`
 `odd printf ( Number is odd )`
 `end printf ( n )`
 `getch ( )`
 
 Output:
 `Enter the number`
 `Number is even`"
file2_topic_125_1,"check, img, odd, number, num","<task:clean> <sos>
 Display all recordsn ) printf ( Enter your choice ) scanf ( d choice ) switch ( choice ) case printf ( datase created nn ) break case printf ( Record inserted nn ) break case printf ( Record modified nn ) break case printf ( Record deleted nn ) break case printf ( Record displayed nn ) break case exit ( ) default printf ( Wrong choicen ) end of switch end of while getch ( ) end of main ( ) s Some Others Programs QWrite a program to check whether the number is prime or not
 progam to check the num is prime or not primec include main ( ) int numic clrscr ( ) scanf ( dnum ) ic while ( iused for math function like sqrt ( ) and fabs ( ) main ( ) Float a b c xxdreal img printf ( n Enter the values of abc in axbx c t ) scanf ( fff a b c ) d b b a c if ( d ) d sqrt ( fabs ( d ) ) saqr used for square root fabs used for absolute value printf ( n The roots are imaginary ) real b ( a ) img d ( a ) printf ( x f i f f real img ) printf ( x f i f f real img ) else d sqrt ( d ) saqr used for square root fabs used for absolute value printf ( n The roots are imaginary ) real ( b d ) ( a ) img ( b d ) ( a ) printf ( x f t x f f real img ) getch ( ) Some Important Questions What is a control statement
 Explain with examples Write a program to check the given number is prime or not
 Write a program to check number is palindrome or not
 <eos>","Display all recordsn. printf (Enter your choice). scanf (d choice). switch (choice). Case: printf (datase created nn); break. Case: printf (Record inserted nn); break. Case: printf (Record modified nn); break. Case: printf (Record deleted nn); break. Case: printf (Record displayed nn); break. Case: exit(). Default: printf (Wrong choicen). End of switch. End of while. getch(). End of main(). Some Other Programs. QWrite a program to check whether the number is prime or not. progam to check the num is prime or not: primec include main(). int num, i, c. clrscr(). scanf(dnum). i c while (i). Used for math functions like sqrt() and fabs(). In main(): Float a, b, c, xx, d, real, img. printf (n Enter the values of abc in axbx c t). scanf (fff a, b, c). d b b a c. If (d), d sqrt (fabs(d)). saqr used for square root. fabs used for absolute value. printf (n The roots are imaginary). real b (a). img d (a). printf (x f i f f real img). printf (x f i f f real img). Else, d sqrt (d). saqr used for square root. fabs used for absolute value. printf (n The roots are imaginary). real (b d) (a). img (b d) (a). printf (x f t x f f real img). getch(). Some Important Questions: What is a control statement? Explain with examples. Write a program to check the given number is prime or not. Write a program to check number is palindrome or not."
file2_topic_125_2,"check, img, odd, number, num","<task:clean> <sos>
 A program to read a string and check for palindrome void main ( ) char st int len i pal clrscr ( ) printf ( Enter string of our choice ) gets ( st ) len strlen ( st ) for ( i i ( len ) i ) if ( sti
 stleni ) pal if ( pal ) printf ( n The input string is not palindrome ) else printf ( n the input string is palindrome ) getch ( ) Some Important Questions What is an array
 <eos>","A program to read a string and check for palindrome. `void main()` uses `char st`, `int len`, `i`, and `pal`. `clrscr()` is run. `printf(""Enter string of our choice"")` prompts. `gets(st)` reads. `len` gets its value from `strlen(st)`. A loop `for (i i (len) i)` is executed, where `if (sti stleni)` is evaluated, affecting `pal`. If `pal` is true, `printf(""\n The input string is not palindrome"")`; else, `printf(""\n the input string is palindrome"")`. `getch()` is called. Some Important Questions: What is an array?"
file2_topic_126,"table, conversion, standard, input, charater","<task:clean> <sos>
 The standard input functions are scanf ( ) getchas ( ) getch ( ) gets ( ) etc
 Similarly the output functions which are used to display the result on the screen are called standard output functions
 The standard library stdioh provides functions for input and output
 Types of IO The inputoutput functions are classified into two types i Formatted functions ii
 The input function scanf ( ) and output Program function printf ( ) fall under this category
 This is possible in C using the scanf function
 The input data can be entered into the computer from a standard input device keyboard by means of the C library function scanf
 Several of the more frequently used conversion characters are listed below Table Conversion Charater Table Example inlcude main ( ) char item int partno float cost scanf ( s d f item partno cost ) The following data items could be entered from the standard input device when the program is executed
 Example include main ( ) char line scanf ( n line ) A variation of this feature which is often more useful is to precede the characters within the square brackets by a circumflex ( or caret )
 Several of the more frequently used conversion characters are listed below Table Conversion Charater Table Note l for long int h for signedunsigned short L for double
 For example printf ( ) scanf ( ) sqrt ( ) getch ( ) etc
 <eos>","The standard input functions are scanf(), getchas(), getch(), gets(), etc. Similarly, the output functions that are used to display the result on the screen are called standard output functions. The standard library stdio.h provides functions for input and output. Types of I/O: The input/output functions are classified into two types: (i) Formatted functions; (ii). The input function scanf() and output function printf() fall under this category. This is possible in C using the scanf function. The input data can be entered into the computer from a standard input device (keyboard) by means of the C library function scanf(). Several of the more frequently used conversion characters are listed below (Table: Conversion Character Table). Example: include main() char item; int partno; float cost; scanf(s d f item partno cost); The following data items could be entered from the standard input device when the program is executed. Example: include main() char line; scanf(n line); A variation of this feature, which is often more useful, is to precede the characters within the square brackets by a circumflex (or caret). Several of the more frequently used conversion characters are listed below (Table: Conversion Character Table). Note: 'l' for long int, 'h' for signed/unsigned short, 'L' for double. For example, printf(), scanf(), sqrt(), getch(), etc."
file2_topic_127,"formatted, unformatted, format, output, refers","<task:clean> <sos>
 Unformatted functions Formatted Functions Formatted functions allow the input read from the keyboard or the output displayed on screen to be formatted according to our requirements
 While displaying a certain data on screen we can specify the number of digits after decimal point number of spaces before the data the position where the output is to be displayed etc using formatted functions
 Formatted Input Formatted input refers to an input data that has been arranged in a particular format
 Formatted Output Formatted output refers to the output of data that has been arranged in a particular format
 screen This function can be used to output any combination of numerical values single character and strings
 argn ) where control string refers to a string that contains formatting information and arg arg argn are arguments that represent the individual output data item
 Format for Integer Output wd where w is the integer number specifying the minimum field width of output data
 The display is right justified For example char str MY NEPAL Unformatted Functions Unformatted functions do not allow the user to read or display data in desired format
 ( PUBack ) include include void main ( ) char class country printf ( sclass ) printf ( cclass ) printf ( s rc class class ) getch ( ) Write the various input unformatted function and describe any two
 Write the various output unformatted function and describe any two
 <eos>","Unformatted Functions. Formatted Functions. Formatted functions allow input read from the keyboard or output displayed on screen to be formatted according to our requirements. While displaying data on screen, we can specify the number of digits after the decimal point, the number of spaces before the data, the position where the output is to be displayed, etc., using formatted functions. Formatted Input. Formatted input refers to input data that has been arranged in a particular format. Formatted Output. Formatted output refers to output data that has been arranged in a particular format. Screen. This function can be used to output any combination of numerical values, single characters, and strings. (`argn`) Here, `control string` refers to a string that contains formatting information, and `arg`, `arg`, ..., `argn` are arguments that represent the individual output data item. Format for Integer Output: `wd`, where `w` is an integer number specifying the minimum field width of output data. The display is right-justified. For example: `char str[] = ""MY NEPAL"";` Unformatted Functions. Unformatted functions do not allow the user to read or display data in a desired format. (PUBack). include include void main ( ) { char class; char country; printf ( sclass ); printf ( cclass ); printf ( s rc class class ); getch ( ); } Write the various input unformatted functions and describe any two. Write the various output unformatted functions and describe any two."
file2_topic_128_0,"cost, item, partno, scanf, arg","<task:clean> <sos>
 scanf ( ) stands for scan formatted
 The general syntax of scanf function is scanf ( control string arg arg argn ) where control string refers to a string containing certain required formatting information so also known as format string and arg arg argn are arguments that represent the individual input data items
 Example include main ( ) int a b c scanf ( d d d a b c ) Suppose the input data items that are entered as Then the following assignment will result a b c If the data had been entered as Then the assignment would be a b c Now suppose that the data had been entered as Then the assignments would be a b c Finally suppose that the data had been entered as The resulting assignments would now be a b c Example include main ( ) int i float x char c If the data items are entered as T The output would now be The remaining two input characters ( and T ) will be ignored
 Example include main ( ) short ix iy long lx ly double dx dy scanf ( hd ld lf ix ly dx ) The control string in the first scanf function indicates that the first data item will be assigned to a short decimal integer variable
 The control string in the second scanf function indicates that the first data item will have a maximum field width of characters and it will be assigned to short octal integer variable the second data item will have a maximum field width of characters and it will be assigned to a long hexadecimal integer variable and the third data item will have a maximum field width of characters and it will be assigned to double precision variable
 Example include main ( ) int partno float cost scanf ( s d f item partno cost ) If the corresponding data item are input fasterner fasterner is assigned to item and will be assigned to cost
 <eos>","`scanf()` stands for ""scan formatted."" The general syntax of the `scanf()` function is `scanf(control string, arg, arg, ..., argn)`. Here, the `control string` refers to a string containing certain required formatting information, also known as a format string. The arguments `arg, arg, ..., argn` represent the individual input data items.
 
 Examples include:
 For a C program with `main()` `{` `int a, b, c;` `scanf(d d d, a, b, c);` `}`:
 * Suppose the input data items are entered as. Then the following assignment will result: `a, b, c`.
 * If the data had been entered as. Then the assignment would be: `a, b, c`.
 * Now, suppose that the data had been entered as. Then the assignments would be: `a, b, c`.
 * Finally, suppose that the data had been entered as. The resulting assignments would now be: `a, b, c`.
 
 Another example: `main()` `{` `int i; float x; char c;` `}`. If the data items are entered as `T`, then the output would show that the remaining two input characters (`(` and `T`) will be ignored.
 
 Another example includes: `main()` `{` `short ix, iy; long lx, ly; double dx, dy;` `scanf(hd ld lf, ix, ly, dx);` `}`. The control string in this first `scanf()` function indicates that the first data item will be assigned to a short decimal integer variable. The control string in the second `scanf()` function indicates that the first data item will have a maximum field width of characters and it will be assigned to a short octal integer variable; the second data item will have a maximum field width of characters and it will be assigned to a long hexadecimal integer variable; and the third data item will have a maximum field width of characters and it will be assigned to a double-precision variable.
 
 Another example: `main()` `{` `int partno; float cost;` `scanf(s d f, item, partno, cost);` `}`. If the corresponding data items are input as `fasterner fasterner`, `fasterner` is assigned to `item`, and `fasterner` will be assigned to `cost`."
file2_topic_128_1,"cost, item, partno, scanf, arg","<task:clean> <sos>
 In contrast to scanf ( ) function the arguments in a printf ( ) function do not represent memory addresses and therefore are not preceded by ampersands
 For example include main ( ) char item int partno float cost printf ( sdf item partno cost ) Suppose fastener and have been assigned to name partno and cost
 It offers an alternative function of scanf ( ) function for reading strings
 Unlike scanf ( ) function it doesnot skip whitespaces
 <eos>","In contrast to the `scanf()` function, the arguments in a `printf()` function do not represent memory addresses and, therefore, are not preceded by ampersands. For example, within a `main()` function, with `char item`, `int partno`, and `float cost` declared, a `printf(sdf, item, partno, cost)` call demonstrates this. Suppose 'fastener' and other corresponding values have been assigned to `item`, `partno`, and `cost`. It offers an alternative to the `scanf()` function for reading strings. Unlike the `scanf()` function, it does not skip whitespace."
file2_topic_129,"eof, returns, success, error, significance","<task:clean> <sos>
 The function returns the number of data items that have been entered successfully
 When the program receives this signal the file reading function returns EOF which is a constant defined in the file stdioh and its value is
 It returns the integer written to file on success and EOF on error getw ( ) used to read integer value from a file
 It returns the next integer from the ip file on success and EOF on error
 What is the significance of EOF
 <eos>","The function returns the number of data items that have been entered successfully. When the program receives this signal, the file reading function returns EOF, which is a constant defined in the file stdioh. The getw() function is used to read an integer value from a file; it returns the integer written to file on success and EOF on error. It returns the next integer from the ip file on success and EOF on error. What is the significance of EOF?"
file2_topic_130,"argu, command, line, argument, argc","<task:clean> <sos>
 Actually the arguments represent pointers that indicate the addresses of the data items within the computers memory
 In fact main can take two arguments called argi and argu and the information contained in the command line ( ie
 The variable argc is an argument counter that the number of arguments on the command line
 The argu is an argument vector and represents an array of character pointers that point to the command line arguments
 For instance for the command line given above argc is three and argu is an array of three pointers to strings as shown below argu PROGRAM argu X_FILE argu Y _FILE In order to access the command line arguments we must declare the main function and its parameters as follows main ( argc argu ) int argc char argu WAP that will receive a filename and a line of text as command line arguments and write the text to the file
 The command line F_ TEXT AAAAAA BBBBBB GGGGGG Each word in the command line is an argument to the main and therefore the total number of argument is
 The argument vector argv points to the string TEXT and therefore the statement
 The argument vector argv contains the entire command line in the memory and therefore the statement printf ( sn is argvi ) prints the argument from the memory
 <eos>","Actually, the arguments represent pointers that indicate the addresses of the data items within the computer's memory. In fact, `main` can take two arguments, typically called `argc` and `argv`, which handle the information contained in the command line. The variable `argc` is an argument counter that stores the number of arguments on the command line. The `argv` is an argument vector and represents an array of character pointers that point to the command-line arguments. For instance, for a command line like `PROGRAM X_FILE Y_FILE`, `argc` is three, and `argv` is an array of three pointers to strings, as shown below: `argv[0]` points to ""PROGRAM"", `argv[1]` points to ""X_FILE"", and `argv[2]` points to ""Y_FILE"". In order to access the command-line arguments, we must declare the `main` function and its parameters as follows: `int main(int argc, char *argv[])`. Write a program that will receive a filename and a line of text as command-line arguments and write the text to the file. For example, consider the command line `F_TEXT AAAAAA BBBBBB GGGGGG`. Each word in the command line is an argument to `main`, and therefore, the total number of arguments is. The argument vector `argv` points to the string ""TEXT"", and therefore, the statement. The argument vector `argv` contains the entire command line in memory, and therefore, the statement `printf(""%s"", argv[i]);` prints the argument from memory."
file2_topic_131,"time, handle, heshe, cumbestsome, soon","<task:clean> <sos>
 Thus the user may enter whatever he or she wishes and then presses the Enter Key
 In both cases input accepted as soon as the character typed
 At the same time it is cumbestsome and time consuming to handle large volume of data through keyboard
 It takes a lot of time to enter the entire data
 If the user makes a mistake while entering the data heshe has to start from the beginning again
 If the same data is to be entered again at some later stage again we have to enter the same data
 <eos>","Thus, the user may enter whatever he or she wishes and then presses the Enter key. In both cases, input is accepted as soon as the character is typed. At the same time, it is cumbersome and time-consuming to handle a large volume of data through the keyboard. It takes a lot of time to enter the entire data. If the user makes a mistake while entering the data, he or she has to start from the beginning again. If the same data is to be entered again at some later stage, we have to enter it again."
file2_topic_132,"width, field, item, specified, characters","<task:clean> <sos>
 It is possible to limit the number of such characters by specifying a maximum field width for that data item
 To do so an unsigned integer indicating the field width is placed within the control spring between the The data item may contain fewer characters than the specified filed width
 However the number of characters in the actual data item can not exceed the specified field width
 Any characters that extend beyond the specified filed width will not be read
 Such leftover characters may be incorrectly interpreted as the components of the next data item
 The flags may be blank space or
 Flags Meanings Data item is left justified within the field
 The blank spaces required to fill the TableFlags Â¾ Field Width Optional The field width is an integer specifying the minimum output field width
 If the number of characters in the corresponding data item is less than the specified field width then the data item will be preceded by enough leading blanks to fill the specified field
 If the number of characters in the data item exceeds the specified field width then additional space will be allocated to the data item so that the entire data item will be displayed
 If the length of the variable is less than the specified field width then the variable is right justified with leading blanks
 <eos>","It is possible to limit the number of such characters by specifying a maximum field width for that data item. To do so, an unsigned integer indicating the field width is placed within the control string. The data item may contain fewer characters than the specified field width. However, the number of characters in the actual data item cannot exceed the specified field width. Any characters that extend beyond the specified field width will not be read. Such leftover characters may be incorrectly interpreted as the components of the next data item. The flags may be blank space, or specify meanings: 'Data item is left justified within the field'. The blank spaces required to fill the field. (TableFlags: Â¾ Field Width Optional). The field width is an integer specifying the minimum output field width. If the number of characters in the corresponding data item is less than the specified field width, then the data item will be preceded by enough leading blanks to fill the specified field. If the number of characters in the data item exceeds the specified field width, then additional space will be allocated to the data item so that the entire data item will be displayed. If the length of the variable is less than the specified field width, then the variable is right justified with leading blanks."
file2_topic_133,"parameters, parameter, regular, needed, specifier","<task:clean> <sos>
 The arguments can be written as constants single variable or array names or more complex expressions
 Parameters ( as many as needed ) Each parameter consists of a data type specifier followed by an identifier like any regular variable declaration
 The different parameters are separated by commas
 These are known as actual parameter
 <eos>","The arguments can be written as constants, single variable or array names, or more complex expressions. Parameters (as many as needed). Each parameter consists of a data type specifier followed by an identifier, like any regular variable declaration. The different parameters are separated by commas. These are known as actual parameters."
file2_topic_134,"control, mean, statements, different, statement","<task:clean> <sos>
 There are two types of control statements
 What do you mean by control statements
 What is control statement
 Describe different control statement
 <eos>",There are two types of control statements. What do you mean by control statements? What is a control statement? Describe different control statements?
file2_topic_135,"year, ifelse, large, leap, yearn","<task:clean> <sos>
 Decisions if ifelse nested ifelse switch Loops Loops are used when we want to execute a part of program or block of statement several times
 Following are decision making statements if statements ifelse statements else if statement Nested ifelse statement switch statement if statement The if statement is a powerful decision making statement and is used to control the flow of execution of statements
 For example if ( condition ) if ( condition ) statementA else statement A Here we have ifelse inside both if block and else block else if ( condition ) statementB else statementB Program to find whether a year is leap or not include main ( ) int year clrscr ( ) printf ( Enter year ) if ( year ) if ( year ) printf ( Leap year n ) else printf ( Not leap yearn ) getch ( ) This can also be written in place of nested if else as if ( ( year year ) year ) printf ( d is a leap yearn year ) else printf ( d is not a leap yearn year ) Program to find largest number from three given number include main ( ) int a b c large clrscr ( ) printf ( Enter three numbers ) scanf ( ddd a b c ) if ( ab ) if ( ac ) large a else large c else if ( bc ) large b else large c printf ( Largest number is dn large ) getch ( ) Output Enter the numbers Largest num is else if statement This is a type of nesting in which there is an ifelse statement in every else part except the last else part
 Statements switch break continue goto Switch Statement This is a multidirectional conditional control statement
 The statements under case can be any valid C statements like ifelse while for or even another switch statement
 <eos>","Decision-making statements include `if`, `if-else`, nested `if-else`, and `switch`; loops are used when one wants to execute a part of a program or a block of statements several times. The following are various decision-making statements: `if` statements, `if-else` statements, `else-if` statements, nested `if-else` statements, `switch` statements, and `if` statements. The `if` statement is a powerful decision-making construct, used to control the flow of execution of statements. For example, `if (condition) { if (condition) statementA else statementA }`; here, an `if-else` statement is present inside both the `if` block and the `else` block; another example is `else if (condition) statementB else statementB`. A program to determine if a year is a leap year is as follows: `include main ( ) int year clrscr ( ) printf ( Enter year ) if ( year ) if ( year ) printf ( Leap year n ) else printf ( Not leap yearn ) getch ( )`; this can also be written in place of the nested `if-else` as: `if ( ( year year ) year ) printf ( d is a leap yearn year ) else printf ( d is not a leap yearn year )`. A program to find the largest number from three given numbers is as follows: `include main ( ) int a b c large clrscr ( ) printf ( Enter three numbers ) scanf ( ddd a b c ) if ( ab ) if ( ac ) large a else large c else if ( bc ) large b else large c printf ( Largest number is dn large ) getch ( )`; sample output is: `Output Enter the numbers Largest num is`. An `else if` statement represents a type of nesting in which an `if-else` statement is present in every `else` part, with the exception of the last `else` part. Other control statements include `switch`, `break`, `continue`, and `goto`. The `switch` statement, specifically, is a multidirectional conditional control statement. The statements under a `case` can be any valid C statements, such as `if-else`, `while`, `for`, or even another `switch` statement."
file2_topic_136_0,"factorial, transfer, fib, temp, num","<task:clean> <sos>
 Print Enter a number whose factorial is to be calculated
 Initilize fact to and counter i to For inum factfacti i End of For Print fact as factorial of the number num
 WAP to find the factorial of a number using recursive method long int factorial ( int n ) if ( n ) return ( ) else return ( nfactorial ( n ) ) main ( ) int num printf ( Enter a number ) scanf ( d num ) printf ( The factorial is ld factorial ( num ) ) Output Enter a number The factorial is The Towers of Hanoi The Towers of Hanoi is a well known childrens game played with three poles and a number of different size disk
 <eos>","Print 'Enter a number whose factorial is to be calculated'. Initialize `fact` and `counter i`. For `i` in `num`, `fact` becomes `fact` times `i`. End of `For`. Print `fact` as the factorial of `num`. Write a program to find the factorial of a number using a recursive method. Function `long int factorial(int n)`: if `n`, return `()`; else, return `nfactorial(n)`. In `main()`: declare `int num`; print 'Enter a number'; call `scanf` with `d` and `num`; print 'The factorial is ld factorial(num)'. Output: 'Enter a number', 'The factorial is'. The Towers of Hanoi. This is a well-known children's game played with three poles and a number of different-sized disks."
file2_topic_136_1,"factorial, transfer, fib, temp, num","<task:clean> <sos>
 The Tower of Hanoi_solved using recursion include void transfer ( int n char from char to char temp ) function prototype main ( ) left Center Right int n printf ( Welcome to the Tower of Hanoi nn ) printf ( How many disk ) scanf ( d n ) printf ( n ) transfer ( n l R C ) void transfer ( int n char from char to char temp ) transfer n disks from one pole to another n number of disks from origin to destination temp temporary storage if ( n ) move n disk from origin to temporary transfer ( n from temp to ) move nth disk from origin to destination printf ( Move disk dfromctocn n from to ) move n disks from temporary to destination transfer ( n temp to from ) return Program Fibonacci number by recursion include include int fib ( int x ) if ( x x ) return else return ( fib ( x ) fib ( x ) ) main ( ) int i n no clrscr ( ) printf ( how many no in series ) for ( i in i ) no fib ( i ) printf ( d no ) getch ( ) WAP to add the natural numbers using recursive method long int add ( int n ) If ( n ) return else return ( n add ( n ) ) main ( ) int num clrscr ( ) printf ( Enter How many numbers ) scanf ( d num ) printf ( The sum of natural number is ld add ( num ) ) getch ( ) Output Enter How many numbers The sum of natural numbers is More about main ( ) We know that every C program should have one main ( ) function and that it marks the beginning of the program
 Write a program to calculate factorial of n number by using recursive function where n is the number inputted by user
 <eos>","The Tower of Hanoi problem, solved using recursion, includes a `void transfer(int n, char from, char to, char temp)` function prototype. Within the `main()` function, variables such as `left`, `Center`, `Right`, and `int n` are used; the program prints 'Welcome to the Tower of Hanoi', prompts 'How many disk', reads `n` using `scanf(d, n)`, prints a newline, and then calls `transfer(n, l, R, C)`. The `void transfer(int n, char from, char to, char temp)` function is designed to transfer `n` disks from one pole to another, where `n` represents the number of disks, `from` the origin, `to` the destination, and `temp` for temporary storage. If `n` is true, it first moves `n` disk from the origin to temporary, performing `transfer(n, from, temp, to)`. Next, it moves the nth disk from the origin to the destination, printing 'Move disk dfromctocn n from to'. Finally, it moves `n` disks from temporary to destination, performing `transfer(n, temp, to, from)`, then returns. A program for Fibonacci numbers, using recursion, includes necessary header files. It defines an `int fib(int x)` function such that if `x x` is true, it returns; otherwise, it returns `(fib(x) fib(x))`. In its `main()` function, integers `i`, `n`, and `no` are declared. It calls `clrscr()`, prints 'how many no in series', and then executes a `for (i in i)` loop where `no` is assigned `fib(i)` and `d no` is printed. The program then calls `getch()`. A program to add natural numbers utilizes a recursive method, defining a `long int add(int n)` function. If `n` is true, it returns; otherwise, it returns `(n add(n))`. Its `main()` function declares an `int num`, calls `clrscr()`, prints 'Enter How many numbers', reads `num` using `scanf(d, num)`, then prints 'The sum of natural number is `ld`' followed by the result of `add(num)`. Finally, `getch()` is called. The output for the natural numbers program indicates 'Enter How many numbers' and 'The sum of natural numbers is'. More broadly concerning `main()`, we know that every C program should have one `main()` function, and that it marks the beginning of the program. A program is to be written to calculate the factorial of an `n` number using a recursive function, where `n` is the number inputted by the user."
file2_topic_136_2,"factorial, transfer, fib, temp, num","<task:clean> <sos>
 Write a program in C to allow a user to enter an integer number interactively and display its factorial value
 <eos>","<sos>
 Write a C program to allow a user to interactively enter an integer number and display its factorial value.
 <eos>"
file2_topic_137,"condition, statement, stat, true, executed","<task:clean> <sos>
 This statement is used to test a condition and take one of two possible actions If the condition is true then a single statement or a block of statements is executed ( one part of the program ) other wise another single statement or a block of statements is executed ( other part of the program )
 syntax if ( condition ) if ( condition ) statement statement statement n There can be a single statement or a block of statements after the if part
 Flowchart Fig Flowchart of if control statement Here if the condition is true ( nonzero ) then statement is executed and if it is false ( zero ) then the next statement which is immediately after the if control statement is executed
 The syntax is if ( condition ) if ( condition ) statement else statement statement else statement Flowchart Fig Flowchart of ifelse control statement Here if the condition is true then statement is executed and if it is false then statement is executed
 After this the control transfers to the next statement which is immediately after the ifelse control statement
 if ( condition ) if ( condition ) statementA statementA else elseif ( condition ) if ( condition ) statementB statementB elseif ( condition ) else statementC if ( condition ) else statementC statement D else statement D The flowchart for else if statement is False True Condition False True Condition Stat A False True Condition Stat B Stat D Stat C Next Statement Program to find out the grade of a student when the marks of subjects are given
 <eos>","This statement is used to test a condition and take one of two possible actions. If the condition is true, then a single statement or a block of statements is executed (one part of the program); otherwise, another single statement or a block of statements is executed (the other part of the program).
 
 Syntax: `if (condition) if (condition) statement statement statement n`. There can be a single statement or a block of statements after the 'if' part.
 
 The flowchart (Fig.) illustrates the 'if' control statement. Here, if the condition is true (nonzero), then the statement is executed. If it is false (zero), then the next statement, which is immediately after the 'if' control statement, is executed.
 
 The syntax for an 'if-else' statement is: `if (condition) if (condition) statement else statement statement else statement`. The flowchart (Fig.) illustrates the 'if-else' control statement. Here, if the condition is true, then the corresponding 'if' statement is executed; and if it is false, then the corresponding 'else' statement is executed.
 
 After this, the control transfers to the next statement, which is immediately after the 'if-else' control statement.
 
 The following shows the structure for an 'if-else-if' statement: `if (condition) if (condition) statementA statementA else elseif (condition) if (condition) statementB statementB elseif (condition) else statementC if (condition) else statementC statement D else statement D`. The flowchart for the 'else if' statement includes elements such as: 'False', 'True', 'Condition', 'Stat A', 'Stat B', 'Stat D', 'Stat C', and 'Next Statement'. An example program is to find out the grade of a student when the marks of subjects are given."
file2_topic_138,"nested, falling, ladder, frequently, block","<task:clean> <sos>
 else if statement Nested if else statement We can have another if else statement in the if block or the else block
 This is called nested ifelse statement
 This type of nesting is frequently used in programs and is also known as else if ladder
 This is known as falling through cases
 <eos>","An 'else if' statement, often structured as a 'nested if-else statement', allows for another 'if-else' statement to be placed within either its 'if' block or its 'else' block. This structure is commonly referred to as a 'nested if-else statement'. This type of nesting is frequently used in programs and is also known as an 'else-if ladder'. This is known as 'falling-through cases'."
file2_topic_139,"recordn, delete, insert, databasen, modify","<task:clean> <sos>
 Create databasen ) printf (
 Insert new recordn ) printf (
 Modify a recordn ) printf (
 Delete a recordn ) printf (
 <eos>","Create database
 Insert new record
 Modify a record
 Delete a record"
file2_topic_140,"extern, tda, specification, storage, class","<task:clean> <sos>
 The keyword auto may be used storage class specification while declaration of variable
 A variable declared inside a function without storage class specification auto is by default an automatic variable
 An external variable must begin with the storage class specifier extern
 A variable declared outside a function without storage class specification extern is by default an external variable but defined after some function
 A program to illustrate the global variables int a void func ( ) a printf ( tda ) void main ( ) clrscr ( ) printf ( tda ) func ( ) printf ( tda ) Output Illustratration of extern variable main ( ) extern float marks func ( ) extern float marks float marks global space but defined after function The extern declaration does not allocate storage space variables
 The extern declaration of marks inside the function informs the compiler that marks is a float type extern variable defined somewhere else in the program
 <eos>","The keyword `auto` may be used as a storage class specifier during variable declaration. A variable declared inside a function without an `auto` storage class specifier is by default an automatic variable. An external variable must be declared with the `extern` storage class specifier. A variable declared outside a function without an `extern` storage class specifier is by default an external variable, even if its definition appears after some function. A program demonstrating global variables includes: `int a`; a function `void func()` containing `a` and `printf(tda)`; and a `void main()` function containing `clrscr()`, `printf(tda)`, `func()`, and `printf(tda)`. The output follows. An illustration of an `extern` variable involves: `main()` containing `extern float marks`; `func()` also containing `extern float marks`; and `float marks` in global space but defined after a function. The `extern` declaration does not allocate storage space for variables. The `extern` declaration of `marks` inside a function informs the compiler that `marks` is a float-type `extern` variable defined elsewhere in the program."
file2_topic_141,"static, increment, register, variable, initial","<task:clean> <sos>
 Default initial value of such type of variable is an unpredictable value which is often called garbage value
 Storage class refers to the performance of a variable and its scope within the program
 Initial Value This is the initial value assigned by the language to a variable if no value is assigned to variable explicitly by the programmer
 The default initial value for these variable is zero
 Static variables Static variables are declared by writing keyword static in front of the declaration
 static type var_name A static variable is initialized once and the value of a static variable is retained between function call
 If a static variable is not initialized then it is automatically initialized to O
 Program with auto variable Program with static variable void increment ( ) void increment ( ) int i static int i printf ( dn i ) printf ( dn i ) i i main ( ) main ( ) clrscr ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) getch ( ) getch ( ) Output Register variable Register variables are special case of automatic variables
 If a variable is declared as register variable then it is stored in the CPU register
 The scope of register variables is local to the block in which they are declared
 Rules for initializations for register variables are the same as for automatic variables
 What is a static variable
 Write a programin C that uses a static variable
 Memory Block We have studied that it is necessary to declare a variable before using it since compiler has to reserve space for it
 The data type of the variable also has to be mentioned so that the compiler knows how much space need to be reserved
 For example int age The compiler reserves consecutive bytes from memory for this variable and associates the name age with it
 Like all other variables it also has a name to be declared and occupies some space in memory
 <eos>","The default initial value of such a type of variable is an unpredictable value, which is often called a garbage value. Storage class refers to a variable's performance and its scope within the program. Initial Value: This is the initial value assigned by the language to a variable if no value is explicitly assigned to it by the programmer. The default initial value for these variables is zero. Static Variables: Static variables are declared by writing the keyword 'static' in front of their declaration. `static type var_name`. A static variable is initialized once, and its value is retained between function calls. If a static variable is not initialized, then it is automatically initialized to 0. Program with auto variable: void increment ( ) int i printf ( dn i ) i i main ( ) clrscr ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) getch ( ); Program with static variable: void increment ( ) static int i printf ( dn i ) i i main ( ) clrscr ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) increment ( ) getch ( ); Output. Register Variables: Register variables are a special case of automatic variables. If a variable is declared as a register variable, then it is stored in the CPU register. The scope of register variables is local to the block in which they are declared. Rules for initializations for register variables are the same as for automatic variables. What is a static variable? Write a program in C that uses a static variable. Memory Block: We have studied that it is necessary to declare a variable before using it since the compiler has to reserve space for it. The data type of the variable also has to be mentioned so that the compiler knows how much space needs to be reserved. For example, `int age`. The compiler reserves consecutive bytes from memory for this variable and associates the name 'age' with it. Like all other variables, it also has a name that must be declared and occupies some space in memory."
file2_topic_142,"scope, life, block, defined, local","<task:clean> <sos>
 The scope of it is local to the block in which the variable is defined
 Again its life is till the control remains within the block in which the variable is defined
 Scope Scope of a variable can be defined as the region over which the variable is visible or valid
 The scope is global ie
 Its scope is local to the block in which the variable is defined
 Again the life time is global ie
 <eos>","Its scope is local to the block in which the variable is defined. Again, its lifetime lasts as long as control remains within the block where the variable is defined. The scope of a variable can be defined as the region over which the variable is visible or valid. The scope is global, i.e., Its scope is local to the block in which the variable is defined. Again, the lifetime is global, i.e.,"
file2_topic_143,"pole, disks, disk, poles, centre","<task:clean> <sos>
 Each disk has a hole in the centre allowing it be stacked around any of the poles
 Initially the disks are stacked on the leftmost pole in the order of decreasing size ie
 the largest on the bottom and the smallest on the top
 The object of the game is to transfer the disks from the leftmost pole to the rightmost pole without ever placing a larger disk on the top of a smaller disk
 Only one disk may be moved at a time and each disk must always be placed around one of the poles
 The general strategy is to consider one of the poles to be the origin and another to be the destination
 The third pole will be used for immediate storage
 Thus allowing the disks to be moved without placing a larger disk over a smaller one
 Assume there are n disks numbered from smallest to largest
 If the disks are initially stacked on the left pole the problem of moving all n disks to the right pole can be stated in the following recursive manner
 Move the top n disks from the left pole to the centre pole
 Move the nth disk ( the largest disk ) to the right pole
 Move the n disks on the centre pole to the right pole
 In order to program this game we first label the poles so that the left pole is represented as L the centre pole as C and the right pole as R We then construct a recursive function called transfer that will transfer n disks from one pole to another
 Let us refer to the individual poles with the char type variable from to and temp for the origin destination and the temporary storage respectively
 Thus if we assign the character L to from R to and C to temp we will in effect be specifying the movement of n disks from the leftmost pole to righmost pole using the centre pole for immediate storage
 <eos>","Each disk has a hole in the centre, allowing it to be stacked around any of the poles. Initially, the disks are stacked on the leftmost pole in the order of decreasing size, i.e., the largest on the bottom and the smallest on the top. The object of the game is to transfer the disks from the leftmost pole to the rightmost pole without ever placing a larger disk on top of a smaller disk. Only one disk may be moved at a time, and each disk must always be placed around one of the poles. The general strategy is to consider one of the poles to be the origin and another to be the destination. The third pole will be used for immediate storage, thus allowing the disks to be moved without placing a larger disk over a smaller one. Assume there are n disks, numbered from smallest to largest. If the disks are initially stacked on the left pole, the problem of moving all n disks to the right pole can be stated in the following recursive manner:
 Move the top n disks from the left pole to the centre pole.
 Move the nth disk (the largest disk) to the right pole.
 Move the n disks on the centre pole to the right pole.
 In order to program this game, we first label the poles so that the left pole is represented as L, the centre pole as C, and the right pole as R. We then construct a recursive function called ""transfer"" that will transfer n disks from one pole to another. Let us refer to the individual poles with the char type variables from, to, and temp, for the origin, destination, and temporary storage, respectively. Thus, if we assign the character L to from, R to to, and C to temp, we will in effect be specifying the movement of n disks from the leftmost pole to the rightmost pole using the centre pole for immediate storage."
file2_topic_144_0,"source, content, file, welcome, college","<task:clean> <sos>
 The for loop that follows immediately write the remaining arguments the file TEXT
 Program also prints two output one from the file TEXT and the other from the system memory
 include void main ( ) FILE fp fp fopen ( Ctesttxt w ) if ( fp NULL ) else printf ( File has been successfully created ) fputs ( Welcome to Eastern College of Engineering fp ) fclose ( fp ) output goto C drive and see the text file testtxt in notepad where the content is Welcome to Program to open the file texttxt created above read its content display to the screen include Void main ( ) FILE fp char s fp fopen ( ctesttxt r ) if ( fp NULL ) printf ( In file can not be opened ) exit ( ) fgets ( s fp ) printf ( in the text from file is ts s ) fclose ( fp ) getch ( ) OUTPUT The text from file is Welcome to Eastern College of Engineering
 Program that opens a file and copies all its content to another file
 Take source destination file from user include Void main ( ) FILE fsource fdest char ch source dest printf ( In Enter source file name t ) gets ( source ) printf ( Enter destination file name t ) gets ( dest ) fsource fopen ( source r ) if ( fsource NULL ) printf ( n source file can not be opened ) exit ( ) fdest fopen ( dest w ) if ( fdest NULL ) exit ( ) while ( ( ch fgetc ( source )
 The syntax is long ftell ( FILE fp ) Some Programs Program to write some text welcome to my college to a data file in binary mode
 <eos>","The for loop that follows immediately writes the remaining arguments to the file TEXT. The program also prints two outputs: one from the file TEXT and the other from the system memory. A program segment includes `void main()`, `FILE fp`, and the assignment `fp = fopen(""Ctest.txt"", ""w"")`. It checks `if (fp == NULL)`; otherwise, it prints `File has been successfully created`, writes `Welcome to Eastern College of Engineering` to `fp` using `fputs`, and then closes `fp`. For output, go to the C drive and see the text file `test.txt` in Notepad, where the content is `Welcome to`. A program is then presented to open the file `text.txt` (created above), read its content, and display it to the screen. This program includes `Void main()`, declares `FILE fp` and `char s`, and assigns `fp = fopen(""ctest.txt"", ""r"")`. If `fp` is `NULL`, it prints `In file can not be opened` and calls `exit()`. It then reads `s` from `fp` using `fgets`, prints `in the text from file is ts s`, closes `fp`, and calls `getch()`. The output is: `The text from file is Welcome to Eastern College of Engineering`. This is a program that opens a file and copies all its content to another file. It takes the source and destination file names from the user. The program includes `Void main()`, declares `FILE fsource`, `fdest`, `char ch`, `source`, and `dest`. It prompts the user to `Enter source file name` using `printf` and reads it with `gets(source)`. It then prompts `Enter destination file name` and reads it with `gets(dest)`. `fsource` is opened for reading from the `source` file. If `fsource` is `NULL`, it prints `n source file can not be opened` and calls `exit()`. `fdest` is then opened for writing to the `dest` file. If `fdest` is `NULL`, it calls `exit()`. The program then enters a `while` loop starting with the condition `ch = fgetc(source)`. The syntax for `ftell` is `long ftell(FILE fp)`. Some programs include one to write the text `welcome to my college` to a data file in binary mode."
file2_topic_144_1,"source, content, file, welcome, college","<task:clean> <sos>
 Read its content and display it include Void main ( ) FILE fptr char c fptr fopen ( testtxt wb ) if ( fptr NULL ) printf ( n File can not be created ) fputs ( welcome to my college fptr ) printf ( The content from file n ) while ( cc fget c ffptr ) )
 EOF ) printf ( c C ) fclose ( fptr ) output The Content from file Welcome to my college
 Read and display the same from the file
 Write a program that read a line of text and store file then print the content of file
 Write a program to open a file in write mode take input form the keyboard and write it to the file
 <eos>","Read and display its content. Include `Void main()`. Declare `FILE fptr` and `char c`. `fptr` opens `test.txt` in write binary mode (`wb`). If `fptr` is `NULL`, print 'File cannot be created'. Write 'welcome to my college' to `fptr`. Print 'The content from file'. While `c` is read from `fptr` (until `EOF`), print `c`. Close `fptr`. Output: 'The Content from file Welcome to my college'. Read and display the same content from the file. Write a program that reads a line of text, stores it to a file, and then prints the file's content. Write a program to open a file in write mode, take input from the keyboard, and write it to the file."
file2_topic_145,"acceptable, elements, illustrated, perfectly, element","<task:clean> <sos>
 int a is a declaration of one dimensional array of type int
 Its elements can be illustrated as st element nd rd th th element a a a a a The elements of an integer array a are stored continuous memory locations
 int a b b a not acceptable if ( ab ) _ _ _ _ not acceptable we can assign integer values to these individual element directly a a a a a A loop can be used to input and output of the elements of array
 a a a a a a int a In above example the values are less than the elements of array
 int a is perfectly acceptable
 <eos>","<sos>
 int a[] is a declaration of a one-dimensional array of type int. Its elements can be illustrated as: a[0] (1st element), a[1] (2nd element), a[2] (3rd element), a[3] (4th element), and a[4] (5th element). The elements of an integer array 'a' are stored in continuous memory locations. The syntax ""int a b b a"" is not acceptable. Similarly, an expression like ""if (ab) ____"" is also not acceptable. We can assign integer values directly to these individual elements: a[0], a[1], a[2], a[3], and a[4]. A loop can be used for the input and output of array elements. For an 'int' array 'a' (e.g., with elements a[0] through a[5]), the number of provided values can be less than the total number of array elements. The declaration 'int a[]' is perfectly acceptable.
 <eos>"
file2_topic_146,"sizen, storage, follow, declaration, like","<task:clean> <sos>
 declaration of an array data_type array_namesize or if we want to add storage classes then that look like storage_class data_type array_namesize where storage_class refers to the storage class of the array
 data_type is the data type of array
 Initialization of array The array is initialized like follow if we need time of declaration data_type array_namesize value value valuen For eg
 The general format for declaring multidimensional array is data_type array_name size size sizen We can add storage class in above declaration if necessary like follow storage_class data_type array_namesize size sizen where storage_class part is optional
 <eos>","The declaration of an array uses the format `data_type array_namesize`. Alternatively, if a storage class is desired, the declaration takes the form `storage_class data_type array_namesize`. Here, `storage_class` refers to the array's storage class. `data_type` specifies the data type of the array. Array Initialization: The array is initialized as follows when declared: `data_type array_namesize value value valuen`. For example, The general format for declaring a multidimensional array is `data_type array_name size size sizen`. A storage class can be added to the above declaration, if necessary, as follows: `storage_class data_type array_namesize size sizen`, where the `storage_class` part is optional."
file2_topic_147,"accessing, index, multidimensional, array, help","<task:clean> <sos>
 array_name is name of the array
 It is user defined name for array
 The name of array may be any valid identifier
 The accessing function for array is array_nameindex or subscript For eg
 Accessing elements of multidimensional array We can access the multidimensional array with the help of following accessing function array_name index index
 An array name can be named as an argument for the prototype declaration and in function header
 <eos>","An `array_name` is the name of an array. It is a user-defined name that must be a valid identifier. The method for accessing array elements is `array_name[index]` or `array_name[subscript]`. For example, to access elements of a multidimensional array, the following syntax is used: `array_name[index][index]`. An array name can also be used as an argument in a prototype declaration and in a function header."
file2_topic_148,"stringh, manipulating, fprintf, fget, functions","<task:clean> <sos>
 In C header file stringh provides special function for manipulating strings
 In order to use these function we must include stringh file
 Unformatted IO functions a ) Character IO functions fget ( ) It is used to read a character from a file
 Formatted IO functions fprintf ( ) This function is used to write some integer float char or string to a file
 <eos>","The C header file `string.h` provides special functions for manipulating strings. In order to use these functions, we must include the `string.h` file. Among unformatted I/O functions, character I/O functions such as `fgetc()` are used to read a character from a file. Formatted I/O functions, such as `fprintf()`, are used to write an integer, float, character, or string to a file."
file2_topic_149,"dma, freeing, allocating, dynamic, run","<task:clean> <sos>
 include void main ( ) int a int i j clrsc ( ) for ( c i i ) for ( jo j j ) Printf ( dt ( ( ai ) j ) ) printf ( n ) getch ( ) output Dynamic Memory Allocation ( DMA ) The process of allocating and freeing memory at run time is ka Dynamic Memory Allocation
 In such situation DMA will be useful
 This is ka DMA
 DMA refers allocating and freeing memory at run time
 <eos>","The `include void main () int a int i j clrsc () for (c i i) for (jo j j) Printf (dt ((ai) j)) printf (n) getch ()` is the output related to Dynamic Memory Allocation (DMA). The process of allocating and freeing memory at runtime is known as Dynamic Memory Allocation. In such situations, DMA is useful. This is known as DMA. DMA refers to allocating and freeing memory at runtime."
file2_topic_150,"realloc, allocated, previously, space, free","<task:clean> <sos>
 This reserves the memory required by the program and returns this resource to the system once the use of reserved space utilized
 In some cases it is not possible to know the size of the memory required well ahead and to keep a lot of memory reserved is not also good practice
 There are library functions malloc ( ) calloc ( ) free ( ) and realloc ( ) for memory management
 ) free ( ) The builtin function frees previously allocated space by calloc malloc or realloc function
 This can be done using free ( ) function
 Ths this function is used to release the space when it is not required
 ) realloc ( ) This function is used to modify the size of previously allocated space
 Sometimes the previously allocated memory is not sufficient we nned additional space and sometime the allocated memory is much larger than necessary
 In both situations we can change the memory size already allocated with the help of function realloc ( )
 Program to illustrate the use of realloc ( ) include include include void main ( ) charname clrscr ( ) name ( char ) malloc ( ) strcpy ( nameB
 The space is created like II
 <eos>","<task:clean> <sos>
 This reserves the memory required by the program and returns this resource to the system once the reserved space is no longer utilized. In some cases, it is not possible to know the size of the memory required well in advance, and keeping a lot of memory reserved is also not good practice. There are library functions: `malloc ( )`, `calloc ( )`, `free ( )`, and `realloc ( )` for memory management. `free ( )`: This built-in function frees previously allocated space by `calloc ( )`, `malloc ( )`, or `realloc ( )` functions. This can be done using the `free ( )` function. Thus, this function is used to release the space when it is no longer required. `realloc ( )`: This function is used to modify the size of previously allocated space. Sometimes, the previously allocated memory is not sufficient, and we need additional space; sometimes, the allocated memory is much larger than necessary. In both situations, we can change the memory size already allocated with the help of the `realloc ( )` function. Program to illustrate the use of `realloc ( )`: include, include, include, `void main ( )`, `char name`, `clrscr ( )`, `name ( char ) malloc ( )`, `strcpy ( name, B )`. The space is created like `II`.
 <eos>"
file2_topic_151,"calloc, ptr, malloc, allocates, size","<task:clean> <sos>
 Theses functions are defined within header file stdlibh and alloch ) malloc ( ) It allocates requested size of bytes and returns a pointer to the first byte of the allocated space
 Its syntax is as ptr ( data_typr malloc ( size_of_block ) where ptr is a pointer of type data_type
 The malloc ( ) returns a pointer to an area of memory with size size_of_block
 ) calloc ( ) The function calloc ( ) provides access to the C memory heap which is available for dynamic allocation of variable_size block of memory
 Unlike malloc ( ) the function calloc ( ) accepts two arguments no_of_blocks and size_of_block
 This parameter no_of_blocks specifies the number of items to allocate and size_of_block specifies the size of each item
 The function calloc ( ) allocates multiple blocks of storage each of the same size and then sets all bytes to zero
 One important difference between malloc ( ) and calloc ( ) is that calloc ( ) initializes all bytes in the allocated block to zero
 Its syntax is ptr ( data_typecalloc ( no_of_blocksize_of_each_block ) For example x ( int ) calloc ( sizeof ( int ) ) or x ( int ) calloc ( ) The above statement allocates contiguous space for blocks each of size bytes ie
 Its syntax is Free ( ptr ) Where ptr is a pointer to a memory block which has already been created by malloc ( ) calloc ( ) or realloc ( ) function
 Its syntax is as If the original allocation is done by the statement ptrmalloc ( size ) then reallocationof space may be done by the statement ptrrealloc ( ptrnewsize ) This function allocates a new memory space of new size to the pointer variable ptr and returns a pointer to the first byte of new memory block and on failure the function return NULL
 <eos>","<sos>
 These functions are defined within the header files `stdlib.h` and `alloc.h`. `malloc()` allocates a requested number of bytes and returns a pointer to the first byte of the allocated space. Its syntax is `ptr = (data_type)malloc(size_of_block);`, where `ptr` is a pointer of type `data_type`. The `malloc()` function returns a pointer to an area of memory of `size_of_block` bytes.
 
 `calloc()` provides access to the C memory heap, which is available for dynamic allocation of variable-sized blocks of memory. Unlike `malloc()`, `calloc()` accepts two arguments: `no_of_blocks` and `size_of_block`. The parameter `no_of_blocks` specifies the number of items to allocate, and `size_of_block` specifies the size of each item. The `calloc()` function allocates multiple blocks of storage, each of the same size, and then sets all bytes to zero. One important difference between `malloc()` and `calloc()` is that `calloc()` initializes all bytes in the allocated block to zero. Its syntax is `ptr = (data_type)calloc(no_of_blocks, size_of_each_block);`. For example, `x = (int*)calloc(N, sizeof(int))` allocates contiguous space for `N` blocks, each of `sizeof(int)` bytes, totaling `N * sizeof(int)` bytes.
 
 Its syntax is `free(ptr);`, where `ptr` is a pointer to a memory block that has already been created by the `malloc()`, `calloc()`, or `realloc()` function.
 
 Its syntax for reallocation is: if the original allocation is done by the statement `ptr = malloc(size);`, then reallocation of space may be done by the statement `ptr = realloc(ptr, new_size);`. This function allocates a new memory space of `new_size` for the pointer variable `ptr` and returns a pointer to the first byte of the new memory block. On failure, the function returns `NULL`.
 <eos>"
file2_topic_152_0,"var, semester, branch, structure, struct","<task:clean> <sos>
 Defining a structure arrays of structures structures within structures The general syntax for declaration of a structure is storage_class struct name data_type member data_type member data_typen membern where the storage_class is optional
 For example ) struct student char name int roll_no char branch int semester ) static struct data int day char month_name int year Creating structure variable In above section we have studied about how we declare structure but have not created the structure variable
 Method of creating structure variable I creating structure variable at the time of declaration Example struct student char name int roll_no char branch int semester var var var In this example three structure variables name var var var are created
 struct student structure declaration char name int roll_no char branch int semester var name roll_no branch semester var name roll_no branch semester name var roll_no branch semester struct student var var var Accessing member of structure The accessing concept of member is structure_variable_name
 mark is equivalent to ( varmarks ) Implies that the dot operator acts first and thenunary operatorFor example struct bio char name char address long phno struct bio b b for accessing bphno Initialization of structure A structure is initialized like other data type in C The values to be initialized must appear in order sa in the definition of structure within braces and separated by commas
 Its syntax is struct structure_name structure_variable value value value _ _ _ _ valuen ( ) struct particular int rn int age char sex We can initialize the structure at the time of variable creation like struct_particular per m By this is assigned to m of per is assigned to age of per and m is assigned to sex of per structure
 ( ) struct bio int age int rn char sex int phno If we write the following statement strwt bio b m In above example C compiler assigns following value to each member age sex m rn phno So C compiler will automatically initialized zero to those members who are not initialized
 <eos>","A structure can be defined, along with arrays of structures and structures nested within others. The general syntax for the declaration of a structure is `storage_class struct name data_type member data_type member data_typen membern`, where `storage_class` is optional.
 
 For example: `struct student char name int roll_no char branch int semester`.
 Also: `static struct data int day char month_name int year`.
 
 **Creating Structure Variables**
 In the preceding section, we studied how structures are declared, but we have not yet discussed creating structure variables.
 
 **Method I: Creating Structure Variables at the Time of Declaration**
 Example: `struct student char name int roll_no char branch int semester var var var`.
 In this example, three structure variables (`var`, `var`, `var`) are created.
 
 Regarding the `struct student` declaration, its members are `char name`, `int roll_no`, `char branch`, and `int semester`. Examples of variable member relationships are: `var name roll_no branch semester`, `var name roll_no branch semester`, and `name var roll_no branch semester`. Such variables are declared as `struct student var var var`.
 
 **Accessing Members of a Structure**
 The concept for accessing a member is `structure_variable_name`. The expression `mark` is equivalent to `(varmarks)`. This implies that the dot operator acts first, and then any unary operator. For example: Define `struct bio char name char address long phno`. Then declare `struct bio b`. For accessing its member, one would use `bphno`.
 
 **Initialization of Structures**
 A structure is initialized like other data types in C. The values to be initialized must appear in order, as in the definition of the structure, within braces and separated by commas. Its syntax is `struct structure_name structure_variable value value value _ _ _ _ valuen ( )`.
 
 Here is an example: `struct particular int rn int age char sex`. We can initialize the structure at the time of variable creation, like `struct_particular per m`. By this, the value `m` is assigned to `rn` of `per`. Additionally, the value `m` is assigned to `age` of `per`, and `m` is assigned to `sex` of the `per` structure.
 
 Example: `struct bio int age int rn char sex int phno`. If we write the following statement: `struct bio b m`. In the above example, the C compiler assigns values to the following: `age`, `sex`, `m`, `rn`, `phno`. Therefore, the C compiler automatically initializes to zero those members that are not explicitly initialized."
file2_topic_152_1,"var, semester, branch, structure, struct","<task:clean> <sos>
 For example Create a structure named date that has day month and year as its members
 <eos>","For example, create a structure named date that has day, month, and year as its members."
file2_topic_153,"structure, pointer, members, member, accessed","<task:clean> <sos>
 Note that the space in the memory for a structure is created only when the structure variable are defined
 C doesnot allow the initialization of individual structure member within its definition
 To store address of a structure type variable we can define a structure type pointer variable as normal way
 This declaration for a pointer to structure does not allocate any memory for a structure but allocates only for a pointer
 To use structures members through pointer p memory must be allocated for a structure by using function malloc ( ) or by adding declaration and assignment as given below p b Here the base address of b can assign to p pointer
 An individual structure member can be accessed in terms of its corresponding pointer variable by writing ptr_variable member where is called arrow operator and there must be pointer to the structure on the left side of this operator
 C compiler first calculates the size of all members and then reserves the space which is highest among them
 How structure members are accessed using pointer
 <eos>","Note that memory space for a structure is created only when the structure variable is defined. C does not allow the initialization of individual structure members within the structure's definition. To store the address of a structure-type variable, a structure-type pointer variable can be defined in the usual way. This declaration for a pointer to a structure does not allocate any memory for a structure; it allocates memory only for the pointer itself. To use a structure's members through pointer 'p', memory must be allocated for the structure using the `malloc()` function, or by assigning the base address of an existing structure variable (e.g., 'b') to the pointer 'p'. An individual structure member can be accessed using its corresponding pointer variable by writing `ptr_variable->member`, where `->` is called the arrow operator, and there must be a pointer to the structure on the left side of this operator. A C compiler first calculates the size of all members and then reserves the space that is the largest among them. How are structure members accessed using a pointer?"
file2_topic_154_0,"employee, salary, fptr, emp, birthday","<task:clean> <sos>
 Use this structure to read and display employees name id dob and salary include void main ( ) struct date int day int month int year struct employee char name int id struct dat dob float salary emp printf ( Name of Employee t ) scanf ( s empname ) printf ( n ID of employee t ) scanf ( d empid ) printf ( n Day of Birthday t ) scanf ( d empdobday ) printf ( n month of Birthday t ) scanf ( d empdobmonth ) printf ( n Year of Birthday t ) scanf ( d empdobyear ) printf ( salary of Employee t ) scanf ( d empsalary ) printf ( nn The Detail Information of Employee ) printf ( n Name t id t day t month t year t salary ) printf ( n n ) printf ( stdtdtdtdtfempnameempidempdobday empdobmonth empdobyear empdobsalary ) output Name of Employee Teena Id of Employee Day of Birthday Month of Birthday Year of Birthday Salary of Employee The Detail Information of employee Name ID Day Month Year Salary Teena Processing a Structure ( PU ) WAP to read records of employee ( Enter relevant fields Name address salary Id ) void main ( ) struct employee char nam char Address float salary int ID int i j float temp struct emp clrsc ( ) printf ( enteremployee Information ) for ( i i i ) for ( ji j j ) if ( empisalaryempjsalary ) temp empisalary empisalary empjsalary empjsalary temp printf ( Information of employees having highest salary In ) printf ( nNametttAddressttSalarytDtn ) printf ( n n ) for ( i i i ) printf ( sttsttftd empiName empiAddress empiSalary empiID ) getch ( ) PU Create a user defined array structure student record having members physics chemistry and mathematics
 <eos>","Use this structure to read and display an employee's name, ID, date of birth, and salary. This involves a `void main()` function, a `struct Date` with `int day`, `int month`, `int year`, and a `struct Employee` with `char name`, `int id`, `struct Date dob`, `float salary`, and an `emp` variable of type `struct Employee`. The program prompts for the employee's name, ID, day, month, and year of birth, and salary using `printf` and `scanf` functions. After input, it displays ""The Detail Information of Employee"", followed by a formatted table header (Name, ID, Day, Month, Year, Salary), and then the entered employee details using another `printf` statement with format specifiers like `s`, `d`, `f` for `empname`, `empid`, `empdobday`, `empdobmonth`, `empdobyear`, and `empsalary`.
 
 Output: Name of Employee Teena, ID of Employee, Day of Birthday, Month of Birthday, Year of Birthday, Salary of Employee. The Detail Information of employee: Name, ID, Day, Month, Year, Salary, Teena.
 
 Processing a Structure (PU): Write a program to read records of employees (enter relevant fields: Name, Address, Salary, ID). Inside `void main()`, a `struct Employee` is defined with `char nam`, `char Address`, `float salary`, and `int ID`. Variables `int i, j` and `float temp` are declared. The program uses `clrscr()` and `printf(""Enter Employee Information"")`. It then uses nested loops (`for (i i i)` and `for (j i j j)`) to perform a sorting operation, specifically comparing `empi.salary` and `empj.salary` and swapping them using `temp`. Finally, it prints ""Information of employees having highest salary In"", followed by a formatted header (Name, Address, Salary, ID), and then iterates through the employee array (`for (i i i)`) to print the `empiName`, `empiAddress`, `empiSalary`, and `empiID` using `printf` with format specifiers. `getch()` is used at the end.
 
 PU: Create a user-defined array structure for student records, having members for Physics, Chemistry, and Mathematics."
file2_topic_154_1,"employee, salary, fptr, emp, birthday","<task:clean> <sos>
 Use this structure to read the name age and salary of employee and write entered information to a file employeedat in D drive include void main ( ) struct employee char empName int age float salary struct employee emp FILE fptr ftpr fopen ( demployeedat wb ) if ( fptr NULL ) printf ( File can not be entered ) exit ( ) printf ( Employee Name It ) scanf ( s emp
 empName ) printf ( employee age It ) scanf ( d empage ) printf ( salary of the employee It ) scarf ( f empsalary ) printf ( In writing this information to a file _ _ _ In ) fwrite ( emp sizeof ( emp ) fptr ) getch ( ) Create a structure named student that has name roll and marks as members
 wb ) if ( fptr NULL ) printf ( File cant be created ) exit ( ) for ( i i itt ) printf ( n Enter Information of student No d n i ) printf ( Name t ) scanf ( s siname ) printf ( n Rollt ) scanf ( d siroll ) printf ( n Marks t ) scanf ( f tempMarks ) simarks tempMarks printf ( n working Information to file _ _ _ _ _ n ) fwrite ( s size of ( s ) fptr ) rewind ( fptr ) printf ( n reading same content from file _ _ _ _ _ n ) fread ( st size of ( st ) fptr ) printf ( n student Name t Roll t Marks ) printf ( n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ n ) for ( i i i ) printf ( sttdtf n stiname stiroll stimarks ) fclose ( fptr ) getch ( ) In Program read employee information again and again until user wants to add more employees
 Finally write a program to search information of a particular employee from the file
 <eos>","Use this structure to read the name, age, and salary of an employee and write the entered information to a file named `employeedat` in the D drive. Include `void main()`. Define `struct employee` with members `char empName`, `int age`, and `float salary`. Declare `struct employee emp` and `FILE *fptr`. Open the file `D:\\employeedat` in write-binary mode (`""wb""`), setting `fptr` as the file pointer. If `fptr` is `NULL`, print 'File cannot be created' and exit. Prompt for 'Employee Name: ' and scan the string into `emp.empName`. Prompt for 'Employee age: ' and scan the integer into `emp.age`. Prompt for 'Salary of the employee: ' and scan the float into `emp.salary`. Print 'Writing this information to a file...'. Write the `emp` structure to `fptr` using `sizeof(emp)`. Call `getch()`. Create a structure named `student` that has `name`, `roll`, and `marks` as members. For the student data, open a file in write-binary mode (`""wb""`). If the file cannot be created (`fptr` is `NULL`), print 'File cannot be created' and exit. In a loop, prompt to 'Enter Information of student No. %d' (with the loop counter), then prompt for 'Name: ' and scan into `s.name`. Prompt for 'Roll: ' and scan into `s.roll`. Prompt for 'Marks: ' and scan into `tempMarks`, then assign `s.marks = tempMarks`. Print 'Writing Information to file...'. Write the `s` structure to `fptr` using `sizeof(s)`. Rewind `fptr`. Print 'Reading same content from file...'. Read the `st` structure from `fptr` using `sizeof(st)`. Print 'Student Name\\tRoll\\tMarks', followed by a separator line. In a loop, print `st.name`, `st.roll`, and `st.marks` formatted as string, integer, float, with tab separation and a newline. Close `fptr`. Call `getch()`. Additionally, in a program, read employee information repeatedly until the user wants to add more employees. Finally, write a program to search for information of a particular employee from the file."
file2_topic_154_2,"employee, salary, fptr, emp, birthday","<task:clean> <sos>
 include include struct employee char name int age float salary structemployee emp FILE fptr char yes_no name int dataFound clrscr ( ) fptr fopen ( Cemployeetxt wb ) if ( fptr NULL ) printf ( File can not be created ) exit ( ) Do printf ( employee Name t ) scanf ( s empname ) printf ( employee age t ) scanf ( d empage ) printf ( salary of the employee t ) scanf ( f empsalary ) fwrite ( emp size of ( emp ) fptr printf ( Do you want to add another employee
 Press Y or Y it ) fflush ( stdin ) yes_no getchar ( ) while ( yes_no y yes_no y ) printf ( Enter the name of employee which is to be searched ) fflush ( stdin ) gets ( name ) rewind ( fptr ) while ( fread ( emp size of ( emp ) fptr ) ) if ( strcmp ( empname name ) ) dataFound printf ( Name t Age t t Salarly n ) printf ( n _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ __ _ _ _ _ _ _ _ n ) print ( stdtfempname empage empsalary ) If ( dataFound ) print ( n Matching data not found ) getch ( ) Difference between text and binary mode Some Important Questions
 <eos>","The program structure implies standard library inclusions. It defines a `struct employee` containing a `char name`, an `int age`, and a `float salary`. Variables declared include an instance of this struct, `emp`, a `FILE` pointer `fptr`, a `char yes_no`, another `char name` (for searching), and an `int dataFound`. The `clrscr()` function is invoked. A file named `Cemployeetxt` is opened in write-binary mode (`wb`), and its pointer is assigned to `fptr`. If `fptr` is `NULL`, indicating failure, the program prints 'File can not be created' and exits.
 
 A `do-while` loop then begins. Within this loop, the program prompts for and reads the 'employee Name', 'employee age', and 'salary of the employee' into `emp.name`, `emp.age`, and `emp.salary` respectively. The `emp` struct's data is written to the file using `fwrite` (with `emp`, `sizeof(emp)`, and `fptr` as arguments). Following this, the user is asked, 'Do you want to add another employee? Press Y or Y it'. The `stdin` input buffer is flushed, and a character is read into `yes_no` using `getchar()`. The loop continues as long as `yes_no` is 'y' or 'Y'.
 
 After data entry, the user is prompted to 'Enter the name of employee which is to be searched'. `stdin` is flushed, and the input is stored in the `name` variable using `gets()`. The file pointer `fptr` is then reset to the beginning of the file using `rewind()`. A `while` loop commences, reading `emp` data from `fptr` using `fread` (with `emp`, `sizeof(emp)`, and `fptr`). Inside this loop, if `strcmp(emp.name, name)` evaluates to a non-zero value, `dataFound` is set. Subsequently, a header 'Name\tAge\t\tSalary\n' is printed, followed by a separator line of underscores. The employee's `name`, `age`, and `salary` are then printed using a function (e.g., `stdtfempname`, `empage`, `empsalary`).
 
 Finally, if `dataFound` is true, the message 'Matching data not found' is printed. The program then waits for a character input via `getch()`. Additional topics mentioned are 'Difference between text and binary mode' and 'Some Important Questions'."
file2_topic_155,"students, structure, having, object, mathematics","<task:clean> <sos>
 Write a program having a structure of student type
 Make use of array of structure to input information of students
 Write a program to read the name roll no and name of five students using array of structure object
 Create a user defined array structure student record having members physics chemistry and mathematics
 Use this structure to read and display records of students
 <eos>","Write a program that defines a user-defined structure named `student_record`. This structure should include members for `name`, `roll number`, `physics` marks, `chemistry` marks, and `mathematics` marks. Utilize an array of this `student_record` structure to input and store information for five students. The program should then read and display the full records of these students."
file2_topic_156,"files, data, necessary, binary, information","<task:clean> <sos>
 These problems invite the concept of data file in which data can be stored on the disks and read whenever necessary without destroying data
 The data file allows us to store information permanently and to access and alter that information whenever necessary
 Mainly there are two types of data files
 The standard data files are again subdivided into text files and binary files
 The text files consist of consecutive characters and these characters can be interpreted as individual data item
 The binary files organize data into blocks containing contiguous bytes of information
 <eos>","These problems necessitate the concept of a data file, in which data can be stored on disks and read whenever necessary without destroying data. The data file allows us to store information permanently and to access and alter that information whenever necessary. There are mainly two types of data files. Standard data files are subdivided into text files and binary files. Text files consist of consecutive characters, and these characters can be interpreted as individual data items. Binary files organize data into blocks containing contiguous bytes of information."
file2_topic_157,"acess, record, fortyforth, sequentially, random","<task:clean> <sos>
 For example if we want to acess the fortyfourth record then firsat forty three records should be read sequentially to reach the fortyforth record
 In random acess data can be accessed and processed randomly ie
 in this case the fortyforth record can be accessed directly
 There is no need to read each record sequentially if we want to acess a particularly record
 Random acess takes takes less time than the sequential acess
 <eos>","For example, if we want to access the forty-fourth record, then the first forty-three records should be read sequentially to reach the forty-fourth record. In random access, data can be accessed and processed randomly; i.e., in this case, the forty-fourth record can be accessed directly. There is no need to read each record sequentially if we want to access a particular record. Random access takes less time than sequential access."
file2_topic_158,"text, graphics, mode, header, erases","<task:clean> <sos>
 The text mode functions are concerned with placing text in certain area of screen
 Some text mode graphics function clrscr ( ) This function erases the text window
 In text mode we can address only location ( ) but in graphicsmode we can address individual pixel or dots on the screen
 If we want to use graphics mode functions then we have to add graphics h header file but for text mode function no need of graphics h header file
 <eos>","Text mode functions are concerned with placing text in a certain area of the screen. The text mode function `clrscr()` erases the text window. In text mode, we can only address character locations, whereas in graphics mode, we can address individual pixels or dots on the screen. To use graphics mode functions, the `graphics.h` header file must be included; however, text mode functions do not require it."
file2_topic_159,"graphics, mode, adapter, monitor, driver","<task:clean> <sos>
 They work with any graphics monitor and adapter
 The graphics mode function require a graphics monitor and adapter card such as CGA EGA or VGA
 This makes computer screen in specified graphics mode
 This function initializes the graphics system by loading a graphics driver from disk then putting the system into graphics mode
 This variable specifies the graphics driver are applicable only in graphics mode and they communicate directly with monitor
 Depending on what adapter is used one of these driver gets selected
 The some constants defined in graphics h file for this argument are DETECT ( ) CGA ( ) EGA ( ) VGA ( ) etc
 Closing Graphics Mode Once a program has finished its job using the graphics facilities then it should restore the system to the mode that was previously in use ( ie
 the graphics mode should be closed )
 If graphics mode is not closed explicitly by the programmer undesirable effects may be felt
 If we want to use the graphics mode functions then our first job is to set our computer mode to graphics mode
 <eos>","They work with any graphics monitor and adapter.
 The graphics mode function requires a graphics monitor and adapter card, such as CGA, EGA, or VGA.
 This puts the computer screen into a specified graphics mode.
 This function initializes the graphics system by loading a graphics driver from disk and then putting the system into graphics mode.
 This variable specifies that the graphics driver is applicable only in graphics mode, and it communicates directly with the monitor.
 Depending on what adapter is used, one of these drivers gets selected.
 Some constants defined in the graphics.h file for this argument are DETECT(), CGA(), EGA(), VGA(), etc.
 Closing Graphics Mode. Once a program has finished its job using the graphics facilities, it should restore the system to the mode that was previously in use (i.e., the graphics mode should be closed).
 If graphics mode is not closed explicitly by the programmer, undesirable effects may occur.
 If we want to use the graphics mode functions, our first job is to set our computer's mode to graphics mode."
file2_topic_160,"gotoxy, joining, cursor, draws, lineral","<task:clean> <sos>
 The general syntax Window ( left top right bottom ) gotoxy ( ) The gotoxy ( ) library function points the cursor position within a text window its syntax is gotoxy ( xy ) text color ( ) function It is used to give color of any text
 The syntax of line ( ) function is line ( x y x y ) where x y x y are integer type and they represent the coordinate ( x y ) and ( x y )
 The above command draws a line joining two points with coordinates ( x y ) and ( x y )
 lineral ( ) the function lineral ( x y ) draws a line joining the current cursor position and a point at a distance of x in the horizontal and y in vertical direction
 lineto ( ) The function lineto ( x y ) draws a line joining the current cursor position and a point with coordinates x and y
 <eos>","The general syntax for Window is Window(left, top, right, bottom). The gotoxy() library function sets the cursor position within a text window; its syntax is gotoxy(x, y). The textcolor() function is used to set the color of any text. The syntax of the line() function is line(x, y, x, y), where x, y, x, and y are of integer type and represent the coordinates (x, y) and (x, y). The above command draws a line joining two points with coordinates (x, y) and (x, y). The lineral() function lineral(x, y) draws a line joining the current cursor position and a point at a distance of x in the horizontal direction and y in the vertical direction. The lineto() function lineto(x, y) draws a line joining the current cursor position and a point with coordinates (x, y)."
file2_topic_161,"color, background, getpixel, setbkcolor, textbackground","<task:clean> <sos>
 The syntax of text color ( ) is text color ( color constant ) textbackground ( ) function This function is used to set background color of each character
 The syntax is textbackground ( color constant ) Some color constants Color No
 Color name Black Blue Green Cyan Red Magenta Brown etc
 Its syntax is Putpixel ( int x int y int color ) getpixel ( ) gets color of specified pixel
 Its syntax is integer_variable getpixel ( int x int y ) setcolor ( ) It changes current drawing foreground color
 Its syntax is setcolor ( int color ) setbkcolor ( ) It changes the background color
 Its syntax is setbkcolor ( int color ) line ( ) The line ( ) function can draw a line
 Int P Drawpoly ( P ) setlinestyle ( ) This function can select different style of line
 <eos>","The syntax of `textcolor()` is `textcolor(color_constant)`. The `textbackground()` function is used to set the background color of each character. Its syntax is `textbackground(color_constant)`. Some color constants are: Black, Blue, Green, Cyan, Red, Magenta, Brown, etc. Its syntax is `Putpixel(int x, int y, int color)`. The `getpixel()` function gets the color of a specified pixel. The syntax for `getpixel()` is `integer_variable = getpixel(int x, int y)`. The `setcolor()` function changes the current drawing foreground color. Its syntax is `setcolor(int color)`. The `setbkcolor()` function changes the background color. Its syntax is `setbkcolor(int color)`. The `line()` function can draw a line. The syntax for `Drawpoly()` is `Drawpoly(int P)`. The `setlinestyle()` function can select a different line style."
file2_topic_162,"initgraph, mode, bgi, graphics, path","<task:clean> <sos>
 Graphics Mode Graphic function Initialization In order to initialize graphics we initgraph ( ) function
 Its general syntax is initgraph ( graphics_driver graphics_mode path to driver ) where graphics_driver is a variable of type int initialized to some constant that defined in graphicsh
 The closegraph ( ) fuction is used to restore the screen to the mode it was in before we called initgraph ( ) and deallocates all memory allocated by the graphics system
 The syntax of closegraph ( ) sunction is closegraph ( ) Graphics Mode In text mode we are restricted to display text or graphics character but in graphics mode we can display points lines and compleax shapes
 Function initgraph ( ) sets our mode for graphics work
 The syntax of initgraph ( ) function is initgraph ( driver mode path of bgi files ) where driver and mode both are integer type and path for bgi files means where our BGI files are in disk
 If we want to set the mode of computer is graphics mode by initgraph ( ) function then we have to write the following set of statements intdriver mode driverDETECT initgraph ( driver mode Ctcbgi ) we are assuming that our bgi are in sub directory Ctcbgi therefore the path of bgi files is written in initgraph ( ) function like Ctcbgi The statement driverDETECT will check our hardware and select appropriate values for argument to function initgraph ( ) Some Graphics Mode Graphic Functions putpixel ( ) Plot a point with specified color
 <eos>","Graphics Mode and Graphic Function Initialization. To initialize graphics, we use the `initgraph()` function. Its general syntax is `initgraph(graphics_driver, graphics_mode, path_to_driver)`, where `graphics_driver` is an `int` variable initialized to a constant defined in `graphics.h`. The `closegraph()` function is used to restore the screen to the mode it was in before calling `initgraph()` and deallocates all memory allocated by the graphics system. The syntax of the `closegraph()` function is `closegraph()`. Regarding Graphics Mode: In text mode, we are restricted to displaying text or graphics characters, but in graphics mode, we can display points, lines, and complex shapes. The `initgraph()` function sets the mode for graphics work. The syntax of the `initgraph()` function is `initgraph(driver, mode, path_of_bgi_files)`, where both `driver` and `mode` are of integer type, and `path_of_bgi_files` indicates the location of the BGI files on disk. If we want to set the computer's mode to graphics mode using the `initgraph()` function, we must write the following set of statements: `int driver, mode; driver = DETECT; initgraph(&driver, &mode, ""C:\\tc\\bgi"");`. We are assuming that our BGI files are located in the `C:\\tc\\bgi` subdirectory; therefore, the path for BGI files is specified in the `initgraph()` function as `C:\\tc\\bgi`. The statement `driver = DETECT;` will check the hardware and select appropriate values for the arguments of the `initgraph()` function. Some Graphics Mode Graphic Functions include `putpixel()`, which plots a point with a specified color."
file2_topic_163,"arc, draws, circle, rectangle, ellipse","<task:clean> <sos>
 rectangle ( ) The function rectangle ( x y x y ) draw rectangle where point ( x y ) is left top corner point of rectangle and point ( x y ) is right bottom corner
 ( ) y x ( ) y x circle ( ) The function circle ( x y r ) draws a circle of radius r The coordinates of the centre of the circle is ( x y )
 r ( ) y x arc ( ) Function arc ( x y a a r ) draws an arc on the screen starting from angle a to a
 The radius of the circle of which the arc forms a part is r and x y are its centre coordinates
 For example arc ( ) Above statement draws an arc like ellipse ( ) The function ellipse ( x y c c a a x y ) draws an ellipse of centre ( c c )
 The a and a are start and end angle of the arc x and y are the xaxis and yaxis radii
 <eos>","rectangle(): The function `rectangle(x, y, x, y)` draws a rectangle where the first `(x, y)` represents the left-top corner point and the second `(x, y)` represents the right-bottom corner point. circle(): The function `circle(x, y, r)` draws a circle of radius `r`; the coordinates of its centre are `(x, y)`. arc(): The function `arc(x, y, a, a, r)` draws an arc on the screen, starting from angle 'a' to angle 'a'. The radius of the circle of which the arc forms a part is `r`, and `(x, y)` are its centre coordinates. For example, `arc()`: The above statement draws an arc, like `ellipse()`. The function `ellipse(x, y, c, c, a, a, x, y)` draws an ellipse with its centre at `(c, c)`. The 'a' parameters are the start and end angles of the arc; the 'x' and 'y' parameters are the x-axis and y-axis radii."
file2_topic_164,"vertices, polygon, fillpoly, drawpoly, closed","<task:clean> <sos>
 a drawpoly ( ) Function drawpoly ( int n int p ) draws n vertices of polygon
 To draw a closed polugon with n vertices we must pass n coordinates
 fillpoly ( ) It draws and fills polygon
 Its syntax is fillpoly ( int n int p ) To draw a closed polygon with vertices we must pass n coordinates to fillpoly ( )
 <eos>","The `drawpoly(int n, int p)` function draws a polygon with n vertices. To draw a closed polygon with n vertices, we must pass n coordinates. The `fillpoly()` function draws and fills a polygon. Its syntax is `fillpoly(int n, int p)`. To draw a closed polygon with n vertices, we must pass n coordinates to `fillpoly()`."
file2_topic_165,"style, thickness, pattern, respectively","<task:clean> <sos>
 Its syntax is setlinestyle ( int style patern thickness ) The type of style and thickness is int type and the type of pattern is unsigned int type
 Where style are SOLID_LINE DOTTED_LINE CENTRE_LINE DASHED_LINE USERBIT_LINE or integer number respectively
 The pattern is required only if user defined style ( USERBIT_LINE ) is used
 The thickness parameter can have value NORM_WIDTH or THICK_WIDTH or integer value or respectively
 <eos>","Its syntax is `setlinestyle(int style, int pattern, int thickness)`. The `style` and `thickness` parameters are of `int` type, while the `pattern` parameter is of `unsigned int` type. The `style` parameter can be `SOLID_LINE`, `DOTTED_LINE`, `CENTRE_LINE`, `DASHED_LINE`, `USERBIT_LINE`, or an integer value. The `pattern` parameter is required only if a user-defined style (`USERBIT_LINE`) is used. The `thickness` parameter can have the value `NORM_WIDTH`, `THICK_WIDTH`, or an integer value."
file2_topic_166,"circle, draw, rectangle, detect, ctcbgi","<task:clean> <sos>
 Simple program using built in graphical function PU Program in c to draw a line a circle a rectangle and an ellipse include main ( ) int gd gm clrscr ( ) gd DETECT initgraph ( gd gm Ctcbgi ) setcolor ( ) line ( ) circle ( ) rectangle ( ) ellipse ( ) getch ( ) closegraph ( ) PU Program to draw concentric circle having radius m and units include main ( ) int gd DETECT gm clrscr ( ) initgraph ( gd gm Ctcbgi ) setcolor ( ) circle ( ) circle ( ) circle ( ) getch ( ) closegraphc ( ) Program to draw an arc include main ( ) int gd DETECT gm clrscr ( ) initgraph ( gd gm Ctcbgi ) arc ( ) getch ( ) closegraph ( ) Program to draw a polygon include main ( ) int gd DETECT gm int P ( ) clrscr ( ) initgraph ( gd gm Ctcbgi ) drawpoly ( P ) fillpoly ( P ) getch ( ) closegraph ( ) Some Important Questions Write a program to draw ( PU ) ( i ) Line ( ii ) Circle ( iii ) Rectangle ( iv ) Arc
 Write a program using graphics to draw a rectangle and a circle
 ( PU BACK ) Write a program in C to draw a circle a rectangle and an ellipse
 ( PU ) Write a program in C that can display a circle and a rectangle
 Choose centre and radius of the circle as well as coordinates of the rectangle on your own
 ( PU ) Write a program to draw concentric circles having radius and units
 <eos>","A simple program uses built-in graphical functions. (PU) This program, written in C, draws a line, a circle, a rectangle, and an ellipse. Its components include: `main()`, `int gd, gm`, `clrscr()`, `gd = DETECT`, `initgraph(gd, gm, ""Ctcbgi"")`, `setcolor()`, `line()`, `circle()`, `rectangle()`, `ellipse()`, `getch()`, and `closegraph()`. PU. A program to draw concentric circles, having radius `m` and units, includes: `main()`, `int gd = DETECT, gm`, `clrscr()`, `initgraph(gd, gm, ""Ctcbgi"")`, `setcolor()`, `circle()`, `circle()`, `circle()`, `getch()`, and `closegraph()`. A program to draw an arc includes: `main()`, `int gd = DETECT, gm`, `clrscr()`, `initgraph(gd, gm, ""Ctcbgi"")`, `arc()`, `getch()`, and `closegraph()`. A program to draw a polygon includes: `main()`, `int gd = DETECT, gm`, `int P()`, `clrscr()`, `initgraph(gd, gm, ""Ctcbgi"")`, `drawpoly(P)`, `fillpoly(P)`, `getch()`, and `closegraph()`. Some Important Questions: Write a program (PU) to draw: (i) a Line, (ii) a Circle, (iii) a Rectangle, and (iv) an Arc. Write a program using graphics to draw a rectangle and a circle. (PU BACK) Write a program in C to draw a circle, a rectangle, and an ellipse. (PU) Write a program in C that can display a circle and a rectangle. Choose the center and radius of the circle, as well as the coordinates of the rectangle, on your own. (PU) Write a program to draw concentric circles having radius and units."
file1_topic_11,"blocks, redundant, add, make, nbit","<task:clean> <sos>
 We add r redundant bits to each block to make the length n k r The resulting nbit blocks are called codewords
 In block coding we divide our message into blocks each of k bits called datawords
 We add redundant bits to the bit dataword to make bit codewords
 <eos>","We add `r` redundant bits to each block to make its length `n = k + r`. The resulting `n`-bit blocks are called codewords. In block coding, we divide our message into blocks, each of `k` bits, called datawords. We add redundant bits to the `k`-bit dataword to make `n`-bit codewords."
file1_topic_12,"set, acceptable, satisfies, condition, relationship","<task:clean> <sos>
 In this coding scheme k and n
 The relationship between m and n in these codes is n m
 Calculate values of k and n that satisfy this requirement
 Solution We need to make k n m greater than or equal to or m m
 If we set m the result is n and k or which is not acceptable
 If we set m then n and k which satisfies the condition
 <eos>","In this coding scheme, k and n are parameters. The relationship between m and n in these codes is expressed as 'n m'. Calculate values of k and n that satisfy this requirement. Solution: We need to ensure that 'k n m' is greater than or equal to 'm' or 'm m'. If we set `m`, the resulting `n` and `k` are found to be unacceptable. If we set `m`, the resulting `n` and `k` satisfy the condition."
file1_topic_13,"dataword, flipping, changing, derive, wrong","<task:clean> <sos>
 As we saw we have k datawords and n codewords
 Later we will see how to derive a codeword from a dataword
 Assume the dataword is
 The dataword becomes the codeword
 After flipping b ( changing the to ) the final dataword is
 After flipping b we get the wrong dataword
 <eos>","As we saw, we have k datawords and n codewords.
 Later, we will see how to derive a codeword from a dataword.
 Assume the dataword is.
 The dataword becomes the codeword.
 After flipping b (changing its value), the final dataword is.
 After flipping b, we get the wrong dataword."
file1_topic_14,"column, digit, shows, datawords, process","<task:clean> <sos>
 Table shows the list of datawords and codewords
 Table shows the datawords and codewords
 We keep the rightmost digit ( ) and insert the leftmost digit ( ) as the carry in the second column
 The process is repeated for each column
 <eos>","<task:clean> <sos>
 The table shows the datawords and codewords. We keep the rightmost digit ( ) and insert the leftmost digit ( ) as the carry in the second column. The process is repeated for each column.
 <eos>"